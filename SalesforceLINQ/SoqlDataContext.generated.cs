using System;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using LinqToSalesforce;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Linq;

namespace SalesforceLINQ
{
    public class PickAccountTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTypeConverter))]
    public class PickAccountType
    {
        public static readonly string  ABCS = "ABCS"; 
        public static readonly string  ABSS = "ABSS"; 
        public static readonly string  Architect = "Architect"; 
        public static readonly string  Association = "Association"; 
        public static readonly string  Competitor = "Competitor"; 
        public static readonly string  Consultant = "Consultant"; 
        public static readonly string  ConsultingEngineer = "Consulting Engineer"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  ControlsPartsDistributor = "Controls & Parts Distributor"; 
        public static readonly string  Customer = "Customer"; 
        public static readonly string  Dealer = "Dealer"; 
        public static readonly string  Developer = "Developer"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  ElectricalContractor = "Electrical Contractor"; 
        public static readonly string  EndUser = "End User"; 
        public static readonly string  EndUserOwner = "End User / Owner"; 
        public static readonly string  EPCContractor = "EPC Contractor"; 
        public static readonly string  FacilityOwner = "Facility Owner"; 
        public static readonly string  FMCompany = "FM Company"; 
        public static readonly string  GeneralContractor = "General Contractor"; 
        public static readonly string  HVACContractor = "HVAC Contractor"; 
        public static readonly string  HVACDistributor = "HVAC Distributor"; 
        public static readonly string  Intercompany = "Intercompany"; 
        public static readonly string  IRContractor = "IR Contractor"; 
        public static readonly string  Key = "Key"; 
        public static readonly string  Lender = "Lender"; 
        public static readonly string  Maintain = "Maintain"; 
        public static readonly string  Manage = "Manage"; 
        public static readonly string  MechanicalContractor = "Mechanical Contractor"; 
        public static readonly string  NotYetCategorized = "Not Yet Categorized"; 
        public static readonly string  OEM = "OEM"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  ProjectManagement = "Project Management"; 
        public static readonly string  Prospect = "Prospect"; 
        public static readonly string  Reseller = "Reseller"; 
        public static readonly string  Retailer = "Retailer"; 
        public static readonly string  Shipyard = "Shipyard"; 
        public static readonly string  SystemIntegrator = "System Integrator"; 
        public static readonly string  Target = "Target"; 
        public static readonly string  Vendor = "Vendor"; 
        public static readonly string  WhitespaceMaintained = "Whitespace Maintained"; 
        public static readonly string  WhitespaceTarget = "Whitespace Target"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountType(string s)
        {
            return new PickAccountType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountType Parse(string text) => text;

        

    }
    public class PickAccountBillingStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountBillingStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountBillingStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountBillingStateCodeConverter))]
    public class PickAccountBillingStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountBillingStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountBillingStateCode(string s)
        {
            return new PickAccountBillingStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountBillingStateCode Parse(string text) => text;

        

    }
    public class PickAccountBillingCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountBillingCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountBillingCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountBillingCountryCodeConverter))]
    public class PickAccountBillingCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountBillingCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountBillingCountryCode(string s)
        {
            return new PickAccountBillingCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountBillingCountryCode Parse(string text) => text;

        

    }
    public class PickAccountShippingStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShippingStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShippingStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShippingStateCodeConverter))]
    public class PickAccountShippingStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShippingStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShippingStateCode(string s)
        {
            return new PickAccountShippingStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShippingStateCode Parse(string text) => text;

        

    }
    public class PickAccountShippingCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShippingCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShippingCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShippingCountryCodeConverter))]
    public class PickAccountShippingCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShippingCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShippingCountryCode(string s)
        {
            return new PickAccountShippingCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShippingCountryCode Parse(string text) => text;

        

    }
    public class PickAccountIndustryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountIndustry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountIndustry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountIndustryConverter))]
    public class PickAccountIndustry
    {
        public static readonly string  Agriculture = "Agriculture"; 
        public static readonly string  Apparel = "Apparel"; 
        public static readonly string  Banking = "Banking"; 
        public static readonly string  Biotechnology = "Biotechnology"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Communications = "Communications"; 
        public static readonly string  Construction = "Construction"; 
        public static readonly string  Consulting = "Consulting"; 
        public static readonly string  Education = "Education"; 
        public static readonly string  Electronics = "Electronics"; 
        public static readonly string  Energy = "Energy"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Entertainment = "Entertainment"; 
        public static readonly string  Environmental = "Environmental"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  FoodBeverage = "Food & Beverage"; 
        public static readonly string  Government = "Government"; 
        public static readonly string  Healthcare = "Healthcare"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Insurance = "Insurance"; 
        public static readonly string  Machinery = "Machinery"; 
        public static readonly string  Manufacturing = "Manufacturing"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  NotForProfit = "Not For Profit"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  Recreation = "Recreation"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  Shipping = "Shipping"; 
        public static readonly string  Technology = "Technology"; 
        public static readonly string  Telecommunications = "Telecommunications"; 
        public static readonly string  Transportation = "Transportation"; 
        public static readonly string  Utilities = "Utilities"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountIndustry o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountIndustry(string s)
        {
            return new PickAccountIndustry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountIndustry Parse(string text) => text;

        

    }
    public class PickAccountOwnershipConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountOwnership)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountOwnership {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountOwnershipConverter))]
    public class PickAccountOwnership
    {
        public static readonly string  Public = "Public"; 
        public static readonly string  Private = "Private"; 
        public static readonly string  Subsidiary = "Subsidiary"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountOwnership o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountOwnership(string s)
        {
            return new PickAccountOwnership {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountOwnership Parse(string text) => text;

        

    }
    public class PickAccountRatingConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountRating)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountRating {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountRatingConverter))]
    public class PickAccountRating
    {
        public static readonly string  Hot = "Hot"; 
        public static readonly string  Warm = "Warm"; 
        public static readonly string  Cold = "Cold"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountRating o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountRating(string s)
        {
            return new PickAccountRating {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountRating Parse(string text) => text;

        

    }
    public class PickAccountCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCurrencyIsoCodeConverter))]
    public class PickAccountCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCurrencyIsoCode(string s)
        {
            return new PickAccountCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickAccountAccountSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountAccountSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountAccountSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountAccountSourceConverter))]
    public class PickAccountAccountSource
    {
        public static readonly string _121SecuritySummit = "121 Security Summit"; 
        public static readonly string  AcuityBrands = "Acuity Brands"; 
        public static readonly string  AHR2016 = "AHR 2016"; 
        public static readonly string  Backlog = "Backlog"; 
        public static readonly string  BestGuess = "Best Guess"; 
        public static readonly string  BidClerkcom = "BidClerk.com"; 
        public static readonly string  BranchFederalGrowthInitiative = "Branch Federal Growth Initiative"; 
        public static readonly string  CCIClintonClimateInitiative = "CCI (Clinton Climate Initiative)"; 
        public static readonly string  ChillerTurnkeyRetrofit = "Chiller Turnkey Retrofit"; 
        public static readonly string  Competition = "Competition"; 
        public static readonly string  ConstructionJournal = "Construction Journal"; 
        public static readonly string  ConsultingEngineerAccountRelationship = "Consulting Engineer Account Relationship"; 
        public static readonly string  ContractorAccountRelationship = "Contractor Account Relationship"; 
        public static readonly string  CooperLighting = "Cooper Lighting"; 
        public static readonly string  CorporateClients = "Corporate Clients"; 
        public static readonly string  CoSell = "Co-Sell"; 
        public static readonly string  CREE = "CREE"; 
        public static readonly string  Customer = "Customer"; 
        public static readonly string  DigitalMarketing = "Digital Marketing"; 
        public static readonly string  DigitalMarketingusingLean = "Digital Marketing using Lean"; 
        public static readonly string  DodgeReports = "Dodge Reports"; 
        public static readonly string  EnergySolutions = "Energy Solutions"; 
        public static readonly string  ENGOPSCustomerLead = "ENG/OPS Customer Lead"; 
        public static readonly string  Engineer = "Engineer"; 
        public static readonly string  ExternalReferral = "External Referral"; 
        public static readonly string  FacilityDude = "FacilityDude"; 
        public static readonly string  FLSP = "FLSP"; 
        public static readonly string  FWDodge = "FW Dodge"; 
        public static readonly string  GCWebsite = "GC Website"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  Gexpro = "Gexpro"; 
        public static readonly string  Glenigans = "Glenigan's"; 
        public static readonly string  Graybar = "Graybar"; 
        public static readonly string  GWS = "GWS"; 
        public static readonly string  HealthcareEnvironmentOptimization = "Healthcare Environment Optimization"; 
        public static readonly string  IBM = "IBM"; 
        public static readonly string  InboundCalls = "Inbound - Calls"; 
        public static readonly string  InboundEmail = "Inbound - Email"; 
        public static readonly string  InboundForm = "Inbound - Form"; 
        public static readonly string  InboundTradeShow = "Inbound - Trade Show"; 
        public static readonly string  LATIBTLM = "LAT IBT L&M"; 
        public static readonly string  LATIBTNewPSA = "LAT IBT New PSA"; 
        public static readonly string  LATIBTNewPSAControls = "LAT IBT New PSA Controls"; 
        public static readonly string  LATIBTNewPSARefrigeration = "LAT IBT New PSA Refrigeration"; 
        public static readonly string  LATIBTRetrofitControls = "LAT IBT Retrofit Controls"; 
        public static readonly string  LATIBTRetrofitLTC = "LAT IBT Retrofit LTC"; 
        public static readonly string  LATIBTRetrofitRefrigeration = "LAT IBT Retrofit Refrigeration"; 
        public static readonly string  LATIBTRetrofitSTC = "LAT IBT Retrofit STC"; 
        public static readonly string  LATLMorPrimeRetrofitFrickControlPanelUpgrade = "LAT L&M or Prime Retrofit / Frick Control Panel Upgrade"; 
        public static readonly string  LATNonIBTSTCReplacement = "LAT Non IBT STC Replacement"; 
        public static readonly string  LATOptispeedVSDRetrofitCompetitorChiller = "LAT Optispeed (VSD)Retrofit - Competitor Chiller"; 
        public static readonly string  LATOptispeedVSDRetrofitYorkChiller = "LAT Optispeed (VSD)Retrofit - York Chiller"; 
        public static readonly string  LATOptiviewControlPanelCompetitorChiller = "LAT Optiview Control Panel - Competitor Chiller"; 
        public static readonly string  LATOptiviewControlPanelYorkChiller = "LAT Optiview Control Panel - York Chiller"; 
        public static readonly string  LATPrimeRetrofitACScrewCompressorReplacementExchange = "LAT Prime Retrofit /AC Screw Compressor Replacement/Exchange"; 
        public static readonly string  LATPrimeRetrofitAircooledChillerCoilChange = "LAT Prime Retrofit / Air-cooled Chiller Coil Change"; 
        public static readonly string  LATPrimeRetrofitDXCompressorOverhaulReplacement = "LAT Prime Retrofit / DX Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitFSUpgrade = "LAT Prime Retrofit / F&S Upgrade"; 
        public static readonly string  LATPrimeRetrofitFrickCompressorOverhaulReplacement = "LAT Prime Retrofit / Frick Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitNonIBTLTCReplacement = "LAT Prime Retrofit / Non IBT LTC Replacement"; 
        public static readonly string  LATSabroeCompressorOverhaul = "LAT Sabroe Compressor Overhaul"; 
        public static readonly string  LATUnisabPanelUpgrade = "LAT Unisab Panel Upgrade"; 
        public static readonly string  LATYKMotorMonitoring = "LAT YK Motor Monitoring"; 
        public static readonly string  LATYSScrewCompresorReplacementExchange = "LAT YS Screw Compresor Replacement / Exchange"; 
        public static readonly string  LeadPass = "Lead Pass"; 
        public static readonly string  LeanEnergyAnalysis = "Lean Energy Analysis"; 
        public static readonly string  LEEDFullProject = "LEED - Full Project"; 
        public static readonly string  LEEDPartialProject = "LEED - Partial Project"; 
        public static readonly string  LocalTargeting = "Local Targeting"; 
        public static readonly string  MakeYourBuildingsWork = "Make Your Buildings Work"; 
        public static readonly string  MCEmail = "MC E-mail"; 
        public static readonly string  MCFax = "MC Fax"; 
        public static readonly string  MCPhoneCall = "MC Phone Call"; 
        public static readonly string  MCWebsite = "MC Website"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  MidAtlanticBuildersExchange = "Mid-Atlantic Builders Exchange"; 
        public static readonly string  MSC = "MSC"; 
        public static readonly string  MUMS = "MUMS"; 
        public static readonly string  NationalAccounts = "National Accounts"; 
        public static readonly string  NationalSales = "National Sales"; 
        public static readonly string  NetProspex = "NetProspex"; 
        public static readonly string  NorthAmericanTradeShows = "North American Trade Shows"; 
        public static readonly string  Operations = "Operations"; 
        public static readonly string  OracleEquipment = "Oracle Equipment"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  OtherSource = "Other Source"; 
        public static readonly string  OwnerAccountRelationship = "Owner Account Relationship"; 
        public static readonly string  P2000V5Upgrade = "P2000 V5 Upgrade"; 
        public static readonly string  Partner = "Partner"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  Pastquotelostopportunity = "Past quote /lost opportunity"; 
        public static readonly string  Philips = "Philips"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PipelineJumpstart = "Pipeline Jumpstart"; 
        public static readonly string  PipelineJumpstartusingLean = "Pipeline Jumpstart using Lean"; 
        public static readonly string  ProactiveSales = "Proactive Sales"; 
        public static readonly string  PublicInformationWebTradeShowMedia = "Public Information(Web,Trade Show,Media)"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  RFIRFP = "RFI/RFP"; 
        public static readonly string  Sales = "Sales"; 
        public static readonly string  SalesStaff = "Sales Staff"; 
        public static readonly string  SCCNewPSA = "SCC New PSA"; 
        public static readonly string  SCCPSARenewal = "SCC PSA Renewal"; 
        public static readonly string  SchneiderElectric = "Schneider Electric"; 
        public static readonly string  SchoolDude = "SchoolDude"; 
        public static readonly string  Seminar = "Seminar"; 
        public static readonly string  Service = "Service"; 
        public static readonly string  ServiceGeneratedLead = "Service Generated Lead"; 
        public static readonly string  ServiceMarketingLead = "Service Marketing Lead"; 
        public static readonly string  ServiceMarketingLead5 = "Service Marketing Lead (5)"; 
        public static readonly string  ServiceTelemarketingLead = "Service Telemarketing Lead"; 
        public static readonly string  ServiceTelemarketingLeadJ = "Service Telemarketing Lead (J)"; 
        public static readonly string  SilverBulletPerformanceInfrastructure = "Silver Bullet Performance Infrastructure"; 
        public static readonly string  SolutionsDigitalMarketing = "Solutions Digital Marketing"; 
        public static readonly string  SubContract = "Sub-Contract"; 
        public static readonly string  SystemsControlsHVACIR = "Systems (Controls, HVAC, IR)"; 
        public static readonly string  TechnicalAssistant = "Technical Assistant"; 
        public static readonly string  TMEMail = "TM E-Mail"; 
        public static readonly string  TMFax = "TM Fax"; 
        public static readonly string  TMPhoneCall = "TM Phone Call"; 
        public static readonly string  TMTakeOff = "TM Take-Off"; 
        public static readonly string  TopDownBottomUpTargetList = "Top Down Bottom Up Target List"; 
        public static readonly string  TradeShow = "Trade Show"; 
        public static readonly string  TradeshowLeadPerformanceInfrastructure = "Tradeshow Lead Performance Infrastructure"; 
        public static readonly string  UKAIPServiceoffering = "UK - AIP Service offering"; 
        public static readonly string  UKLeadGeneration = "UK Lead Generation"; 
        public static readonly string  Unsolicited = "Unsolicited"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  Vantage = "Vantage"; 
        public static readonly string  Web = "Web"; 
        public static readonly string  WebCampaign = "Web Campaign"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountAccountSource o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountAccountSource(string s)
        {
            return new PickAccountAccountSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountAccountSource Parse(string text) => text;

        

    }
    public class PickAccountDirectOrIndirectConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountDirectOrIndirect)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountDirectOrIndirect {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountDirectOrIndirectConverter))]
    public class PickAccountDirectOrIndirect
    {
        public static readonly string  Direct = "Direct"; 
        public static readonly string  Indirect = "Indirect"; 
        public static readonly string  Both = "Both"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountDirectOrIndirect o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountDirectOrIndirect(string s)
        {
            return new PickAccountDirectOrIndirect {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountDirectOrIndirect Parse(string text) => text;

        

    }
    public class PickAccountAccountTeamTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountAccountTeamType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountAccountTeamType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountAccountTeamTypeConverter))]
    public class PickAccountAccountTeamType
    {
        public static readonly string  Teamed = "Teamed"; 
        public static readonly string  SingleLed = "Single Led"; 
        public static readonly string  NA = "N/A"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountAccountTeamType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountAccountTeamType(string s)
        {
            return new PickAccountAccountTeamType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountAccountTeamType Parse(string text) => text;

        

    }
    public class PickAccountInactiveReasonDetailConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountInactiveReasonDetail)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountInactiveReasonDetail {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountInactiveReasonDetailConverter))]
    public class PickAccountInactiveReasonDetail
    {
        public static readonly string  Failuretomeetsalestargets = "Failure to meet sales targets"; 
        public static readonly string  Failuretoengageinsalesactivities = "Failure to engage in sales activities"; 
        public static readonly string  CreditPaymentissues = "Credit/Payment issues"; 
        public static readonly string  Violationofcontractterms = "Violation of contract terms"; 
        public static readonly string  Criminalorunethicalactivity = "Criminal or unethical activity"; 
        public static readonly string  Opportunitywithmorestrategiccompany = "Opportunity with more strategic company"; 
        public static readonly string  Companyaddscompetingline = "Company adds competing line"; 
        public static readonly string  Questionablesuccessionplan = "Questionable succession plan"; 
        public static readonly string  DuplicityofJCIproductsbrands = "Duplicity of JCI products/brands"; 
        public static readonly string  Linecardchangeimpactspartnersuccess = "Line card change impacts partner success"; 
        public static readonly string  Pleaseexplain = "Please explain"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountInactiveReasonDetail o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountInactiveReasonDetail(string s)
        {
            return new PickAccountInactiveReasonDetail {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountInactiveReasonDetail Parse(string text) => text;

        

    }
    public class PickAccountInactiveReasonConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountInactiveReason)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountInactiveReason {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountInactiveReasonConverter))]
    public class PickAccountInactiveReason
    {
        public static readonly string  Performance = "Performance"; 
        public static readonly string  Policy = "Policy"; 
        public static readonly string  Strategic = "Strategic"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountInactiveReason o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountInactiveReason(string s)
        {
            return new PickAccountInactiveReason {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountInactiveReason Parse(string text) => text;

        

    }
    public class PickAccountRelationshipStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountRelationshipStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountRelationshipStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountRelationshipStatusConverter))]
    public class PickAccountRelationshipStatus
    {
        public static readonly string  Excellent = "Excellent"; 
        public static readonly string  Good = "Good"; 
        public static readonly string  Fair = "Fair"; 
        public static readonly string  Poor = "Poor"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountRelationshipStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountRelationshipStatus(string s)
        {
            return new PickAccountRelationshipStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountRelationshipStatus Parse(string text) => text;

        

    }
    public class PickAccountAreaOfExpertiseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountAreaOfExpertise)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountAreaOfExpertise {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountAreaOfExpertiseConverter))]
    public class PickAccountAreaOfExpertise
    {
        public static readonly string  NewConstructionPlanandSpec = "New Construction - Plan and Spec"; 
        public static readonly string  DesignBuild = "Design Build"; 
        public static readonly string  ServiceReplacement = "Service Replacement"; 
        public static readonly string  Mechanical = "Mechanical"; 
        public static readonly string  SheetMetal = "Sheet Metal"; 
        public static readonly string  MultiDiscipline = "Multi Discipline"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountAreaOfExpertise o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountAreaOfExpertise(string s)
        {
            return new PickAccountAreaOfExpertise {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountAreaOfExpertise Parse(string text) => text;

        

    }
    public class PickAccountExclusiveOwnerRelationshipsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountExclusiveOwnerRelationships)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountExclusiveOwnerRelationships {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountExclusiveOwnerRelationshipsConverter))]
    public class PickAccountExclusiveOwnerRelationships
    {
        public static readonly string  NationalAccount = "National Account"; 
        public static readonly string  Localorstatewide = "Local or state wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountExclusiveOwnerRelationships o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountExclusiveOwnerRelationships(string s)
        {
            return new PickAccountExclusiveOwnerRelationships {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountExclusiveOwnerRelationships Parse(string text) => text;

        

    }
    public class PickAccountSizeOfTypicalProjectConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountSizeOfTypicalProject)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountSizeOfTypicalProject {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountSizeOfTypicalProjectConverter))]
    public class PickAccountSizeOfTypicalProject
    {
        public static readonly string  Small1Mil = "Small < $1 Mil"; 
        public static readonly string  Mid1Mil10Mil = "Mid $1 Mil - $10 Mil"; 
        public static readonly string  Large10Mil = "Large > $10 Mil"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountSizeOfTypicalProject o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountSizeOfTypicalProject(string s)
        {
            return new PickAccountSizeOfTypicalProject {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountSizeOfTypicalProject Parse(string text) => text;

        

    }
    public class PickAccountVerticalFocusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountVerticalFocus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountVerticalFocus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountVerticalFocusConverter))]
    public class PickAccountVerticalFocus
    {
        public static readonly string  Hospitals = "Hospitals"; 
        public static readonly string  HigherEducation = "Higher Education"; 
        public static readonly string  Airports = "Airports"; 
        public static readonly string  K12Schools = "K-12 Schools"; 
        public static readonly string  CommercialOfficeSpace = "Commercial Office Space"; 
        public static readonly string  Residential = "Residential"; 
        public static readonly string  Apartments = "Apartments"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  MedicalClinics = "Medical Clinics"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountVerticalFocus o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountVerticalFocus(string s)
        {
            return new PickAccountVerticalFocus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountVerticalFocus Parse(string text) => text;

        

    }
    public class PickAccountHierarchyTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountHierarchyType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountHierarchyType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountHierarchyTypeConverter))]
    public class PickAccountHierarchyType
    {
        public static readonly string  Child = "Child"; 
        public static readonly string  Market = "Market"; 
        public static readonly string  OwnerGroup = "Owner Group"; 
        public static readonly string  MasterParent = "Master Parent"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountHierarchyType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountHierarchyType(string s)
        {
            return new PickAccountHierarchyType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountHierarchyType Parse(string text) => text;

        

    }
    public class PickAccountCountyEuConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCountyEu)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCountyEu {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCountyEuConverter))]
    public class PickAccountCountyEu
    {
        public static readonly string  Spain = "-- Spain --"; 
        public static readonly string  ACoruña = "A Coruña"; 
        public static readonly string  Álava = "Álava"; 
        public static readonly string  Albacete = "Albacete"; 
        public static readonly string  Alicante = "Alicante"; 
        public static readonly string  Almería = "Almería"; 
        public static readonly string  Asturias = "Asturias"; 
        public static readonly string  Ávila = "Ávila"; 
        public static readonly string  Badajoz = "Badajoz"; 
        public static readonly string  Barcelona = "Barcelona"; 
        public static readonly string  Burgos = "Burgos"; 
        public static readonly string  Cáceres = "Cáceres"; 
        public static readonly string  Cádiz = "Cádiz"; 
        public static readonly string  Cantabria = "Cantabria"; 
        public static readonly string  CastellóndelaPlana = "Castellón de la Plana"; 
        public static readonly string  Ceuta = "Ceuta"; 
        public static readonly string  CiudadReal = "Ciudad Real"; 
        public static readonly string  Córdoba = "Córdoba"; 
        public static readonly string  Cuenca = "Cuenca"; 
        public static readonly string  Girona = "Girona"; 
        public static readonly string  Granada = "Granada"; 
        public static readonly string  Guadalajara = "Guadalajara"; 
        public static readonly string  Guipuzkoa = "Guipuzkoa"; 
        public static readonly string  Huelva = "Huelva"; 
        public static readonly string  Huesca = "Huesca"; 
        public static readonly string  IslasBaleares = "Islas Baleares"; 
        public static readonly string  Jaén = "Jaén"; 
        public static readonly string  LaRioja = "La Rioja"; 
        public static readonly string  LasPalmas = "Las Palmas"; 
        public static readonly string  León = "León"; 
        public static readonly string  Lleida = "Lleida"; 
        public static readonly string  Lugo = "Lugo"; 
        public static readonly string  Madrid = "Madrid"; 
        public static readonly string  Málaga = "Málaga"; 
        public static readonly string  Melilla = "Melilla"; 
        public static readonly string  Murcia = "Murcia"; 
        public static readonly string  Navarra = "Navarra"; 
        public static readonly string  Ourense = "Ourense"; 
        public static readonly string  Palencia = "Palencia"; 
        public static readonly string  Pontevedra = "Pontevedra"; 
        public static readonly string  Salamanca = "Salamanca"; 
        public static readonly string  Segovia = "Segovia"; 
        public static readonly string  Sevilla = "Sevilla"; 
        public static readonly string  Soria = "Soria"; 
        public static readonly string  StaCruzdeTenerife = "Sta. Cruz de Tenerife"; 
        public static readonly string  Tarragona = "Tarragona"; 
        public static readonly string  Teruel = "Teruel"; 
        public static readonly string  Toledo = "Toledo"; 
        public static readonly string  Valencia = "Valencia"; 
        public static readonly string  Valladolid = "Valladolid"; 
        public static readonly string  Vizcaya = "Vizcaya"; 
        public static readonly string  Zamora = "Zamora"; 
        public static readonly string  Zaragoza = "Zaragoza"; 
        public static readonly string  Portugal = "-- Portugal --"; 
        public static readonly string  Abrantes = "Abrantes"; 
        public static readonly string  Águeda = "Águeda"; 
        public static readonly string  AguiardaBeira = "Aguiar da Beira"; 
        public static readonly string  Alandroal = "Alandroal"; 
        public static readonly string  AlbergariaaVelha = "Albergaria-a-Velha"; 
        public static readonly string  Albufeira = "Albufeira"; 
        public static readonly string  AlcácerdoSal = "Alcácer do Sal"; 
        public static readonly string  Alcanena = "Alcanena"; 
        public static readonly string  Alcobaça = "Alcobaça"; 
        public static readonly string  Alcochete = "Alcochete"; 
        public static readonly string  Alcoutim = "Alcoutim"; 
        public static readonly string  Alenquer = "Alenquer"; 
        public static readonly string  AlfândegadaFé = "Alfândega da Fé"; 
        public static readonly string  Alijó = "Alijó"; 
        public static readonly string  Aljezur = "Aljezur"; 
        public static readonly string  Aljustrel = "Aljustrel"; 
        public static readonly string  Almada = "Almada"; 
        public static readonly string  Almeida = "Almeida"; 
        public static readonly string  Almeirim = "Almeirim"; 
        public static readonly string  Almodôvar = "Almodôvar"; 
        public static readonly string  Alpiarça = "Alpiarça"; 
        public static readonly string  AlterdoChão = "Alter do Chão"; 
        public static readonly string  Alvaiázere = "Alvaiázere"; 
        public static readonly string  Alvito = "Alvito"; 
        public static readonly string  Amadora = "Amadora"; 
        public static readonly string  Amarante = "Amarante"; 
        public static readonly string  Amares = "Amares"; 
        public static readonly string  Anadia = "Anadia"; 
        public static readonly string  Ansião = "Ansião"; 
        public static readonly string  ArcosdeValdevez = "Arcos de Valdevez"; 
        public static readonly string  Arganil = "Arganil"; 
        public static readonly string  Armamar = "Armamar"; 
        public static readonly string  Arouca = "Arouca"; 
        public static readonly string  Arraiolos = "Arraiolos"; 
        public static readonly string  Arronches = "Arronches"; 
        public static readonly string  ArrudadosVinhos = "Arruda dos Vinhos"; 
        public static readonly string  Aveiro = "Aveiro"; 
        public static readonly string  Avis = "Avis"; 
        public static readonly string  Azambuja = "Azambuja"; 
        public static readonly string  Azores = "Azores"; 
        public static readonly string  Baião = "Baião"; 
        public static readonly string  Barcelos = "Barcelos"; 
        public static readonly string  Barrancos = "Barrancos"; 
        public static readonly string  Barreiro = "Barreiro"; 
        public static readonly string  Batalha = "Batalha"; 
        public static readonly string  Beja = "Beja"; 
        public static readonly string  Belmonte = "Belmonte"; 
        public static readonly string  Benavente = "Benavente"; 
        public static readonly string  Bombarral = "Bombarral"; 
        public static readonly string  Borba = "Borba"; 
        public static readonly string  Boticas = "Boticas"; 
        public static readonly string  Braga = "Braga"; 
        public static readonly string  Bragança = "Bragança"; 
        public static readonly string  CabeceirasdeBasto = "Cabeceiras de Basto"; 
        public static readonly string  Cadaval = "Cadaval"; 
        public static readonly string  CaldasdaRainha = "Caldas da Rainha"; 
        public static readonly string  Caminha = "Caminha"; 
        public static readonly string  CampoMaior = "Campo Maior"; 
        public static readonly string  Cantanhede = "Cantanhede"; 
        public static readonly string  CarrazedadeAnsiães = "Carrazeda de Ansiães"; 
        public static readonly string  CarregaldoSal = "Carregal do Sal"; 
        public static readonly string  Cartaxo = "Cartaxo"; 
        public static readonly string  Cascais = "Cascais"; 
        public static readonly string  CastanheiradePera = "Castanheira de Pera"; 
        public static readonly string  CasteloBranco = "Castelo Branco"; 
        public static readonly string  CastelodePaiva = "Castelo de Paiva"; 
        public static readonly string  CastelodeVide = "Castelo de Vide"; 
        public static readonly string  CastroDaire = "Castro Daire"; 
        public static readonly string  CastroMarim = "Castro Marim"; 
        public static readonly string  CastroVerde = "Castro Verde"; 
        public static readonly string  CeloricodaBeira = "Celorico da Beira"; 
        public static readonly string  CeloricodeBasto = "Celorico de Basto"; 
        public static readonly string  Chamusca = "Chamusca"; 
        public static readonly string  Chaves = "Chaves"; 
        public static readonly string  Cinfães = "Cinfães"; 
        public static readonly string  Coimbra = "Coimbra"; 
        public static readonly string  CondeixaaNova = "Condeixa-a-Nova"; 
        public static readonly string  Constância = "Constância"; 
        public static readonly string  Coruche = "Coruche"; 
        public static readonly string  Covilhã = "Covilhã"; 
        public static readonly string  Crato = "Crato"; 
        public static readonly string  Cuba = "Cuba"; 
        public static readonly string  Elvas = "Elvas"; 
        public static readonly string  Entroncamento = "Entroncamento"; 
        public static readonly string  Espinho = "Espinho"; 
        public static readonly string  Esposende = "Esposende"; 
        public static readonly string  Estarreja = "Estarreja"; 
        public static readonly string  Estremoz = "Estremoz"; 
        public static readonly string  Évora = "Évora"; 
        public static readonly string  Fafe = "Fafe"; 
        public static readonly string  Faro = "Faro"; 
        public static readonly string  Felgueiras = "Felgueiras"; 
        public static readonly string  FerreiradoAlentejo = "Ferreira do Alentejo"; 
        public static readonly string  FerreiradoZêzere = "Ferreira do Zêzere"; 
        public static readonly string  FigueiradaFoz = "Figueira da Foz"; 
        public static readonly string  FigueiradeCasteloRodrigo = "Figueira de Castelo Rodrigo"; 
        public static readonly string  FigueiródosVinhos = "Figueiró dos Vinhos"; 
        public static readonly string  FornosdeAlgodres = "Fornos de Algodres"; 
        public static readonly string  FreixodeEspadaàCinta = "Freixo de Espada à Cinta"; 
        public static readonly string  Fronteira = "Fronteira"; 
        public static readonly string  Fundão = "Fundão"; 
        public static readonly string  Gavião = "Gavião"; 
        public static readonly string  Góis = "Góis"; 
        public static readonly string  Golegã = "Golegã"; 
        public static readonly string  Gondomar = "Gondomar"; 
        public static readonly string  Gouveia = "Gouveia"; 
        public static readonly string  Grândola = "Grândola"; 
        public static readonly string  Guarda = "Guarda"; 
        public static readonly string  Guimarães = "Guimarães"; 
        public static readonly string  IdanhaaNova = "Idanha-a-Nova"; 
        public static readonly string  Ílhavo = "Ílhavo"; 
        public static readonly string  Lagoa = "Lagoa"; 
        public static readonly string  Lagos = "Lagos"; 
        public static readonly string  Lamego = "Lamego"; 
        public static readonly string  Leiria = "Leiria"; 
        public static readonly string  Lisboa = "Lisboa"; 
        public static readonly string  Loulé = "Loulé"; 
        public static readonly string  Loures = "Loures"; 
        public static readonly string  Lourinhã = "Lourinhã"; 
        public static readonly string  Lousã = "Lousã"; 
        public static readonly string  Lousada = "Lousada"; 
        public static readonly string  Mação = "Mação"; 
        public static readonly string  MacedodeCavaleiros = "Macedo de Cavaleiros"; 
        public static readonly string  Madeira = "Madeira"; 
        public static readonly string  Mafra = "Mafra"; 
        public static readonly string  Maia = "Maia"; 
        public static readonly string  Mangualde = "Mangualde"; 
        public static readonly string  Manteigas = "Manteigas"; 
        public static readonly string  MarcodeCanaveses = "Marco de Canaveses"; 
        public static readonly string  MarinhaGrande = "Marinha Grande"; 
        public static readonly string  Marvão = "Marvão"; 
        public static readonly string  Matosinhos = "Matosinhos"; 
        public static readonly string  Mealhada = "Mealhada"; 
        public static readonly string  Mêda = "Mêda"; 
        public static readonly string  Melgaço = "Melgaço"; 
        public static readonly string  Mértola = "Mértola"; 
        public static readonly string  MesãoFrio = "Mesão Frio"; 
        public static readonly string  Mira = "Mira"; 
        public static readonly string  MirandadoCorvo = "Miranda do Corvo"; 
        public static readonly string  MirandadoDouro = "Miranda do Douro"; 
        public static readonly string  Mirandela = "Mirandela"; 
        public static readonly string  Mogadouro = "Mogadouro"; 
        public static readonly string  MoimentadaBeira = "Moimenta da Beira"; 
        public static readonly string  Moita = "Moita"; 
        public static readonly string  Monção = "Monção"; 
        public static readonly string  Monchique = "Monchique"; 
        public static readonly string  MondimdeBasto = "Mondim de Basto"; 
        public static readonly string  Monforte = "Monforte"; 
        public static readonly string  Montalegre = "Montalegre"; 
        public static readonly string  MontemoroNovo = "Montemor-o-Novo"; 
        public static readonly string  MontemoroVelho = "Montemor-o-Velho"; 
        public static readonly string  Montijo = "Montijo"; 
        public static readonly string  Mora = "Mora"; 
        public static readonly string  Mortágua = "Mortágua"; 
        public static readonly string  Moura = "Moura"; 
        public static readonly string  Mourão = "Mourão"; 
        public static readonly string  Murça = "Murça"; 
        public static readonly string  Murtosa = "Murtosa"; 
        public static readonly string  Nazaré = "Nazaré"; 
        public static readonly string  Nelas = "Nelas"; 
        public static readonly string  Nisa = "Nisa"; 
        public static readonly string  Óbidos = "Óbidos"; 
        public static readonly string  Odemira = "Odemira"; 
        public static readonly string  Odivelas = "Odivelas"; 
        public static readonly string  Oeiras = "Oeiras"; 
        public static readonly string  Oleiros = "Oleiros"; 
        public static readonly string  Olhão = "Olhão"; 
        public static readonly string  OliveiradeAzeméis = "Oliveira de Azeméis"; 
        public static readonly string  OliveiradeFrades = "Oliveira de Frades"; 
        public static readonly string  OliveiradoBairro = "Oliveira do Bairro"; 
        public static readonly string  OliveiradoHospital = "Oliveira do Hospital"; 
        public static readonly string  Ourém = "Ourém"; 
        public static readonly string  Ourique = "Ourique"; 
        public static readonly string  Ovar = "Ovar"; 
        public static readonly string  PaçosdeFerreira = "Paços de Ferreira"; 
        public static readonly string  Palmela = "Palmela"; 
        public static readonly string  PampilhosadaSerra = "Pampilhosa da Serra"; 
        public static readonly string  Paredes = "Paredes"; 
        public static readonly string  ParedesdeCoura = "Paredes de Coura"; 
        public static readonly string  PedrógãoGrande = "Pedrógão Grande"; 
        public static readonly string  Penacova = "Penacova"; 
        public static readonly string  Penafiel = "Penafiel"; 
        public static readonly string  PenalvadoCastelo = "Penalva do Castelo"; 
        public static readonly string  Penamacor = "Penamacor"; 
        public static readonly string  Penedono = "Penedono"; 
        public static readonly string  Penela = "Penela"; 
        public static readonly string  Peniche = "Peniche"; 
        public static readonly string  PesodaRégua = "Peso da Régua"; 
        public static readonly string  Pinhel = "Pinhel"; 
        public static readonly string  Pombal = "Pombal"; 
        public static readonly string  PontedaBarca = "Ponte da Barca"; 
        public static readonly string  PontedeLima = "Ponte de Lima"; 
        public static readonly string  PontedeSor = "Ponte de Sor"; 
        public static readonly string  Portalegre = "Portalegre"; 
        public static readonly string  Portel = "Portel"; 
        public static readonly string  Portimão = "Portimão"; 
        public static readonly string  Porto = "Porto"; 
        public static readonly string  PortodeMós = "Porto de Mós"; 
        public static readonly string  PóvoadeLanhoso = "Póvoa de Lanhoso"; 
        public static readonly string  PóvoadeVarzim = "Póvoa de Varzim"; 
        public static readonly string  ProençaaNova = "Proença-a-Nova"; 
        public static readonly string  Redondo = "Redondo"; 
        public static readonly string  ReguengosdeMonsaraz = "Reguengos de Monsaraz"; 
        public static readonly string  Resende = "Resende"; 
        public static readonly string  RibeiradePena = "Ribeira de Pena"; 
        public static readonly string  RioMaior = "Rio Maior"; 
        public static readonly string  Sabrosa = "Sabrosa"; 
        public static readonly string  Sabugal = "Sabugal"; 
        public static readonly string  SalvaterradeMagos = "Salvaterra de Magos"; 
        public static readonly string  SantaCombaDão = "Santa Comba Dão"; 
        public static readonly string  SantaMariadaFeira = "Santa Maria da Feira"; 
        public static readonly string  SantaMartadePenaguião = "Santa Marta de Penaguião"; 
        public static readonly string  Santarém = "Santarém"; 
        public static readonly string  SantiagodoCacém = "Santiago do Cacém"; 
        public static readonly string  SantoTirso = "Santo Tirso"; 
        public static readonly string  SãoBrásdeAlportel = "São Brás de Alportel"; 
        public static readonly string  SãoJoãodaMadeira = "São João da Madeira"; 
        public static readonly string  SãoJoãodaPesqueira = "São João da Pesqueira"; 
        public static readonly string  SãoPedrodoSul = "São Pedro do Sul"; 
        public static readonly string  Sardoal = "Sardoal"; 
        public static readonly string  Sátão = "Sátão"; 
        public static readonly string  Seia = "Seia"; 
        public static readonly string  Seixal = "Seixal"; 
        public static readonly string  Sernancelhe = "Sernancelhe"; 
        public static readonly string  Serpa = "Serpa"; 
        public static readonly string  Sertã = "Sertã"; 
        public static readonly string  Sesimbra = "Sesimbra"; 
        public static readonly string  Setúbal = "Setúbal"; 
        public static readonly string  SeverdoVouga = "Sever do Vouga"; 
        public static readonly string  Silves = "Silves"; 
        public static readonly string  Sines = "Sines"; 
        public static readonly string  Sintra = "Sintra"; 
        public static readonly string  SobraldeMonteAgraço = "Sobral de Monte Agraço"; 
        public static readonly string  Soure = "Soure"; 
        public static readonly string  Sousel = "Sousel"; 
        public static readonly string  Tábua = "Tábua"; 
        public static readonly string  Tabuaço = "Tabuaço"; 
        public static readonly string  Tarouca = "Tarouca"; 
        public static readonly string  Tavira = "Tavira"; 
        public static readonly string  TerrasdeBouro = "Terras de Bouro"; 
        public static readonly string  Tomar = "Tomar"; 
        public static readonly string  Tondela = "Tondela"; 
        public static readonly string  TorredeMoncorvo = "Torre de Moncorvo"; 
        public static readonly string  TorresNovas = "Torres Novas"; 
        public static readonly string  TorresVedras = "Torres Vedras"; 
        public static readonly string  Trancoso = "Trancoso"; 
        public static readonly string  Trofa = "Trofa"; 
        public static readonly string  Vagos = "Vagos"; 
        public static readonly string  ValedeCambra = "Vale de Cambra"; 
        public static readonly string  Valença = "Valença"; 
        public static readonly string  Valongo = "Valongo"; 
        public static readonly string  Valpaços = "Valpaços"; 
        public static readonly string  VendasNovas = "Vendas Novas"; 
        public static readonly string  VianadoAlentejo = "Viana do Alentejo"; 
        public static readonly string  VianadoCastelo = "Viana do Castelo"; 
        public static readonly string  Vidigueira = "Vidigueira"; 
        public static readonly string  VieiradoMinho = "Vieira do Minho"; 
        public static readonly string  ViladeRei = "Vila de Rei"; 
        public static readonly string  ViladoBispo = "Vila do Bispo"; 
        public static readonly string  ViladoConde = "Vila do Conde"; 
        public static readonly string  VilaFlor = "Vila Flor"; 
        public static readonly string  VilaFrancadeXira = "Vila Franca de Xira"; 
        public static readonly string  VilaNovadaBarquinha = "Vila Nova da Barquinha"; 
        public static readonly string  VilaNovadeCerveira = "Vila Nova de Cerveira"; 
        public static readonly string  VilaNovadeFamalicão = "Vila Nova de Famalicão"; 
        public static readonly string  VilaNovadeFozCôa = "Vila Nova de Foz Côa"; 
        public static readonly string  VilaNovadeGaia = "Vila Nova de Gaia"; 
        public static readonly string  VilaNovadePaiva = "Vila Nova de Paiva"; 
        public static readonly string  VilaNovadePoiares = "Vila Nova de Poiares"; 
        public static readonly string  VilaPoucadeAguiar = "Vila Pouca de Aguiar"; 
        public static readonly string  VilaReal = "Vila Real"; 
        public static readonly string  VilaRealdeSantoAnt = "Vila Real de Santo Ant"; 
        public static readonly string  VilaVelhadeRódão = "Vila Velha de Ródão"; 
        public static readonly string  VilaVerde = "Vila Verde"; 
        public static readonly string  VilaViçosa = "Vila Viçosa"; 
        public static readonly string  Vimioso = "Vimioso"; 
        public static readonly string  Vinhais = "Vinhais"; 
        public static readonly string  Viseu = "Viseu"; 
        public static readonly string  Vizela = "Vizela"; 
        public static readonly string  Vouzela = "Vouzela"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCountyEu o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCountyEu(string s)
        {
            return new PickAccountCountyEu {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCountyEu Parse(string text) => text;

        

    }
    public class PickAccountSMEUCommercialCountryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountSMEUCommercialCountry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountSMEUCommercialCountry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountSMEUCommercialCountryConverter))]
    public class PickAccountSMEUCommercialCountry
    {
        public static readonly string  Afghanistan = "Afghanistan"; 
        public static readonly string  Albania = "Albania"; 
        public static readonly string  Algeria = "Algeria"; 
        public static readonly string  AmericanSamoa = "American Samoa"; 
        public static readonly string  Andorra = "Andorra"; 
        public static readonly string  Anguilla = "Anguilla"; 
        public static readonly string  Antarctica = "Antarctica"; 
        public static readonly string  AntiguaAndBarbuda = "Antigua And Barbuda"; 
        public static readonly string  Argentina = "Argentina"; 
        public static readonly string  Armenia = "Armenia"; 
        public static readonly string  Aruba = "Aruba"; 
        public static readonly string  Australia = "Australia"; 
        public static readonly string  Austria = "Austria"; 
        public static readonly string  Ayerbaijan = "Ayerbaijan"; 
        public static readonly string  BahamasThe = "Bahamas, The"; 
        public static readonly string  Bahrain = "Bahrain"; 
        public static readonly string  Bangladesh = "Bangladesh"; 
        public static readonly string  Barbados = "Barbados"; 
        public static readonly string  Belarus = "Belarus"; 
        public static readonly string  Belgium = "Belgium"; 
        public static readonly string  Belize = "Belize"; 
        public static readonly string  Benin = "Benin"; 
        public static readonly string  Bermuda = "Bermuda"; 
        public static readonly string  Bhutan = "Bhutan"; 
        public static readonly string  Bolivia = "Bolivia"; 
        public static readonly string  BosniaandHerzegovina = "Bosnia and Herzegovina"; 
        public static readonly string  Botswana = "Botswana"; 
        public static readonly string  BouvetIs = "Bouvet Is"; 
        public static readonly string  Brazil = "Brazil"; 
        public static readonly string  BritishIndianOceanTerritory = "British Indian Ocean Territory"; 
        public static readonly string  Brunei = "Brunei"; 
        public static readonly string  Bulgaria = "Bulgaria"; 
        public static readonly string  BurkinaFaso = "Burkina Faso"; 
        public static readonly string  Burundi = "Burundi"; 
        public static readonly string  Cambodia = "Cambodia"; 
        public static readonly string  Cameroon = "Cameroon"; 
        public static readonly string  Canada = "Canada"; 
        public static readonly string  CapeVerde = "Cape Verde"; 
        public static readonly string  CaymanIs = "Cayman Is"; 
        public static readonly string  CentralAfricanRepublic = "Central African Republic"; 
        public static readonly string  Chad = "Chad"; 
        public static readonly string  Chile = "Chile"; 
        public static readonly string  China = "China"; 
        public static readonly string  ChinaHongKongSAR = "China (Hong Kong S.A.R.)"; 
        public static readonly string  ChinaMacauSAR = "China (Macau S.A.R.)"; 
        public static readonly string  ChristmasIs = "Christmas Is"; 
        public static readonly string  CocosKeelingIs = "Cocos (Keeling) Is"; 
        public static readonly string  Colombia = "Colombia"; 
        public static readonly string  Comoros = "Comoros"; 
        public static readonly string  CookIslands = "Cook Islands"; 
        public static readonly string  CostaRica = "Costa Rica"; 
        public static readonly string  CoteDIvoireIvoryCoast = "Cote D'Ivoire (Ivory Coast)"; 
        public static readonly string  CroatiaHrvatska = "Croatia (Hrvatska)"; 
        public static readonly string  Cyprus = "Cyprus"; 
        public static readonly string  CzechRepublic = "Czech Republic"; 
        public static readonly string  DemocraticRepublicoftheCongo = "Democratic Republic of the Congo"; 
        public static readonly string  Denmark = "Denmark"; 
        public static readonly string  Djibouti = "Djibouti"; 
        public static readonly string  Dominica = "Dominica"; 
        public static readonly string  DominicanRepublic = "Dominican Republic"; 
        public static readonly string  EastTimor = "East Timor"; 
        public static readonly string  Ecuador = "Ecuador"; 
        public static readonly string  Egypt = "Egypt"; 
        public static readonly string  ElSalvador = "El Salvador"; 
        public static readonly string  EquatorialGuinea = "Equatorial Guinea"; 
        public static readonly string  Eritrea = "Eritrea"; 
        public static readonly string  Estonia = "Estonia"; 
        public static readonly string  Ethiopia = "Ethiopia"; 
        public static readonly string  FYROMacedonia = "F.Y.R.O. Macedonia"; 
        public static readonly string  FalklandIsIsMalvinas = "Falkland Is (Is Malvinas)"; 
        public static readonly string  FaroeIslands = "Faroe Islands"; 
        public static readonly string  FijiIslands = "Fiji Islands"; 
        public static readonly string  Finland = "Finland"; 
        public static readonly string  France = "France"; 
        public static readonly string  FrenchGuiana = "French Guiana"; 
        public static readonly string  FrenchPolynesia = "French Polynesia"; 
        public static readonly string  FrenchSouthernTerritories = "French Southern Territories"; 
        public static readonly string  Gabon = "Gabon"; 
        public static readonly string  GambiaThe = "Gambia, The"; 
        public static readonly string  Georgia = "Georgia"; 
        public static readonly string  Germany = "Germany"; 
        public static readonly string  Ghana = "Ghana"; 
        public static readonly string  Gibraltar = "Gibraltar"; 
        public static readonly string  Greece = "Greece"; 
        public static readonly string  Greenland = "Greenland"; 
        public static readonly string  Grenada = "Grenada"; 
        public static readonly string  Guadeloupe = "Guadeloupe"; 
        public static readonly string  Guam = "Guam"; 
        public static readonly string  Guatemala = "Guatemala"; 
        public static readonly string  Guinea = "Guinea"; 
        public static readonly string  GuineaBissau = "Guinea-Bissau"; 
        public static readonly string  Guyana = "Guyana"; 
        public static readonly string  Haiti = "Haiti"; 
        public static readonly string  HeardandMcDonaldIs = "Heard and McDonald Is"; 
        public static readonly string  Honduras = "Honduras"; 
        public static readonly string  Hungary = "Hungary"; 
        public static readonly string  Iceland = "Iceland"; 
        public static readonly string  India = "India"; 
        public static readonly string  Indonesia = "Indonesia"; 
        public static readonly string  Ireland = "Ireland"; 
        public static readonly string  Israel = "Israel"; 
        public static readonly string  Italy = "Italy"; 
        public static readonly string  Jamaica = "Jamaica"; 
        public static readonly string  Japan = "Japan"; 
        public static readonly string  Jordan = "Jordan"; 
        public static readonly string  Kayakhstan = "Kayakhstan"; 
        public static readonly string  Kenya = "Kenya"; 
        public static readonly string  Kiribati = "Kiribati"; 
        public static readonly string  KoreaSouth = "Korea, South"; 
        public static readonly string  Kuwait = "Kuwait"; 
        public static readonly string  Kyrgyzstan = "Kyrgyzstan"; 
        public static readonly string  Laos = "Laos"; 
        public static readonly string  Latvia = "Latvia"; 
        public static readonly string  Lebanon = "Lebanon"; 
        public static readonly string  Lesotho = "Lesotho"; 
        public static readonly string  Liberia = "Liberia"; 
        public static readonly string  Liechtenstein = "Liechtenstein"; 
        public static readonly string  Lithuania = "Lithuania"; 
        public static readonly string  Luxembourg = "Luxembourg"; 
        public static readonly string  Madagascar = "Madagascar"; 
        public static readonly string  Malawi = "Malawi"; 
        public static readonly string  Malaysia = "Malaysia"; 
        public static readonly string  Maldives = "Maldives"; 
        public static readonly string  Mali = "Mali"; 
        public static readonly string  Malta = "Malta"; 
        public static readonly string  MarshallIs = "Marshall Is"; 
        public static readonly string  Martinique = "Martinique"; 
        public static readonly string  Mauritania = "Mauritania"; 
        public static readonly string  Mauritius = "Mauritius"; 
        public static readonly string  Mayotte = "Mayotte"; 
        public static readonly string  Mexico = "Mexico"; 
        public static readonly string  Micronesia = "Micronesia"; 
        public static readonly string  Moldova = "Moldova"; 
        public static readonly string  Monaco = "Monaco"; 
        public static readonly string  Mongolia = "Mongolia"; 
        public static readonly string  Montenegro = "Montenegro"; 
        public static readonly string  Montserrat = "Montserrat"; 
        public static readonly string  Morocco = "Morocco"; 
        public static readonly string  Mozambique = "Mozambique"; 
        public static readonly string  Myanmar = "Myanmar"; 
        public static readonly string  Namibia = "Namibia"; 
        public static readonly string  Nauru = "Nauru"; 
        public static readonly string  Nepal = "Nepal"; 
        public static readonly string  NetherlandsThe = "Netherlands, The"; 
        public static readonly string  NetherlandsAntilles = "Netherlands Antilles"; 
        public static readonly string  NewCaledonia = "New Caledonia"; 
        public static readonly string  NewZealand = "New Zealand"; 
        public static readonly string  Nicaragua = "Nicaragua"; 
        public static readonly string  Niger = "Niger"; 
        public static readonly string  Nigeria = "Nigeria"; 
        public static readonly string  Niue = "Niue"; 
        public static readonly string  NorfolkIsland = "Norfolk Island"; 
        public static readonly string  NorthernMarianaIs = "Northern Mariana Is"; 
        public static readonly string  Norway = "Norway"; 
        public static readonly string  Oman = "Oman"; 
        public static readonly string  Pakistan = "Pakistan"; 
        public static readonly string  Palau = "Palau"; 
        public static readonly string  Panama = "Panama"; 
        public static readonly string  PapuanewGuinea = "Papua new Guinea"; 
        public static readonly string  Paraguay = "Paraguay"; 
        public static readonly string  Peru = "Peru"; 
        public static readonly string  Philippines = "Philippines"; 
        public static readonly string  PitcairnIsland = "Pitcairn Island"; 
        public static readonly string  Poland = "Poland"; 
        public static readonly string  Portugal = "Portugal"; 
        public static readonly string  PuertoRico = "Puerto Rico"; 
        public static readonly string  Qatar = "Qatar"; 
        public static readonly string  RepublicoftheCongo = "Republic of the Congo"; 
        public static readonly string  Reunion = "Reunion"; 
        public static readonly string  Romania = "Romania"; 
        public static readonly string  Russia = "Russia"; 
        public static readonly string  SaintHelena = "Saint Helena"; 
        public static readonly string  SaintKittsAndNevis = "Saint Kitts And Nevis"; 
        public static readonly string  SaintLucia = "Saint Lucia"; 
        public static readonly string  SaintPierreandMiquelon = "Saint Pierre and Miquelon"; 
        public static readonly string  SaintVincentAndTheGrenadines = "Saint Vincent And The Grenadines"; 
        public static readonly string  Samoa = "Samoa"; 
        public static readonly string  SanMarino = "San Marino"; 
        public static readonly string  SaoTomeandPrincipe = "Sao Tome and Principe"; 
        public static readonly string  SaudiArabia = "Saudi Arabia"; 
        public static readonly string  Senegal = "Senegal"; 
        public static readonly string  Seychelles = "Seychelles"; 
        public static readonly string  SierraLeone = "Sierra Leone"; 
        public static readonly string  Singapore = "Singapore"; 
        public static readonly string  Slovakia = "Slovakia"; 
        public static readonly string  Slovenia = "Slovenia"; 
        public static readonly string  SolomonIslands = "Solomon Islands"; 
        public static readonly string  Somalia = "Somalia"; 
        public static readonly string  SouthAfrica = "South Africa"; 
        public static readonly string  SouthGeorgiaampTheSSandwichIs = "South Georgia &amp; The S. Sandwich Is"; 
        public static readonly string  Spain = "Spain"; 
        public static readonly string  SriLanka = "Sri Lanka"; 
        public static readonly string  Suriname = "Suriname"; 
        public static readonly string  SvalbardAndJanMayenIs = "Svalbard And Jan Mayen Is"; 
        public static readonly string  Swaziland = "Swaziland"; 
        public static readonly string  Sweden = "Sweden"; 
        public static readonly string  Switzerland = "Switzerland"; 
        public static readonly string  Syria = "Syria"; 
        public static readonly string  Taiwan = "Taiwan"; 
        public static readonly string  Tajikistan = "Tajikistan"; 
        public static readonly string  Tanzania = "Tanzania"; 
        public static readonly string  Thailand = "Thailand"; 
        public static readonly string  TimorLeste = "Timor-Leste"; 
        public static readonly string  Togo = "Togo"; 
        public static readonly string  Tokelau = "Tokelau"; 
        public static readonly string  Tonga = "Tonga"; 
        public static readonly string  TrinidadAndTobago = "Trinidad And Tobago"; 
        public static readonly string  Tunisia = "Tunisia"; 
        public static readonly string  Turkey = "Turkey"; 
        public static readonly string  Turkmenistan = "Turkmenistan"; 
        public static readonly string  TurksAndCaicosIs = "Turks And Caicos Is"; 
        public static readonly string  Tuvalu = "Tuvalu"; 
        public static readonly string  Uganda = "Uganda"; 
        public static readonly string  Ukraine = "Ukraine"; 
        public static readonly string  UnitedArabEmirates = "United Arab Emirates"; 
        public static readonly string  UnitedKingdom = "United Kingdom"; 
        public static readonly string  UnitedStates = "United States"; 
        public static readonly string  UnitedStatesMinorOutlyingIs = "United States Minor Outlying Is"; 
        public static readonly string  Uruguay = "Uruguay"; 
        public static readonly string  Uzbekistan = "Uzbekistan"; 
        public static readonly string  Vanuatu = "Vanuatu"; 
        public static readonly string  VaticanCityStateHolySee = "Vatican City State (Holy See)"; 
        public static readonly string  Venezuela = "Venezuela"; 
        public static readonly string  Vietnam = "Vietnam"; 
        public static readonly string  VirginIslandsBritish = "Virgin Islands (British)"; 
        public static readonly string  VirginIslandsUS = "Virgin Islands (US)"; 
        public static readonly string  WallisAndFutunaIslands = "Wallis And Futuna Islands"; 
        public static readonly string  WesternSahara = "Western Sahara"; 
        public static readonly string  Yemen = "Yemen"; 
        public static readonly string  Zambia = "Zambia"; 
        public static readonly string  Zimbabwe = "Zimbabwe"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountSMEUCommercialCountry o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountSMEUCommercialCountry(string s)
        {
            return new PickAccountSMEUCommercialCountry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountSMEUCommercialCountry Parse(string text) => text;

        

    }
    public class PickAccountTeamBrandTagTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamBrandTagType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamBrandTagType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamBrandTagTypeConverter))]
    public class PickAccountTeamBrandTagType
    {
        public static readonly string  Public = "Public"; 
        public static readonly string  Personal = "Personal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamBrandTagType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamBrandTagType(string s)
        {
            return new PickAccountTeamBrandTagType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamBrandTagType Parse(string text) => text;

        

    }
    public class PickAccountTeamCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamCurrencyIsoCodeConverter))]
    public class PickAccountTeamCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamCurrencyIsoCode(string s)
        {
            return new PickAccountTeamCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickAccountTeamAcctAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamAcctAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamAcctAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamAcctAccessLevelConverter))]
    public class PickAccountTeamAcctAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamAcctAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamAcctAccessLevel(string s)
        {
            return new PickAccountTeamAcctAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamAcctAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountTeamCaseAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamCaseAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamCaseAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamCaseAccessLevelConverter))]
    public class PickAccountTeamCaseAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  None = "None"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamCaseAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamCaseAccessLevel(string s)
        {
            return new PickAccountTeamCaseAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamCaseAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountTeamContactAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamContactAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamContactAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamContactAccessLevelConverter))]
    public class PickAccountTeamContactAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  None = "None"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamContactAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamContactAccessLevel(string s)
        {
            return new PickAccountTeamContactAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamContactAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountTeamOpportunityAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamOpportunityAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamOpportunityAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamOpportunityAccessLevelConverter))]
    public class PickAccountTeamOpportunityAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  None = "None"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamOpportunityAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamOpportunityAccessLevel(string s)
        {
            return new PickAccountTeamOpportunityAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamOpportunityAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountTeamRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamRoleConverter))]
    public class PickAccountTeamRole
    {
        public static readonly string  AccountManager = "Account Manager"; 
        public static readonly string  AdministrativeAssistant = "Administrative Assistant            "; 
        public static readonly string  ApplicationEngineer = "Application Engineer                "; 
        public static readonly string  AssistingSalesContactBldgSysEquip = "Assisting Sales Contact - Bldg Sys & Equip            "; 
        public static readonly string  AssistingSalesContactMP = "Assisting Sales Contact - MP          "; 
        public static readonly string  AssistingSalesContactOwner = "Assisting Sales Contact  - Owner     "; 
        public static readonly string  AssistingSalesContactSF = "Assisting Sales Contact - S&F     "; 
        public static readonly string  AssistingSalesContactSolutions = "Assisting Sales Contact - Solutions            "; 
        public static readonly string  BaltimorePartsRSM = "Baltimore Parts RSM"; 
        public static readonly string  ChampionRSM = "Champion - RSM"; 
        public static readonly string  ChannelManager = "Channel Manager"; 
        public static readonly string  Coach = "Coach                               "; 
        public static readonly string  ColemanRSM = "Coleman - RSM"; 
        public static readonly string  EasternSheetMetalRSM = "Eastern Sheet Metal - RSM"; 
        public static readonly string  EnviroTecRSM = "Enviro-Tec - RSM"; 
        public static readonly string  Estimator = "Estimator                           "; 
        public static readonly string  EvconRSM = "Evcon - RSM"; 
        public static readonly string  ExecutiveManagement = "Executive Management                 "; 
        public static readonly string  ExecutiveSponsor = "Executive Sponsor"; 
        public static readonly string  FacilityExplorerRSM = "Facility Explorer - RSM"; 
        public static readonly string  FLSPControlsTech = "FLSP - Controls Tech"; 
        public static readonly string  FLSPMechanic = "FLSP - Mechanic                     "; 
        public static readonly string  FLSPSFTech = "FLSP - S&F Tech"; 
        public static readonly string  FraserJohnstonRSM = "Fraser-Johnston - RSM"; 
        public static readonly string  FrickPartsRSM = "Frick Parts RSM"; 
        public static readonly string  GuardianRSM = "Guardian - RSM"; 
        public static readonly string  HartCooleyCommercialRSM = "Hart & Cooley Commercial - RSM"; 
        public static readonly string  HartCooleyHearthRetailRSM = "Hart & Cooley Hearth/Retail - RSM"; 
        public static readonly string  HartCooleyWholesaleRSM = "Hart & Cooley Wholesale - RSM"; 
        public static readonly string  HitachiRSM = "Hitachi - RSM"; 
        public static readonly string  JCIControlsProductsABCSRSM = "JCI - Controls Products ABCS - RSM"; 
        public static readonly string  JCIControlsProductsARWRSM = "JCI - Controls Products ARW - RSM"; 
        public static readonly string  JCIControlsProductsInsideSales = "JCI - Controls Products - Inside Sales"; 
        public static readonly string  JCIControlsProductsOEMRSM = "JCI - Controls Products OEM - RSM"; 
        public static readonly string  JCIControlsProductsSSNARSM = "JCI - Controls Products SSNA - RSM"; 
        public static readonly string  JohnsonControlsCommercialRSM = "Johnson Controls - Commercial - RSM"; 
        public static readonly string  JohnsonControlsControlsProductsRSM = "Johnson Controls - Controls Products - RSM"; 
        public static readonly string  JohnsonControlsDuctedDXRSM = "Johnson Controls - Ducted DX - RSM"; 
        public static readonly string  KochFilterRSM = "Koch Filter - RSM"; 
        public static readonly string  KruegerRSM = "Krueger - RSM"; 
        public static readonly string  LauRSM = "Lau - RSM"; 
        public static readonly string  LeadQualifier = "Lead Qualifier"; 
        public static readonly string  LuxaireRSM = "Luxaire - RSM"; 
        public static readonly string  MetasysRSM = "Metasys - RSM"; 
        public static readonly string  MillerPickingRSM = "Miller Picking - RSM"; 
        public static readonly string  MultiAreaAccountExecutiveManager = "Multi-Area Account Executive/Manager"; 
        public static readonly string  NACSSNAAirDistributionRSM = "NAC SSNA Air Distribution - RSM"; 
        public static readonly string  NACSSNAAirHandlingRSM = "NAC SSNA Air Handling - RSM"; 
        public static readonly string  NACSSNAChillerSalesRSM = "NAC SSNA Chiller Sales - RSM"; 
        public static readonly string  NACSSNACommercialRSM = "NAC SSNA Commercial - RSM"; 
        public static readonly string  NetworkAdministrator = "Network Administrator               "; 
        public static readonly string  NetworkIntegrationContact = "Network Integration Contact         "; 
        public static readonly string  OpportunityOwner = "Opportunity Owner"; 
        public static readonly string  PaceRSM = "Pace - RSM"; 
        public static readonly string  PennBarryRSM = "PennBarry - RSM"; 
        public static readonly string  PennRSM = "Penn - RSM"; 
        public static readonly string  PreSalesConsultant = "Pre-Sales Consultant"; 
        public static readonly string  PrincipalSalesContactBldgSysEquip = "Principal Sales Contact  - Bldg Sys & Equip"; 
        public static readonly string  PrincipalSalesContactMP = "Principal Sales Contact - MP"; 
        public static readonly string  PrincipalSalesContactOwner = "Principal Sales Contact  - Owner   "; 
        public static readonly string  PrincipalSalesContactSF = "Principal Sales Contact  - S&F  "; 
        public static readonly string  PrincipalSalesContactSolutions = "Principal Sales Contact  - Solutions"; 
        public static readonly string  ProjectEngineer = "Project Engineer                    "; 
        public static readonly string  ProjectManager = "Project Manager                     "; 
        public static readonly string  Prospecting = "Prospecting"; 
        public static readonly string  QuantechRSM = "Quantech - RSM"; 
        public static readonly string  RegionalManagement = "Regional  Management                     "; 
        public static readonly string  ReliableRSM = "Reliable - RSM"; 
        public static readonly string  RickardRSM = "Rickard - RSM"; 
        public static readonly string  RuskinRSM = "Ruskin - RSM"; 
        public static readonly string  SalesManagement = "Sales Management                    "; 
        public static readonly string  SalesManager = "Sales Manager"; 
        public static readonly string  SalesRep = "Sales Rep"; 
        public static readonly string  SelkirkCorpRSM = "Selkirk Corp - RSM"; 
        public static readonly string  SkymarkRSM = "Skymark - RSM"; 
        public static readonly string  SolutionsPerformanceAssuranceSpecialist = "Solutions Performance Assurance Specialist"; 
        public static readonly string  Source1RSM = "Source 1 - RSM"; 
        public static readonly string  SSNAManagement = "SSNA Management"; 
        public static readonly string  SuperiorRexRSM = "Superior Rex - RSM"; 
        public static readonly string  SupremeFanRSM = "Supreme Fan - RSM"; 
        public static readonly string  TechnicalAssistant = "Technical Assistant"; 
        public static readonly string  TempmasterRSM = "Tempmaster - RSM"; 
        public static readonly string  TitusRSM = "Titus - RSM"; 
        public static readonly string  TrionRSM = "Trion - RSM"; 
        public static readonly string  TruckBasedServiceManager = "Truck Based Service Manager"; 
        public static readonly string  TuttleBaileyRSM = "Tuttle & Bailey - RSM"; 
        public static readonly string  UPGRSM = "UPG - RSM"; 
        public static readonly string  VRFRSM = "VRF RSM"; 
        public static readonly string  YorkAHURSM = "York AHU - RSM"; 
        public static readonly string  YorkAirDistributionRSM = "York Air Distribution - RSM"; 
        public static readonly string  YorkAppliedRSM = "York - Applied - RSM"; 
        public static readonly string  YorkChillerRSM = "York Chiller - RSM"; 
        public static readonly string  YorkDuctedDXRSM = "York Ducted DX - RSM"; 
        public static readonly string  YorkResidentialLightCommercialRSM = "York - Residential & Light Commercial - RSM"; 
        public static readonly string  YorkVRFRSM = "York - VRF - RSM"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamRole o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamRole(string s)
        {
            return new PickAccountTeamRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamRole Parse(string text) => text;

        

    }
    public class PickAccountTeamBrandConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamBrand)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamBrand {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamBrandConverter))]
    public class PickAccountTeamBrand
    {
        public static readonly string  ABCOOLAIR = "ABCOOL AIR"; 
        public static readonly string  Airmate = "Airmate"; 
        public static readonly string  AmericanMetalProducts = "American Metal Products"; 
        public static readonly string  Ameriflex = "Ameriflex"; 
        public static readonly string  Ameriflow = "Ameriflow"; 
        public static readonly string  AmeriVent = "Ameri-Vent"; 
        public static readonly string  Ampco = "Ampco"; 
        public static readonly string  CarrierKrueger = "Carrier (Krueger)"; 
        public static readonly string  Champion = "Champion"; 
        public static readonly string  Coleman = "Coleman"; 
        public static readonly string  Dayton = "Dayton"; 
        public static readonly string  EasternSheetMetal = "Eastern Sheet Metal"; 
        public static readonly string  EnERVent = "EnERVent"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  Evcon = "Evcon"; 
        public static readonly string  FacilityExplorer = "Facility Explorer"; 
        public static readonly string  FraserJohnston = "Fraser-Johnston"; 
        public static readonly string  Frick = "Frick"; 
        public static readonly string  Guardian = "Guardian"; 
        public static readonly string  HartCooley = "Hart & Cooley"; 
        public static readonly string  Heatfab = "Heatfab"; 
        public static readonly string  Hitachi = "Hitachi"; 
        public static readonly string  JohnsonControlsBoardRepair = "Johnson Controls - Board Repair"; 
        public static readonly string  JohnsonControlsCommercial = "Johnson Controls - Commercial"; 
        public static readonly string  JohnsonControlsControlsProducts = "Johnson Controls - Controls Products"; 
        public static readonly string  KochFilter = "Koch Filter"; 
        public static readonly string  KochFilterofferedbyHC = "Koch Filter offered by H&C"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  Lau = "Lau"; 
        public static readonly string  LauOEM = "Lau - OEM"; 
        public static readonly string  LauParts = "Lau - Parts"; 
        public static readonly string  Lima = "Lima"; 
        public static readonly string  Luxaire = "Luxaire"; 
        public static readonly string  Metasys = "Metasys"; 
        public static readonly string  Milcor = "Milcor"; 
        public static readonly string  MillerPicking = "Miller-Picking"; 
        public static readonly string  NonYork3rdParty = "Non York - 3rd Party"; 
        public static readonly string  P2000 = "P2000"; 
        public static readonly string  PANOPTIX = "PANOPTIX"; 
        public static readonly string  PEAKOEMControl = "PEAK - OEM Control"; 
        public static readonly string  PENN = "PENN"; 
        public static readonly string  PennBarry = "PennBarry"; 
        public static readonly string  Polyflue = "Polyflue"; 
        public static readonly string  PORTALSPLUS = "PORTALS PLUS"; 
        public static readonly string  Provent = "Provent"; 
        public static readonly string  Quantech = "Quantech"; 
        public static readonly string  Reliable = "Reliable"; 
        public static readonly string  ReliableProducts = "Reliable Products"; 
        public static readonly string  Rickard = "Rickard"; 
        public static readonly string  RPS = "RPS"; 
        public static readonly string  RUSJOHNSONCONTROLINC = "RUS JOHNSON CONTROL, INC"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  RuskinRooftopSystems = "Ruskin Rooftop Systems"; 
        public static readonly string  SelkirkCorp = "Selkirk Corp"; 
        public static readonly string  Skymark = "Skymark"; 
        public static readonly string  SMARTAirEnergySolutions = "SMART Air & Energy Solutions"; 
        public static readonly string  SmartFlex = "Smart Flex"; 
        public static readonly string  Source1 = "Source 1"; 
        public static readonly string  SuperiorRex = "Superior Rex"; 
        public static readonly string  SuperPro = "SuperPro"; 
        public static readonly string  SuperVent = "SuperVent"; 
        public static readonly string  SupremeFan = "Supreme Fan"; 
        public static readonly string  Tempmaster = "Tempmaster"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  TRION = "TRION"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  Verasys = "Verasys"; 
        public static readonly string  WARD = "WARD"; 
        public static readonly string  Winchester = "Winchester"; 
        public static readonly string  YorkAHU = "York - AHU"; 
        public static readonly string  YorkAirDistribution = "York - Air Distribution"; 
        public static readonly string  YorkChiller = "York - Chiller"; 
        public static readonly string  YorkChillerParts = "York - Chiller Parts"; 
        public static readonly string  YorkDFS = "York - DFS"; 
        public static readonly string  YorkMiniVRF = "York - Mini VRF"; 
        public static readonly string  YorkResidentialLightCommercial = "York - Residential & Light Commercial"; 
        public static readonly string  YorkVRF = "York - VRF"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamBrand o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamBrand(string s)
        {
            return new PickAccountTeamBrand {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamBrand Parse(string text) => text;

        

    }
    public class PickAccountTeamSellingEntityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountTeamSellingEntity)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountTeamSellingEntity {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTeamSellingEntityConverter))]
    public class PickAccountTeamSellingEntity
    {
        public static readonly string  AftermarketParts = "Aftermarket Parts"; 
        public static readonly string  AppliedSystems = "Applied Systems"; 
        public static readonly string  ControlsProductsABCS = "Controls Products ABCS"; 
        public static readonly string  ControlsProductsABCSARW = "Controls Products ABCS-ARW"; 
        public static readonly string  ControlsProductsARW = "Controls Products ARW"; 
        public static readonly string  ControlsProductsInsideSales = "Controls Products Inside Sales"; 
        public static readonly string  ControlsProductsOEM = "Controls Products OEM"; 
        public static readonly string  ControlsProductsSSNA = "Controls Products SSNA"; 
        public static readonly string  DFS = "DFS"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  Fans = "Fans"; 
        public static readonly string  HartCooleyCommercialOEM = "Hart & Cooley Commercial / OEM"; 
        public static readonly string  HartCooleyHearthRetailCanada = "Hart & Cooley Hearth / Retail / Canada"; 
        public static readonly string  HartCooleyWholesale = "Hart & Cooley Wholesale"; 
        public static readonly string  Koch = "Koch"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  Reliable = "Reliable"; 
        public static readonly string  ReliableProducts = "Reliable Products"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  RuskinRooftopSystems = "Ruskin Rooftop Systems"; 
        public static readonly string  SSNAAHU = "SSNA AHU"; 
        public static readonly string  SSNAAirDistribution = "SSNA Air Distribution"; 
        public static readonly string  SSNAChillers = "SSNA Chillers"; 
        public static readonly string  SSNACommercial = "SSNA Commercial"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  Trion = "Trion"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  VRFHitachi = "VRF Hitachi"; 
        public static readonly string  VRFYork = "VRF York"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountTeamSellingEntity o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountTeamSellingEntity(string s)
        {
            return new PickAccountTeamSellingEntity {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountTeamSellingEntity Parse(string text) => text;

        

    }
    public class PickActionPlanCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActionPlanCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActionPlanCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActionPlanCurrencyIsoCodeConverter))]
    public class PickActionPlanCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActionPlanCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickActionPlanCurrencyIsoCode(string s)
        {
            return new PickActionPlanCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActionPlanCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickActionPlanSkipDayConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActionPlanSkipDay)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActionPlanSkipDay {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActionPlanSkipDayConverter))]
    public class PickActionPlanSkipDay
    {
        public static readonly string  Friday = "Friday"; 
        public static readonly string  Monday = "Monday"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActionPlanSkipDay o)
        {
            return o.Value;
        }

        public static implicit operator PickActionPlanSkipDay(string s)
        {
            return new PickActionPlanSkipDay {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActionPlanSkipDay Parse(string text) => text;

        

    }
    public class PickActivityHistoryStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryStatusConverter))]
    public class PickActivityHistoryStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Deferred = "Deferred"; 
        public static readonly string  Waitingonsomeoneelse = "Waiting on someone else"; 
        public static readonly string  Abandoned = "Abandoned"; 
        public static readonly string  Open = "Open"; 
        public static readonly string  Closed = "Closed"; 
        public static readonly string  Overridden = "Overridden"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryStatus(string s)
        {
            return new PickActivityHistoryStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryStatus Parse(string text) => text;

        

    }
    public class PickActivityHistoryPriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryPriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryPriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryPriorityConverter))]
    public class PickActivityHistoryPriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Normal = "Normal"; 
        public static readonly string  Low = "Low"; 
        public static readonly string  Medium = "Medium"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryPriority o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryPriority(string s)
        {
            return new PickActivityHistoryPriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryPriority Parse(string text) => text;

        

    }
    public class PickActivityHistoryActivityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryActivityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryActivityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryActivityTypeConverter))]
    public class PickActivityHistoryActivityType
    {
        public static readonly string  Administration = "Administration"; 
        public static readonly string  Call = "Call"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Estimate = "Estimate"; 
        public static readonly string  FacetoFace = "Face to Face"; 
        public static readonly string  Holiday = "Holiday"; 
        public static readonly string  Meeting = "Meeting"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  RemoteCall = "Remote Call"; 
        public static readonly string  Sickness = "Sickness"; 
        public static readonly string  Training = "Training"; 
        public static readonly string  Visittocustomer = "Visit to customer"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryActivityType o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryActivityType(string s)
        {
            return new PickActivityHistoryActivityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryActivityType Parse(string text) => text;

        

    }
    public class PickActivityHistoryCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryCurrencyIsoCodeConverter))]
    public class PickActivityHistoryCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryCurrencyIsoCode(string s)
        {
            return new PickActivityHistoryCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickActivityHistoryCallTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryCallType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryCallType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryCallTypeConverter))]
    public class PickActivityHistoryCallType
    {
        public static readonly string  Internal = "Internal"; 
        public static readonly string  Inbound = "Inbound"; 
        public static readonly string  Outbound = "Outbound"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryCallType o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryCallType(string s)
        {
            return new PickActivityHistoryCallType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryCallType Parse(string text) => text;

        

    }
    public class PickActivityHistoryEventStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryEventStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryEventStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryEventStatusConverter))]
    public class PickActivityHistoryEventStatus
    {
        public static readonly string  Scheduled = "Scheduled"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Planned = "Planned"; 
        public static readonly string  Confirmed = "Confirmed"; 
        public static readonly string  Closed = "Closed"; 
        public static readonly string  Cancelled = "Cancelled"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryEventStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryEventStatus(string s)
        {
            return new PickActivityHistoryEventStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryEventStatus Parse(string text) => text;

        

    }
    public class PickActivityHistoryJCIActivitySubTypesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryJCIActivitySubTypes)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryJCIActivitySubTypes {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryJCIActivitySubTypesConverter))]
    public class PickActivityHistoryJCIActivitySubTypes
    {
        public static readonly string  SalesCall = "Sales Call"; 
        public static readonly string  ShowcaseIdeationSession = "Showcase/Ideation Session"; 
        public static readonly string  FactoryTour = "Factory Tour"; 
        public static readonly string  CustomerSiteVisit = "Customer Site Visit"; 
        public static readonly string  CustomerEntertainment = "Customer Entertainment"; 
        public static readonly string  Tradeshow = "Tradeshow"; 
        public static readonly string  RelationshipBuilding = "Relationship Building"; 
        public static readonly string  JointProspectingCall = "Joint Prospecting Call"; 
        public static readonly string  BidProposal = "Bid/Proposal"; 
        public static readonly string  LunchnLearnPresentation = "Lunch 'n Learn/ Presentation"; 
        public static readonly string  QBR = "QBR"; 
        public static readonly string  TASReview = "TAS Review"; 
        public static readonly string  STAR = "STAR"; 
        public static readonly string  AccountTeamMeeting = "Account Team Meeting"; 
        public static readonly string  BranchMeeting = "Branch Meeting"; 
        public static readonly string  OneonOne = "One on One"; 
        public static readonly string  CoachingSession = "Coaching Session"; 
        public static readonly string  ManagementReviewCall = "Management Review Call"; 
        public static readonly string  AccountPlan = "Account Plan"; 
        public static readonly string  StrategicDealTeamReviewed = "Strategic Deal Team- Reviewed"; 
        public static readonly string  ManagerFeedback = "Manager Feedback"; 
        public static readonly string  BoardPositioninIndustryOrganization = "Board Position in Industry Organization"; 
        public static readonly string  CallPlanReview = "Call Plan Review"; 
        public static readonly string  CustomerPresentations = "Customer Presentations"; 
        public static readonly string  CustomertoCustomerSellingEngagements = "Customer to Customer Selling Engagements"; 
        public static readonly string  NewLOBJointSalesCall = "New LOB Joint Sales Call"; 
        public static readonly string  CrossSellMeeting = "Cross Sell Meeting"; 
        public static readonly string  CrossSellJointSalesCall = "Cross Sell Joint Sales Call"; 
        public static readonly string  CrossSellDiscoveryMeeting = "Cross Sell Discovery Meeting"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryJCIActivitySubTypes o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryJCIActivitySubTypes(string s)
        {
            return new PickActivityHistoryJCIActivitySubTypes {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryJCIActivitySubTypes Parse(string text) => text;

        

    }
    public class PickActivityHistoryJCIActivityTypesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryJCIActivityTypes)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryJCIActivityTypes {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryJCIActivityTypesConverter))]
    public class PickActivityHistoryJCIActivityTypes
    {
        public static readonly string  CustomerFacing = "Customer Facing"; 
        public static readonly string  Internal = "Internal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryJCIActivityTypes o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryJCIActivityTypes(string s)
        {
            return new PickActivityHistoryJCIActivityTypes {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryJCIActivityTypes Parse(string text) => text;

        

    }
    public class PickActivityHistoryObservedUnobservedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryObservedUnobserved)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryObservedUnobserved {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryObservedUnobservedConverter))]
    public class PickActivityHistoryObservedUnobserved
    {
        public static readonly string  Observed = "Observed"; 
        public static readonly string  Unobserved = "Unobserved"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryObservedUnobserved o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryObservedUnobserved(string s)
        {
            return new PickActivityHistoryObservedUnobserved {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryObservedUnobserved Parse(string text) => text;

        

    }
    public class PickActivityHistoryEventTaskTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryEventTaskType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryEventTaskType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryEventTaskTypeConverter))]
    public class PickActivityHistoryEventTaskType
    {
        public static readonly string  CustomerBranchReview = "Customer / Branch Review"; 
        public static readonly string  ProductTraining = "Product Training"; 
        public static readonly string  ToolApplicationTraining = "Tool / Application Training"; 
        public static readonly string  CustomerVisit = "Customer Visit"; 
        public static readonly string  CustomerCall = "Customer Call"; 
        public static readonly string  SalesSupport = "Sales Support"; 
        public static readonly string  CustomerSupport = "Customer Support"; 
        public static readonly string _1on1 = "1 on 1"; 
        public static readonly string  PerformanceRecovery = "Performance Recovery"; 
        public static readonly string  CustomerExperienceSurvey = "Customer Experience Survey"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryEventTaskType o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryEventTaskType(string s)
        {
            return new PickActivityHistoryEventTaskType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryEventTaskType Parse(string text) => text;

        

    }
    public class PickActivityHistoryCustomerPartnerTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryCustomerPartnerType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryCustomerPartnerType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryCustomerPartnerTypeConverter))]
    public class PickActivityHistoryCustomerPartnerType
    {
        public static readonly string  ArchitectEngineer = "Architect / Engineer"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  DirectBranch = "Direct Branch"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  ManufacturerRep = "Manufacturer Rep"; 
        public static readonly string  OEM = "OEM"; 
        public static readonly string  Owner = "Owner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryCustomerPartnerType o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryCustomerPartnerType(string s)
        {
            return new PickActivityHistoryCustomerPartnerType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryCustomerPartnerType Parse(string text) => text;

        

    }
    public class PickBillToCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickBillToCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickBillToCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickBillToCurrencyIsoCodeConverter))]
    public class PickBillToCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickBillToCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickBillToCurrencyIsoCode(string s)
        {
            return new PickBillToCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickBillToCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickBrandCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickBrandCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickBrandCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickBrandCurrencyIsoCodeConverter))]
    public class PickBrandCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickBrandCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickBrandCurrencyIsoCode(string s)
        {
            return new PickBrandCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickBrandCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickBrandParentBusinessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickBrandParentBusiness)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickBrandParentBusiness {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickBrandParentBusinessConverter))]
    public class PickBrandParentBusiness
    {
        public static readonly string  AppliedSystems = "Applied Systems"; 
        public static readonly string  ControlsProducts = "Controls Products"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  HartCooley = "Hart & Cooley"; 
        public static readonly string  JCISSNA = "JCI - SSNA"; 
        public static readonly string  KochFilter = "Koch Filter"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  PennBarry = "PennBarry"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  VRF = "VRF"; 
        public static readonly string  TycoSecurity = "Tyco – Security"; 
        public static readonly string  TycoFire = "Tyco – Fire"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickBrandParentBusiness o)
        {
            return o.Value;
        }

        public static implicit operator PickBrandParentBusiness(string s)
        {
            return new PickBrandParentBusiness {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickBrandParentBusiness Parse(string text) => text;

        

    }
    public class PickCaseTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseTypeConverter))]
    public class PickCaseType
    {
        public static readonly string  AccessRequest = "Access Request"; 
        public static readonly string  Bidding = "Bidding"; 
        public static readonly string  ChangeRequest = "Change Request"; 
        public static readonly string  Child = "Child"; 
        public static readonly string  ConnectedChiller = "Connected Chiller"; 
        public static readonly string  ConsumerManagement = "Consumer Management"; 
        public static readonly string  Controls = "Controls"; 
        public static readonly string  Customerrequestingrental = "Customer requesting rental"; 
        public static readonly string  Defect = "Defect"; 
        public static readonly string  DesignApplication = "Design Application"; 
        public static readonly string  DispatchManagement = "Dispatch Management"; 
        public static readonly string  Drawings = "Drawings"; 
        public static readonly string  EnterpriseAccountServiceManagement = "Enterprise Account Service Management"; 
        public static readonly string  EquipmentModificationSupport = "Equipment Modification Support"; 
        public static readonly string  EquipmentTechnicalSupport = "Equipment Technical Support"; 
        public static readonly string  Escalation = "Escalation"; 
        public static readonly string  ExistingProject = "Existing Project"; 
        public static readonly string  FeatureRequest = "Feature Request"; 
        public static readonly string  HelpDeskSupport = "Help Desk Support"; 
        public static readonly string  HotlineRequest = "Hotline Request"; 
        public static readonly string  Incident = "Incident"; 
        public static readonly string  InternalSupportRequest = "Internal Support Request"; 
        public static readonly string  LeadTime = "Lead Time"; 
        public static readonly string  LicensingManagement = "Licensing Management"; 
        public static readonly string  LiteratureSubmittalData = "Literature/Submittal Data"; 
        public static readonly string  ManualWorkOrder = "Manual Work Order"; 
        public static readonly string  Master = "Master"; 
        public static readonly string  NeedDistributorWholesaler = "Need Distributor/Wholesaler"; 
        public static readonly string  NewDispatch = "New Dispatch"; 
        public static readonly string  NewQuote = "New Quote"; 
        public static readonly string  OncallDiscrepancy = "Oncall Discrepancy"; 
        public static readonly string  OrderManagement = "Order Management"; 
        public static readonly string  OrderParts = "Order Parts"; 
        public static readonly string  OrderStatus = "Order Status"; 
        public static readonly string  OrderTracking = "Order Tracking"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  PostSales = "Post-Sales"; 
        public static readonly string  PostSalesTechnicalSupport = "Post Sales Technical Support"; 
        public static readonly string  PreSales = "Pre-Sales"; 
        public static readonly string  PreSalesTechnicalSupport = "Pre Sales Technical Support"; 
        public static readonly string  PriceandAvailability = "Price and Availability"; 
        public static readonly string  Problem = "Problem"; 
        public static readonly string  ProductInformation = "Product Information"; 
        public static readonly string  Question = "Question"; 
        public static readonly string  RemoteEquipmentManagement = "Remote Equipment Management"; 
        public static readonly string  Request = "Request"; 
        public static readonly string  Safety = "Safety"; 
        public static readonly string  Service = "Service"; 
        public static readonly string  Software = "Software"; 
        public static readonly string  SpecialPricing = "Special Pricing"; 
        public static readonly string  SQ = "SQ"; 
        public static readonly string  StatusUpdate = "Status Update"; 
        public static readonly string  SystemMaintenance = "System Maintenance"; 
        public static readonly string  SystemStartup = "System Start-up"; 
        public static readonly string  SystemSupport = "System Support"; 
        public static readonly string  TechnicalAssistance = "Technical Assistance"; 
        public static readonly string  TechnicalTrainingquestions = "Technical Training questions"; 
        public static readonly string  TechnicalTrainingregistration = "Technical Training registration"; 
        public static readonly string  Training = "Training"; 
        public static readonly string  UserSupport = "User Support"; 
        public static readonly string  WarrantyManagement = "Warranty Management"; 
        public static readonly string  WrongDepartmentInternalRedirect = "Wrong Department (Internal Redirect)"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseType o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseType(string s)
        {
            return new PickCaseType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseType Parse(string text) => text;

        

    }
    public class PickCaseStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseStatusConverter))]
    public class PickCaseStatus
    {
        public static readonly string  OnHold = "On Hold"; 
        public static readonly string  Escalated = "Escalated"; 
        public static readonly string  Closed = "Closed"; 
        public static readonly string  New = "New"; 
        public static readonly string  NACApprovalinProgress = "NAC Approval in Progress"; 
        public static readonly string  NACApprovalsComplete = "NAC Approvals Complete"; 
        public static readonly string  ExternalApprovalsinProgress = "External Approvals in Progress"; 
        public static readonly string  RequestApproved = "Request Approved"; 
        public static readonly string  RequestRejected = "Request Rejected"; 
        public static readonly string  RejectedbyBrandVP = "Rejected by Brand VP"; 
        public static readonly string  RejectedbyNACVP = "Rejected by NAC VP"; 
        public static readonly string  RejectedbyChannelVP = "Rejected by Channel VP"; 
        public static readonly string  Assigned = "Assigned"; 
        public static readonly string  WorkinProgress = "Work in Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Canceled = "Canceled"; 
        public static readonly string  ReInvoiceComplete = "Re-Invoice Complete"; 
        public static readonly string  ReInvoiceRequired = "Re-Invoice Required"; 
        public static readonly string  ReadyForInvoicing = "Ready For Invoicing"; 
        public static readonly string  SubmittedforInvoice = "Submitted for Invoice"; 
        public static readonly string  WaitingonFactoryEngineeringInfo = "Waiting on Factory/Engineering Info"; 
        public static readonly string  ONHOLDwaitingoncustomerinfo = "ON HOLD waiting on customer info"; 
        public static readonly string  Pending = "Pending.."; 
        public static readonly string  CustomerResponded = "Customer Responded"; 
        public static readonly string  Resolved = "Resolved"; 
        public static readonly string  WaitingCustomer = "Waiting Customer"; 
        public static readonly string  Reopened = "Reopened"; 
        public static readonly string  ClosedasDuplicate = "Closed as Duplicate"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseStatus(string s)
        {
            return new PickCaseStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseStatus Parse(string text) => text;

        

    }
    public class PickCaseReasonConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseReason)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseReason {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseReasonConverter))]
    public class PickCaseReason
    {
        public static readonly string _3rdPartyEquipmentConfiguration = "3rd Party Equipment / Configuration"; 
        public static readonly string  Complexfunctionality = "Complex functionality"; 
        public static readonly string  ComponentFailure = "Component Failure"; 
        public static readonly string  ComponentIncompatible = "Component Incompatible"; 
        public static readonly string  ConnectedChillerNuisanceCall = "Connected Chiller - Nuisance Call"; 
        public static readonly string  CredentialsRequested = "Credentials Requested"; 
        public static readonly string  Customerrequestingrental = "Customer requesting rental"; 
        public static readonly string  DatabaseConfiguration = "Database Configuration"; 
        public static readonly string  DatabaseCorruption = "Database Corruption"; 
        public static readonly string  DocumentationError = "Documentation Error"; 
        public static readonly string  DocumentationInsufficient = "Documentation Insufficient"; 
        public static readonly string  DuplicateTicket = "Duplicate Ticket"; 
        public static readonly string  EscalationCustomerSatisfaction = "Escalation - Customer Satisfaction"; 
        public static readonly string  EscalationDriverQuality = "Escalation - Driver Quality"; 
        public static readonly string  EscalationHotsheet = "Escalation - Hotsheet"; 
        public static readonly string  Existingproblem = "Existing problem"; 
        public static readonly string  FeatureRequest = "Feature Request"; 
        public static readonly string  FirmwareDefect = "Firmware Defect"; 
        public static readonly string  HardwareDefect = "Hardware Defect"; 
        public static readonly string  ImproperInstallation = "Improper Installation"; 
        public static readonly string  ImproperSetup = "Improper Setup"; 
        public static readonly string  Instructionsnotclear = "Instructions not clear"; 
        public static readonly string  Interdepartmental = "Interdepartmental"; 
        public static readonly string  JCISoftwareDefect = "JCI Software Defect"; 
        public static readonly string  KnowledgeLiterature = "Knowledge - Literature"; 
        public static readonly string  KnowledgeSkillPrerequisite = "Knowledge - Skill Prerequisite"; 
        public static readonly string  KnowledgeTraining = "Knowledge - Training"; 
        public static readonly string  KnownIssue = "Known Issue"; 
        public static readonly string  ManualWorkOrderFederalAccounts = "Manual Work Order - Federal Accounts"; 
        public static readonly string  ManualWorkOrderPRVirginIslands = "Manual Work Order - PR/Virgin Islands"; 
        public static readonly string  ManualWorkOrderRentalEquipment = "Manual Work Order - Rental Equipment"; 
        public static readonly string  ManufacturingDefect = "Manufacturing Defect"; 
        public static readonly string  MisappliedorMisuse = "Misapplied or Misuse"; 
        public static readonly string  NeedDistributorWholesaler = "Need Distributor/Wholesaler"; 
        public static readonly string  NetworkConfiguration = "Network Configuration"; 
        public static readonly string  NetworkEquipment = "Network Equipment"; 
        public static readonly string  NewCustomerSetup = "New Customer Setup"; 
        public static readonly string  NewDispatch = "New Dispatch"; 
        public static readonly string  Newproblem = "New problem"; 
        public static readonly string  NewQuote = "New Quote"; 
        public static readonly string  NoFeedbackfromCaller = "No Feedback from Caller"; 
        public static readonly string  None = "None"; 
        public static readonly string  NonJCIsoftwareDefect = "Non-JCI software Defect"; 
        public static readonly string  NotApplicable = "Not Applicable"; 
        public static readonly string  OncallSheetErrorIncorrectGlobalID = "Oncall Sheet Error - Incorrect Global ID"; 
        public static readonly string  OncallSheetErrorIncorrectMechTech = "Oncall Sheet Error - Incorrect Mech/Tech"; 
        public static readonly string  OncallSheetErrorIncorrectPhone = "Oncall Sheet Error - Incorrect Phone #"; 
        public static readonly string  OncallSheetErrorMiscellaneous = "Oncall Sheet Error - Miscellaneous"; 
        public static readonly string  OperatingSystem = "Operating System"; 
        public static readonly string  OrderParts = "Order Parts"; 
        public static readonly string  OrderStatus = "Order Status"; 
        public static readonly string  PriceandAvailability = "Price and Availability"; 
        public static readonly string  ProductInformation = "Product Information"; 
        public static readonly string  ProvisionSite = "Provision Site"; 
        public static readonly string  QuestionPosed = "Question Posed"; 
        public static readonly string  RequestedApplicationInformation = "Requested Application Information"; 
        public static readonly string  StatusUpdateExternalCustomer = "Status Update - External Customer"; 
        public static readonly string  StatusUpdateInternalCustomer = "Status Update - Internal Customer"; 
        public static readonly string  SystemOutagePlanned = "System Outage - Planned"; 
        public static readonly string  SystemOutageUnplanned = "System Outage - Unplanned"; 
        public static readonly string  TechnicalAssistance = "Technical Assistance"; 
        public static readonly string  Tracking = "Tracking"; 
        public static readonly string  UnknownCause = "Unknown Cause"; 
        public static readonly string  UpdateRequestforDispatchCustomer = "Update Request for Dispatch - Customer"; 
        public static readonly string  UpdateRequestforDispatchTechnician = "Update Request for Dispatch - Technician"; 
        public static readonly string  Userdidntattendtraining = "User didn't attend training"; 
        public static readonly string  UserError = "User Error"; 
        public static readonly string  WorksAsDesigned = "Works As Designed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseReason o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseReason(string s)
        {
            return new PickCaseReason {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseReason Parse(string text) => text;

        

    }
    public class PickCaseOriginConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseOrigin)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseOrigin {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseOriginConverter))]
    public class PickCaseOrigin
    {
        public static readonly string  Email = "Email"; 
        public static readonly string  Phone = "Phone"; 
        public static readonly string  Web = "Web"; 
        public static readonly string  ChatterAnswers = "Chatter Answers"; 
        public static readonly string  InPerson = "In Person"; 
        public static readonly string  Lync = "Lync"; 
        public static readonly string  Portal = "Portal"; 
        public static readonly string  Voicemail = "Voicemail"; 
        public static readonly string  LiveAgentChat = "Live Agent Chat"; 
        public static readonly string  LyncSkype = "Lync/Skype"; 
        public static readonly string  None = "None"; 
        public static readonly string  EmailFieldSupportCenter = "Email Field Support Center"; 
        public static readonly string  EmailProductTechnicalSupport = "Email Product Technical Support"; 
        public static readonly string  EmailRemoteOperationsCenter = "Email Remote Operations Center"; 
        public static readonly string  EmailConnectedOfferings = "Email Connected Offerings"; 
        public static readonly string  EmailFieldSupportCenterCUE = "Email Field Support Center CUE"; 
        public static readonly string  EmailCOSCEnterpriseAccounts = "Email COSC Enterprise Accounts"; 
        public static readonly string  EmailAppliedDxSalesSupport = "Email Applied Dx Sales Support"; 
        public static readonly string  EmailSSNAApplicationSupport = "Email SSNA Application Support"; 
        public static readonly string  EmailCOSCCallCenter = "Email COSC Call Center"; 
        public static readonly string  SSNABusinessSupport = "SSNA Business Support"; 
        public static readonly string  EmailCustomerDashboardSupport = "Email Customer Dashboard Support"; 
        public static readonly string  EmailAppliedEquipment = "Email Applied Equipment"; 
        public static readonly string  EmailChillerPreSales = "Email Chiller Pre-Sales"; 
        public static readonly string  EmailtoAHUCoils = "Email to AHU Coils"; 
        public static readonly string  EmailtoAHUCustom = "Email to AHU Custom"; 
        public static readonly string  EmailtoAHUParts = "Email to AHU Parts"; 
        public static readonly string  EmailtoAHUSolutions = "Email to AHU Solutions"; 
        public static readonly string  EmailtoAppliedDXPostSales = "Email to Applied DX Post Sales"; 
        public static readonly string  EmailtoChillerSolPostSalesGenAdmin = "Email to Chiller Sol Post Sales - Gen Admin"; 
        public static readonly string  EmailtoPSOCustSrvSoftware = "Email to PSO Cust Srv - Software"; 
        public static readonly string  EmailtoPSOCustSrvControls = "Email to PSO Cust Srv - Controls"; 
        public static readonly string  EmailtoWarrantySupportCenter = "Email to Warranty Support Center"; 
        public static readonly string  EmailtoVRFDuctlessNATraining = "Email to VRF & Ductless NA - Training"; 
        public static readonly string  EmailtoVRFDuctlessNAApplicationDesign = "Email to VRF & Ductless NA – Application Design"; 
        public static readonly string  EmailtoVRFDuctlessNACustSrv = "Email to VRF & Ductless NA – Cust Srv"; 
        public static readonly string  EmailtoVRFDuctlessNATechSupport = "Email to VRF & Ductless NA – Tech Support"; 
        public static readonly string  EmailtoVRFDuctlessNAWarranty = "Email to VRF & Ductless NA - Warranty"; 
        public static readonly string  EmailtoRuskinCustSrv = "Email to Ruskin Cust Srv"; 
        public static readonly string  EmailtoKruegerCustSrv = "Email to Krueger Cust Srv"; 
        public static readonly string  EmailtoKruegerApplEngGRD = "Email to Krueger Appl Eng (GRD)"; 
        public static readonly string  EmailtoKruegerApplEngTUEQ = "Email to Krueger Appl Eng (TU/EQ)"; 
        public static readonly string  EmailtoKruegerSpecialtyProducts = "Email to Krueger Specialty Products"; 
        public static readonly string  EmailtoKruegerSoftwareSupport = "Email to Krueger Software Support"; 
        public static readonly string  EmailtoPennBarryCustSrv = "Email to PennBarry Cust Srv"; 
        public static readonly string  EmailtoPennBarryPreSalesAE = "Email to PennBarry Pre-Sales AE"; 
        public static readonly string  EmailtoPennBarryPostSalesTS = "Email to PennBarry Post Sales TS"; 
        public static readonly string  EmailtoTuttleBaileyCustSrv = "Email to Tuttle & Bailey Cust Srv"; 
        public static readonly string  EmailtoTuttleBaileyOrderEntry = "Email to Tuttle & Bailey Order Entry"; 
        public static readonly string  EmailtoContactCenterUATTestCenter = "Email to Contact Center UAT Test Center"; 
        public static readonly string  EmailtoRuskinACSSupport = "Email to Ruskin ACS Support"; 
        public static readonly string  EmailtoRuskinACSProjectsTeam = "Email to Ruskin ACS - Projects Team"; 
        public static readonly string  EmailtoRuskinACSGeneralAdmin = "Email to Ruskin ACS - General Admin"; 
        public static readonly string  EmailtoRuskinLouversPreSales = "Email to Ruskin Louvers - Pre-Sales"; 
        public static readonly string  EmailtoRuskinReliableLouversPreSales = "Email to Ruskin Reliable Louvers - Pre Sales"; 
        public static readonly string  Nightcall = "Nightcall"; 
        public static readonly string  PreventativeMaintenance = "Preventative Maintenance"; 
        public static readonly string  EmailtoRuskinOEMSales = "Email to Ruskin OEM Sales"; 
        public static readonly string  EmailtoRuskinTCSales = "Email to Ruskin TC Sales"; 
        public static readonly string  EmailtoFSCVerasys = "Email to FSC Verasys"; 
        public static readonly string  EmailtoHCCrmclCustSrvAmpco = "Email to H&C - Crmcl Cust Srv (Ampco)"; 
        public static readonly string  EmailtoHCCrmclCustSrvMilcor = "Email to H&C - Crmcl Cust Srv (Milcor)"; 
        public static readonly string  EmailtoHCCrmclCustSrvRPS = "Email to H&C - Crmcl Cust Srv (RPS)"; 
        public static readonly string  EmailtoHCCrmclCustSrvSelkirk = "Email to H&C - Crmcl Cust Srv (Selkirk)"; 
        public static readonly string  EmailtoSelkirkCustSrv = "Email to Selkirk - Cust Srv"; 
        public static readonly string  EmailtoBaltimorePartsDistributorCustSrv = "Email to Baltimore Parts - Distributor Cust Srv"; 
        public static readonly string  EmailtoBaltimorePartsContractorCustSrv = "Email to Baltimore Parts - Contractor Cust Srv"; 
        public static readonly string  EmailtoBaltimorePartsIndstrlRefgCustSrv = "Email to Baltimore Parts - Indstrl Refg Cust Srv"; 
        public static readonly string  EmailtoLouisvillePartsJCIPartsCustSrv = "Email to Louisville Parts - JCI Parts Cust Srv"; 
        public static readonly string  EmailtoP2000SecurityTechSpt = "Email to P2000 Security - Tech Spt"; 
        public static readonly string  EmailtoLatinAmericaTechSpt = "Email to Latin America - Tech Spt"; 
        public static readonly string  EmailtoLatinAmericaTraining = "Email to Latin America - Training"; 
        public static readonly string  EmailtoMEOTechSptLevel1 = "Email to MEO - Tech Spt Level 1"; 
        public static readonly string  EmailtoMEOTechSptLevel2 = "Email to MEO - Tech Spt Level 2"; 
        public static readonly string  EmailtoiBusinessIndoorPackageEquip = "Email to iBusiness - Indoor Package Equip"; 
        public static readonly string  EmailtoiBusinessNavigator = "Email to iBusiness - Navigator"; 
        public static readonly string  EmailtoiBusinessSGMobility = "Email to iBusiness - SG Mobility"; 
        public static readonly string  EmailtoiBusinessUPGNet = "Email to iBusiness - UPGNet"; 
        public static readonly string  EmailtoiBusinessUST = "Email to iBusiness - UST"; 
        public static readonly string  EmailtoiBusinessYORKworks = "Email to iBusiness - YORKworks"; 
        public static readonly string  EmailtoTrionCustSrv = "Email to Trion - Cust Srv"; 
        public static readonly string  EmailtoBaltimorePartsContractorsCustSrv = "Email to Baltimore Parts - Contractors Cust Srv"; 
        public static readonly string  EmailtoUPGWarranty = "Email to UPG Warranty"; 
        public static readonly string  EmailtoUPGSource1Parts = "Email to UPG Source 1 Parts"; 
        public static readonly string  EmailtoUPGCommTechSptPartsHelp = "Email to UPG Comm Tech Spt - Parts Help"; 
        public static readonly string  EmailtoUPGCommTechSptL1 = "Email to UPG Comm Tech Spt - L1"; 
        public static readonly string  EmailtoUPGCommTechSptModTeam = "Email to UPG Comm Tech Spt - Mod Team"; 
        public static readonly string  EmailtoUPGNatlAcctsTriage = "Email to UPG Natl Accts - Triage"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1a = "Email to UPG Sales Svcs - Cust Srv L1a"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1b = "Email to UPG Sales Svcs - Cust Srv L1b"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1c = "Email to UPG Sales Svcs - Cust Srv L1c"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1d = "Email to UPG Sales Svcs - Cust Srv L1d"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1e = "Email to UPG Sales Svcs - Cust Srv L1e"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1f = "Email to UPG Sales Svcs - Cust Srv L1f"; 
        public static readonly string  EmailtoUPGSalesSvcsCustSrvL1g = "Email to UPG Sales Svcs - Cust Srv L1g"; 
        public static readonly string  EmailtoUPGSalesSvcsIntlL1a = "Email to UPG Sales Svcs - Int'l L1a"; 
        public static readonly string  EmailtoUPGSalesSvcsIntlL1b = "Email to UPG Sales Svcs - Int'l L1b"; 
        public static readonly string  EmailtoUPGSalesSvcsIntlL1c = "Email to UPG Sales Svcs - Int'l L1c"; 
        public static readonly string  EmailtoUPGSalesSvcsIntlL1d = "Email to UPG Sales Svcs - Int'l L1d"; 
        public static readonly string  EmailtoUPGResdntlJohnstoneDlr = "Email to UPG Resdntl - Johnstone Dlr"; 
        public static readonly string  EmailtoUPGResdntlMfrHousing = "Email to UPG Resdntl - Mfr Housing"; 
        public static readonly string  EmailtoUPGConsumerRel = "Email to UPG Consumer Rel"; 
        public static readonly string  EmailChillerSolPostSalesAbsorber = "Email Chiller Sol Post Sales - Absorber"; 
        public static readonly string  EmailChillerSolPostSalesGenAdmin = "Email Chiller Sol Post Sales - Gen Admin"; 
        public static readonly string  EmailChillerSolPreSalesLTC = "Email Chiller Sol Pre-Sales - LTC"; 
        public static readonly string  EmailChillerSolPreSalesSS = "Email Chiller Sol Pre-Sales - SS"; 
        public static readonly string  EmailtoChillerSolPostSalesYMC2 = "Email to Chiller Sol Post Sales - YMC2"; 
        public static readonly string  EmailtoTitusPreSales = "Email to Titus - Pre Sales"; 
        public static readonly string  EmailtoKochFilterCustSrv = "Email to Koch Filter- Cust Srv"; 
        public static readonly string  EmailtoETICustSrv = "Email to ETI - Cust Srv"; 
        public static readonly string  EmailtoMEOMEMHolding = "Email to MEO - MEM Holding"; 
        public static readonly string  EmailtoAHUArchive = "Email to AHU Archive"; 
        public static readonly string  EmailtoAHUAPAR = "Email to AHU AP AR"; 
        public static readonly string  EmailtoP2000SecurityTechSptL3 = "Email to P2000 Security - Tech Spt L3"; 
        public static readonly string  EmailtoP2000SecuritySvcContracts = "Email to P2000 Security - Svc Contracts"; 
        public static readonly string  EmailtoUPGResdntlDistributor = "Email to UPG Resdntl - Distributor"; 
        public static readonly string  EmailtoUPGResdntlGenDlr = "Email to UPG Resdntl - Gen Dlr"; 
        public static readonly string  EmailtoUPGResdntlWinSupplyDlr = "Email to UPG Resdntl - WinSupply Dlr"; 
        public static readonly string  EmailtoUPGResdntlDGATProgram = "Email to UPG Resdntl - DGAT Program"; 
        public static readonly string  EmailtoMEATechSptAirside = "Email to MEA Tech Spt - Airside"; 
        public static readonly string  EmailtoMEATechSptChillers = "Email to MEA Tech Spt - Chillers"; 
        public static readonly string  EmailtoMEATechSptSystems = "Email to MEA Tech Spt - Systems"; 
        public static readonly string  EmailtoMEATechSptUnitaryProd = "Email to MEA Tech Spt - Unitary Prod"; 
        public static readonly string  EmailtoMEATechSptYorkService = "Email to MEA Tech Spt - York Service"; 
        public static readonly string  EmailtoP2000SecurityProfessionalSvc = "Email to P2000 Security Professional Svc"; 
        public static readonly string  EmailtoUPGNormanModification = "Email to UPG Norman Modification"; 
        public static readonly string  EmailtoUPGCommTechSptApplEng = "Email to UPG Comm Tech Spt - Appl Eng"; 
        public static readonly string  EmailtoUPGConsumerRelvoicemail = "Email to UPG Consumer Rel-voicemail"; 
        public static readonly string  EmailtoChillerSolPostSalesCI = "Email to Chiller Sol Post Sales - C/I"; 
        public static readonly string  EmailtoTrionTechSpt = "Email to Trion - Tech Spt"; 
        public static readonly string  EmailSSNAApplCentrlzdEQContract = "Email SSNA Appl - Centrlzd EQ Contract"; 
        public static readonly string  EmailtoPennBarryCustSrvL1A = "Email to PennBarry - Cust Srv L1 (A)"; 
        public static readonly string  EmailtoPennBarryCustSrvL1B = "Email to PennBarry - Cust Srv L1 (B)"; 
        public static readonly string  EmailCOSCCallCenterPrevailingWage = "Email COSC Call Center - Prevailing Wage"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseOrigin o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseOrigin(string s)
        {
            return new PickCaseOrigin {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseOrigin Parse(string text) => text;

        

    }
    public class PickCasePriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCasePriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCasePriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCasePriorityConverter))]
    public class PickCasePriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Low = "Low"; 
        public static readonly string  Urgent = "Urgent"; 
        public static readonly string  None = "None"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCasePriority o)
        {
            return o.Value;
        }

        public static implicit operator PickCasePriority(string s)
        {
            return new PickCasePriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCasePriority Parse(string text) => text;

        

    }
    public class PickCaseCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseCurrencyIsoCodeConverter))]
    public class PickCaseCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseCurrencyIsoCode(string s)
        {
            return new PickCaseCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickCaseChannelActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseChannelAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseChannelAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseChannelActionConverter))]
    public class PickCaseChannelAction
    {
        public static readonly string  AddasChannelPartner = "Add as Channel Partner"; 
        public static readonly string  RemoveasChannelPartner = "Remove as Channel Partner"; 
        public static readonly string  AddaBrandProduct = "Add a Brand/Product"; 
        public static readonly string  RemoveaBrandProduct = "Remove a Brand/Product"; 
        public static readonly string  AddLocation = "Add Location"; 
        public static readonly string  RemoveLocation = "Remove Location"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseChannelAction o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseChannelAction(string s)
        {
            return new PickCaseChannelAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseChannelAction Parse(string text) => text;

        

    }
    public class PickCaseFollowed3rdPartyProcessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseFollowed3rdPartyProcess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseFollowed3rdPartyProcess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseFollowed3rdPartyProcessConverter))]
    public class PickCaseFollowed3rdPartyProcess
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
        public static readonly string  NA = "N/A"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseFollowed3rdPartyProcess o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseFollowed3rdPartyProcess(string s)
        {
            return new PickCaseFollowed3rdPartyProcess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseFollowed3rdPartyProcess Parse(string text) => text;

        

    }
    public class PickCaseNACTeamAndBrandTeamsAwareConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseNACTeamAndBrandTeamsAware)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseNACTeamAndBrandTeamsAware {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseNACTeamAndBrandTeamsAwareConverter))]
    public class PickCaseNACTeamAndBrandTeamsAware
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
        public static readonly string  NA = "N/A"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseNACTeamAndBrandTeamsAware o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseNACTeamAndBrandTeamsAware(string s)
        {
            return new PickCaseNACTeamAndBrandTeamsAware {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseNACTeamAndBrandTeamsAware Parse(string text) => text;

        

    }
    public class PickCaseBrandForNACAccountRequestConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseBrandForNACAccountRequest)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseBrandForNACAccountRequest {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseBrandForNACAccountRequestConverter))]
    public class PickCaseBrandForNACAccountRequest
    {
        public static readonly string  ABCOOLAIR = "ABCOOL AIR"; 
        public static readonly string  Airmate = "Airmate"; 
        public static readonly string  AmericanMetalProducts = "American Metal Products"; 
        public static readonly string  Ameriflex = "Ameriflex"; 
        public static readonly string  Ameriflow = "Ameriflow"; 
        public static readonly string  AmeriVent = "Ameri-Vent"; 
        public static readonly string  Ampco = "Ampco"; 
        public static readonly string  CarrierKrueger = "Carrier (Krueger)"; 
        public static readonly string  Champion = "Champion"; 
        public static readonly string  Coleman = "Coleman"; 
        public static readonly string  Dayton = "Dayton"; 
        public static readonly string  EasternSheetMetal = "Eastern Sheet Metal"; 
        public static readonly string  EnERVent = "EnERVent"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  Evcon = "Evcon"; 
        public static readonly string  FacilityExplorer = "Facility Explorer"; 
        public static readonly string  FraserJohnston = "Fraser-Johnston"; 
        public static readonly string  Frick = "Frick"; 
        public static readonly string  Guardian = "Guardian"; 
        public static readonly string  HartCooley = "Hart & Cooley"; 
        public static readonly string  Heatfab = "Heatfab"; 
        public static readonly string  Hitachi = "Hitachi"; 
        public static readonly string  JohnsonControlsCommercial = "Johnson Controls - Commercial"; 
        public static readonly string  JohnsonControlsControlsProducts = "Johnson Controls - Controls Products"; 
        public static readonly string  KochFilter = "Koch Filter"; 
        public static readonly string  KochFilterofferedbyHC = "Koch Filter offered by H&C"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  Lau = "Lau"; 
        public static readonly string  LauOEM = "Lau - OEM"; 
        public static readonly string  LauParts = "Lau - Parts"; 
        public static readonly string  Lima = "Lima"; 
        public static readonly string  Luxaire = "Luxaire"; 
        public static readonly string  Metasys = "Metasys"; 
        public static readonly string  Milcor = "Milcor"; 
        public static readonly string  MillerPicking = "Miller-Picking"; 
        public static readonly string  P2000 = "P2000"; 
        public static readonly string  PANOPTIX = "PANOPTIX"; 
        public static readonly string  PEAKOEMControl = "PEAK - OEM Control"; 
        public static readonly string  PENN = "PENN"; 
        public static readonly string  PennBarry = "PennBarry"; 
        public static readonly string  Polyflue = "Polyflue"; 
        public static readonly string  PORTALSPLUS = "PORTALS PLUS"; 
        public static readonly string  Provent = "Provent"; 
        public static readonly string  Quantech = "Quantech"; 
        public static readonly string  Reliable = "Reliable"; 
        public static readonly string  ReliableProducts = "Reliable Products"; 
        public static readonly string  Rickard = "Rickard"; 
        public static readonly string  RPS = "RPS"; 
        public static readonly string  RUSJOHNSONCONTROLINC = "RUS JOHNSON CONTROL, INC"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  RuskinRooftopSystems = "Ruskin Rooftop Systems"; 
        public static readonly string  SelkirkCorp = "Selkirk Corp"; 
        public static readonly string  Skymark = "Skymark"; 
        public static readonly string  SMARTAirEnergySolutions = "SMART Air & Energy Solutions"; 
        public static readonly string  SmartFlex = "Smart Flex"; 
        public static readonly string  Source1 = "Source 1"; 
        public static readonly string  SuperiorRex = "Superior Rex"; 
        public static readonly string  SuperPro = "SuperPro"; 
        public static readonly string  SuperVent = "SuperVent"; 
        public static readonly string  SupremeFan = "Supreme Fan"; 
        public static readonly string  Tempmaster = "Tempmaster"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  TRION = "TRION"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  Verasys = "Verasys"; 
        public static readonly string  WARD = "WARD"; 
        public static readonly string  Winchester = "Winchester"; 
        public static readonly string  YorkAHU = "York - AHU"; 
        public static readonly string  YorkAirDistribution = "York - Air Distribution"; 
        public static readonly string  YorkChiller = "York - Chiller"; 
        public static readonly string  YorkChillerParts = "York - Chiller Parts"; 
        public static readonly string  YorkDFS = "York - DFS"; 
        public static readonly string  YorkResidentialLightCommercial = "York - Residential & Light Commercial"; 
        public static readonly string  YorkVRF = "York - VRF"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseBrandForNACAccountRequest o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseBrandForNACAccountRequest(string s)
        {
            return new PickCaseBrandForNACAccountRequest {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseBrandForNACAccountRequest Parse(string text) => text;

        

    }
    public class PickCaseSellingEntityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseSellingEntity)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseSellingEntity {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseSellingEntityConverter))]
    public class PickCaseSellingEntity
    {
        public static readonly string  AftermarketParts = "Aftermarket Parts"; 
        public static readonly string  AppliedSystems = "Applied Systems"; 
        public static readonly string  ControlsProductsABCS = "Controls Products ABCS"; 
        public static readonly string  ControlsProductsARW = "Controls Products ARW"; 
        public static readonly string  ControlsProductsInsideSales = "Controls Products Inside Sales"; 
        public static readonly string  ControlsProductsOEM = "Controls Products OEM"; 
        public static readonly string  ControlsProductsSSNA = "Controls Products SSNA"; 
        public static readonly string  DFS = "DFS"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  Fans = "Fans"; 
        public static readonly string  HartCooleyCommercialOEM = "Hart & Cooley Commercial / OEM"; 
        public static readonly string  HartCooleyHearthRetailCanada = "Hart & Cooley Hearth / Retail / Canada"; 
        public static readonly string  HartCooleyWholesale = "Hart & Cooley Wholesale"; 
        public static readonly string  Koch = "Koch"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  ReliableProducts = "Reliable Products"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  RuskinRooftopSystems = "Ruskin Rooftop Systems"; 
        public static readonly string  SSNAAHU = "SSNA AHU"; 
        public static readonly string  SSNAAirDistribution = "SSNA Air Distribution"; 
        public static readonly string  SSNAChillers = "SSNA Chillers"; 
        public static readonly string  SSNACommercial = "SSNA Commercial"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  Trion = "Trion"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  VRFHitachi = "VRF Hitachi"; 
        public static readonly string  VRFYork = "VRF York"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseSellingEntity o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseSellingEntity(string s)
        {
            return new PickCaseSellingEntity {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseSellingEntity Parse(string text) => text;

        

    }
    public class PickCaseHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseHistoryFieldConverter))]
    public class PickCaseHistoryField
    {
        public static readonly string  ManualAccountNamec = "Manual_Account_Name__c"; 
        public static readonly string  Account = "Account"; 
        public static readonly string  AccounttoMergeWithc = "Account_to_Merge_With__c"; 
        public static readonly string  SVMXCActualInitialResponsec = "SVMXC__Actual_Initial_Response__c"; 
        public static readonly string  SVMXCActualOnsiteResponsec = "SVMXC__Actual_Onsite_Response__c"; 
        public static readonly string  SVMXCActualResolutionc = "SVMXC__Actual_Resolution__c"; 
        public static readonly string  SVMXCActualRestorationc = "SVMXC__Actual_Restoration__c"; 
        public static readonly string  SMEUTotalBillableQtyc = "SM_EU_Total_Billable_Qty__c"; 
        public static readonly string  E2CPAdditionalBCCc = "E2CP__AdditionalBCC__c"; 
        public static readonly string  E2CPAdditionalCCc = "E2CP__AdditionalCC__c"; 
        public static readonly string  E2CPAdditionalToc = "E2CP__AdditionalTo__c"; 
        public static readonly string  AlternativeOptionsConsideredc = "Alternative_Options_Considered__c"; 
        public static readonly string  ApprovedbyBrandVPc = "Approved_by_Brand_VP__c"; 
        public static readonly string  ApprovedbyChannelVPc = "Approved_by_Channel_VP__c"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  SVMXCAutoEntitlementStatusc = "SVMXC__Auto_Entitlement_Status__c"; 
        public static readonly string  Betac = "Beta__c"; 
        public static readonly string  JCISMEUBillingStatusc = "JCI_SM_EU_Billing_Status__c"; 
        public static readonly string  SVMXCBillingTypec = "SVMXC__Billing_Type__c"; 
        public static readonly string  BillToc = "Bill_To__c"; 
        public static readonly string  SVMXCBookingWindowc = "SVMXC__Booking_Window__c"; 
        public static readonly string  Branchc = "Branch__c"; 
        public static readonly string  Brandc = "Brand__c"; 
        public static readonly string  BrandForNACAccountRequestc = "BrandForNACAccountRequest__c"; 
        public static readonly string  BrandVPc = "Brand_VP__c"; 
        public static readonly string  BusinessHours = "BusinessHours"; 
        public static readonly string  SVMXCBWDatec = "SVMXC__BW_Date__c"; 
        public static readonly string  SVMXCBWSelectedByc = "SVMXC__BW_Selected_By__c"; 
        public static readonly string  SVMXCBWSelectedOnc = "SVMXC__BW_Selected_On__c"; 
        public static readonly string  SVMXCBWSlotsBeforec = "SVMXC__BW_Slots_Before__c"; 
        public static readonly string  SVMXCBWTerritoryc = "SVMXC__BW_Territory__c"; 
        public static readonly string  SVMXCBWTimeZonec = "SVMXC__BW_Time_Zone__c"; 
        public static readonly string  JCISMEUCallerEmailc = "JCI_SM_EU_Caller_Email__c"; 
        public static readonly string  JCISMEUCallerFirstNamec = "JCI_SM_EU_Caller_First_Name__c"; 
        public static readonly string  JCISMEUCallerLastNamec = "JCI_SM_EU_Caller_Last_Name__c"; 
        public static readonly string  JCISMEUCallerPhonec = "JCI_SM_EU_Caller_Phone__c"; 
        public static readonly string  JCISMEUCallerTitlec = "JCI_SM_EU_Caller_Title__c"; 
        public static readonly string  JCISMEUCancelReasonc = "JCI_SM_EU_Cancel_Reason__c"; 
        public static readonly string  CaseAgeInBusinessHoursc = "Case_Age_In_Business_Hours__c"; 
        public static readonly string  SMEUCaseApprovalDate1c = "SM_EU_Case_Approval_Date_1__c"; 
        public static readonly string  SMEUCaseApprovalDate2c = "SM_EU_Case_Approval_Date_2__c"; 
        public static readonly string  CaseApprover1c = "Case_Approver_1__c"; 
        public static readonly string  CaseApprover2c = "Case_Approver_2__c"; 
        public static readonly string  CaseBrandc = "Case_Brand__c"; 
        public static readonly string  CaseReasonc = "Case_Reason__c"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  FLAGSViewedFlagc = "FLAGS__ViewedFlag__c"; 
        public static readonly string  FLAGSCaseTimeOffset1c = "FLAGS__CaseTimeOffset1__c"; 
        public static readonly string  FLAGSCaseTimeOffset2c = "FLAGS__CaseTimeOffset2__c"; 
        public static readonly string  FLAGSCaseTimeOffset3c = "FLAGS__CaseTimeOffset3__c"; 
        public static readonly string  FLAGSCaseTimeOffset4c = "FLAGS__CaseTimeOffset4__c"; 
        public static readonly string  FLAGSCaseFlagsBusinessHoursc = "FLAGS__CaseFlagsBusinessHours__c"; 
        public static readonly string  FLAGSCaseFlagsEscalationTime1c = "FLAGS__CaseFlagsEscalationTime1__c"; 
        public static readonly string  FLAGSCaseFlagsEscalationTime2c = "FLAGS__CaseFlagsEscalationTime2__c"; 
        public static readonly string  FLAGSCaseFlagsEscalationTime3c = "FLAGS__CaseFlagsEscalationTime3__c"; 
        public static readonly string  FLAGSCaseFlagsEscalationTime4c = "FLAGS__CaseFlagsEscalationTime4__c"; 
        public static readonly string  CaseManufacturingLocationc = "Case_Manufacturing_Location__c"; 
        public static readonly string  Origin = "Origin"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  CaseOwnerEmailc = "Case_Owner_Email__c"; 
        public static readonly string  CaseOwnerNamec = "Case_Owner_Name__c"; 
        public static readonly string  Reason = "Reason"; 
        public static readonly string  RecordType = "RecordType"; 
        public static readonly string  CaseRootCausec = "Case_Root_Cause__c"; 
        public static readonly string  CaseRootCausesc = "Case_Root_Causes__c"; 
        public static readonly string  CaseSolutionc = "Case_Solution__c"; 
        public static readonly string  CaseSolutionsc = "Case_Solutions__c"; 
        public static readonly string  Source = "Source"; 
        public static readonly string  CaseSubTypec = "Case_Sub_Type__c"; 
        public static readonly string  CaseSubTypesc = "Case_Sub_Types__c"; 
        public static readonly string  CaseSymptomc = "Case_Symptom__c"; 
        public static readonly string  CaseSymptomsc = "Case_Symptoms__c"; 
        public static readonly string  Type = "Type"; 
        public static readonly string  Categoryc = "Category__c"; 
        public static readonly string  JCISMEUCBREc = "JCI_SM_EU_CBRE__c"; 
        public static readonly string  SMEUCBREIndicatorc = "SM_EU_CBRE_Indicator__c"; 
        public static readonly string  ChangeRequestNumberc = "Change_Request_Number__c"; 
        public static readonly string  CRNumberc = "CR_Number__c"; 
        public static readonly string  ChannelActionc = "Channel_Action__c"; 
        public static readonly string  ChannelVPc = "Channel_VP__c"; 
        public static readonly string  JCISMEUCityc = "JCI_SM_EU_City__c"; 
        public static readonly string  ClaimAmountc = "Claim_Amount__c"; 
        public static readonly string  ClaimStatusc = "Claim_Status__c"; 
        public static readonly string  SVMXCClockPausedForeverc = "SVMXC__Clock_Paused_Forever__c"; 
        public static readonly string  closed = "closed"; 
        public static readonly string  IsClosedOnCreate = "IsClosedOnCreate"; 
        public static readonly string  CloseEmailandSurveysentviaCommentc = "Close_Email_and_Survey_sent_via_Comment__c"; 
        public static readonly string  Componentc = "Component__c"; 
        public static readonly string  ComponentLookupc = "Component_Lookup__c"; 
        public static readonly string  SVMXCProductc = "SVMXC__Product__c"; 
        public static readonly string  SVMXCComponentc = "SVMXC__Component__c"; 
        public static readonly string  ConnectedServicesc = "Connected_Services__c"; 
        public static readonly string  ConsofRecommendationc = "Cons_of_Recommendation__c"; 
        public static readonly string  ContactCenterQueuec = "Contact_Center_Queue__c"; 
        public static readonly string  ContactCenterTeamClosedByc = "Contact_Center_Team_Closed_By__c"; 
        public static readonly string  ContactCenterTeamOpenedByc = "Contact_Center_Team_Opened_By__c"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContacttoMergeWithc = "Contact_to_Merge_With__c"; 
        public static readonly string  JCISMEUCountryc = "JCI_SM_EU_Country__c"; 
        public static readonly string  JCISMEUCreateUpdateContactc = "JCI_SM_EU_Create_Update_Contact__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CreditCheckApprovedc = "Credit_Check_Approved__c"; 
        public static readonly string  CreditCheckDonec = "Credit_Check_Done__c"; 
        public static readonly string  CFYMarginc = "CFY_Margin__c"; 
        public static readonly string  CFYSalesc = "CFY_Sales__c"; 
        public static readonly string  CustomerPONumberc = "Customer_PO_Number__c"; 
        public static readonly string  SMEUPONumberc = "SM_EU_PO_Number__c"; 
        public static readonly string  CustomerReferenceNumberc = "Customer_Reference_Number__c"; 
        public static readonly string  Solutionc = "Solution__c"; 
        public static readonly string  CustomerWorkOrderNumberc = "Customer_Work_Order_Number__c"; 
        public static readonly string  DateTimeChangedc = "Date_Time_Changed__c"; 
        public static readonly string  DateEnteredforWarrantyc = "Date_Entered_for_Warranty__c"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  E2CPDisableEmailDistributionc = "E2CP__Disable_Email_Distribution__c"; 
        public static readonly string  Distributorsc = "Distributor_s__c"; 
        public static readonly string  DistributorAccountc = "Distributor_Account__c"; 
        public static readonly string  Divisionc = "Division__c"; 
        public static readonly string  FLAGSEnableCaseFlagsc = "FLAGS__Enable_Case_Flags__c"; 
        public static readonly string  SMEUEntitledtoServiceContractc = "SM_EU_Entitled_to_Service_Contract__c"; 
        public static readonly string  SMEUEntitlementFinalizedc = "SM_EU_Entitlement_Finalized__c"; 
        public static readonly string  Entitlement = "Entitlement"; 
        public static readonly string  SVMXCEntitlementNotesc = "SVMXC__Entitlement_Notes__c"; 
        public static readonly string  SlaStartDate = "SlaStartDate"; 
        public static readonly string  SVMXCEntitlementTypec = "SVMXC__Entitlement_Type__c"; 
        public static readonly string  Equipmentc = "Equipment__c"; 
        public static readonly string  SMEUERPIDc = "SM_EU_ERP_ID__c"; 
        public static readonly string  IsEscalated = "IsEscalated"; 
        public static readonly string  EstimatedTotalCostc = "Estimated_Total_Cost__c"; 
        public static readonly string  E2CPExtraEmailsc = "E2CP__ExtraEmails__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FirstContactResolutionc = "First_Contact_Resolution__c"; 
        public static readonly string  SMEUFixedPriceInvoicec = "SM_EU_Fixed_Price_Invoice__c"; 
        public static readonly string  SMEUFixedPriceInvoiceAmountc = "SM_EU_Fixed_Price_Invoice_Amount__c"; 
        public static readonly string  Followed3rdPartyProcessc = "Followed_3rd_Party_Process__c"; 
        public static readonly string  SMEUGLImpactDatec = "SM_EU_GL_Impact_Date__c"; 
        public static readonly string  SVMXGroupByAc = "SVMX_Group_By_A__c"; 
        public static readonly string  SVMXGroupByBc = "SVMX_Group_By_B__c"; 
        public static readonly string  SVMXGroupByCc = "SVMX_Group_By_C__c"; 
        public static readonly string  HighSalesEstc = "High_Sales_Est__c"; 
        public static readonly string  E2CPHistoryTextc = "E2CP__HistoryText__c"; 
        public static readonly string  E2CPHistoryTextIncPrivatec = "E2CP__HistoryText_Inc_Private__c"; 
        public static readonly string  SMEUHoldReasonc = "SM_EU_Hold_Reason__c"; 
        public static readonly string  ICCodec = "IC_Code__c"; 
        public static readonly string  SMEUIncidentDatec = "SM_EU_Incident_Date__c"; 
        public static readonly string  FLAGSInitialResponsec = "FLAGS__Initial_Response__c"; 
        public static readonly string  FLAGSInitialResponseBusinessHoursc = "FLAGS__Initial_Response_Business_Hours__c"; 
        public static readonly string  SVMXCInitialResponseCustomerByc = "SVMXC__Initial_Response_Customer_By__c"; 
        public static readonly string  SVMXCInitialResponseInternalByc = "SVMXC__Initial_Response_Internal_By__c"; 
        public static readonly string  SVMXCIsEntitlementPerformedc = "SVMXC__Is_Entitlement_Performed__c"; 
        public static readonly string  SMEUIsEntitlementPopulatedc = "SM_EU_Is_Entitlement_Populated__c"; 
        public static readonly string  SVMXCIsInvoiceCreatedc = "SVMXC__Is_Invoice_Created__c"; 
        public static readonly string  SMEUIsLocationUnsafec = "SM_EU_Is_Location_Unsafe__c"; 
        public static readonly string  SVMXCIsPMCasec = "SVMXC__Is_PM_Case__c"; 
        public static readonly string  SVMXCIsServiceCoveredc = "SVMXC__Is_Service_Covered__c"; 
        public static readonly string  IssueWarrantyReturnc = "Issue_Warranty_Return__c"; 
        public static readonly string  IsSurveyCreatedc = "Is_Survey_Created__c"; 
        public static readonly string  Itemc = "Item__c"; 
        public static readonly string  JCIBranchesc = "JCI_Branches__c"; 
        public static readonly string  FactoryOrderNumberc = "Factory_Order_Number__c"; 
        public static readonly string  E2CPKnowledgeBaseURLc = "E2CP__Knowledge_Base_URL__c"; 
        public static readonly string  KnowledgedBNumberc = "Knowledge_dB_Number__c"; 
        public static readonly string  SDBNumberc = "SDB_Number__c"; 
        public static readonly string  KnowledgeSubmissionc = "Knowledge_Submission__c"; 
        public static readonly string  SDBSubmissionc = "SDB_Submission__c"; 
        public static readonly string  SMEULaborHoursc = "SM_EU_Labor_Hours__c"; 
        public static readonly string  LastCommentChangec = "Last_Comment_Change__c"; 
        public static readonly string  LastStatusChangec = "Last_Status_Change__c"; 
        public static readonly string  JCISMEULeadLOBc = "JCI_SM_EU_Lead_LOB__c"; 
        public static readonly string  SMEULegacyServiceOrderNumberc = "SM_EU_Legacy_Service_Order_Number__c"; 
        public static readonly string  Productc = "Product__c"; 
        public static readonly string  Level2c = "Level2__c"; 
        public static readonly string  Level3c = "Level3__c"; 
        public static readonly string  Level4c = "Level4__c"; 
        public static readonly string  Level4Multic = "Level_4_Multi__c"; 
        public static readonly string  Level5c = "Level5__c"; 
        public static readonly string  Level6c = "Level6__c"; 
        public static readonly string  JCISMEULOBc = "JCI_SM_EU_LOB__c"; 
        public static readonly string  Locationc = "Location__c"; 
        public static readonly string  Locationsc = "Locations__c"; 
        public static readonly string  SMEULocationUnsafec = "SM_EU_Location_Unsafe__c"; 
        public static readonly string  JCISMEULockBillToc = "JCI_SM_EU_Lock_Bill_To__c"; 
        public static readonly string  LowSalesEstc = "Low_Sales_Est__c"; 
        public static readonly string  MajorCustImpactc = "Major_Cust_Impact__c"; 
        public static readonly string  ManufacturingLocationc = "Manufacturing_Location__c"; 
        public static readonly string  CCModelc = "CC_Model__c"; 
        public static readonly string  E2CPMostRecentPrivateCommentc = "E2CP__Most_Recent_Private_Comment__c"; 
        public static readonly string  E2CPMostRecentPublicCommentc = "E2CP__Most_Recent_Public_Comment__c"; 
        public static readonly string  NACTeamandBrandTeamsAwarec = "NAC_Team_and_Brand_Teams_Aware__c"; 
        public static readonly string  NavigatorAccountc = "Navigator_Account__c"; 
        public static readonly string  NavigatorContactc = "Navigator_Contact__c"; 
        public static readonly string  NxGenSRc = "NxGen_SR__c"; 
        public static readonly string  SVMXCOnsiteResponseCustomerByc = "SVMXC__Onsite_Response_Customer_By__c"; 
        public static readonly string  SVMXCOnsiteResponseInternalByc = "SVMXC__Onsite_Response_Internal_By__c"; 
        public static readonly string  SMEUOrgCodec = "SM_EU_Org_Code__c"; 
        public static readonly string  SMEUOriginalClosedDatec = "SM_EU_Original_Closed_Date__c"; 
        public static readonly string  OtherRootCausec = "Other_Root_Cause__c"; 
        public static readonly string  OtherSolutionc = "Other_Solution__c"; 
        public static readonly string  OtherSymptomsc = "Other_Symptoms__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  ownerEscalated = "ownerEscalated"; 
        public static readonly string  Parent = "Parent"; 
        public static readonly string  Partc = "Part__c"; 
        public static readonly string  PartsandDrawingslinkc = "Parts_and_Drawings_link__c"; 
        public static readonly string  SMEUPartsOrderCountc = "SM_EU_Parts_Order_Count__c"; 
        public static readonly string  PartsReturnc = "Parts_Return__c"; 
        public static readonly string  Pendingc = "Pending__c"; 
        public static readonly string  SVMXCPerformAutoEntitlementc = "SVMXC__Perform_Auto_Entitlement__c"; 
        public static readonly string  SVMXCPreferredEndTimec = "SVMXC__Preferred_End_Time__c"; 
        public static readonly string  JCISMEUPrefServiceTeamc = "JCI_SM_EU_Pref_Service_Team__c"; 
        public static readonly string  SVMXCPreferredStartTimec = "SVMXC__Preferred_Start_Time__c"; 
        public static readonly string  SVMXCPMPlanc = "SVMXC__PM_Plan__c"; 
        public static readonly string  FLAGSPreviousBusinessHoursc = "FLAGS__PreviousBusinessHours__c"; 
        public static readonly string  PFYMarginc = "PFY_Margin__c"; 
        public static readonly string  PFYSalesc = "PFY_Sales__c"; 
        public static readonly string  PreviousOwnerc = "Previous_Owner__c"; 
        public static readonly string  JCISMEUPrimaryTechnicinanc = "JCI_SM_EU_Primary_Technicinan__c"; 
        public static readonly string  Priority = "Priority"; 
        public static readonly string  Product = "Product"; 
        public static readonly string  SVMXCTopLevelc = "SVMXC__Top_Level__c"; 
        public static readonly string  ProductAssignmentc = "Product_Assignment__c"; 
        public static readonly string  ProductsSelectedc = "Products_Selected__c"; 
        public static readonly string  ProductWebToCasec = "Product_WebToCase__c"; 
        public static readonly string  SVMXCProformaInvoicec = "SVMXC__Proforma_Invoice__c"; 
        public static readonly string  SVMXCProformaInvoiceAmountc = "SVMXC__Proforma_Invoice_Amount__c"; 
        public static readonly string  ProsofRecommendationc = "Pros_of_Recommendation__c"; 
        public static readonly string  MergeReasonDeletec = "Merge_Reason_Delete__c"; 
        public static readonly string  SVMXCIsSLACalculatedc = "SVMXC__Is_SLA_Calculated__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  RecurringIssuec = "Recurring_Issue__c"; 
        public static readonly string  ReferenceNamec = "Reference_Name__c"; 
        public static readonly string  Representativesc = "Representative_s__c"; 
        public static readonly string  AcctTeamRolec = "Acct_Team_Role__c"; 
        public static readonly string  SVMXCResolutionCustomerByc = "SVMXC__Resolution_Customer_By__c"; 
        public static readonly string  JCISMEUResolutionDescriptionc = "JCI_SM_EU_Resolution_Description__c"; 
        public static readonly string  SVMXCResolutionInternalByc = "SVMXC__Resolution_Internal_By__c"; 
        public static readonly string  ResolutionMethodsc = "Resolution_Methods__c"; 
        public static readonly string  SVMXCRestorationCustomerByc = "SVMXC__Restoration_Customer_By__c"; 
        public static readonly string  SVMXCRestorationInternalByc = "SVMXC__Restoration_Internal_By__c"; 
        public static readonly string  RMANumberc = "RMA_Number__c"; 
        public static readonly string  RootCausec = "Root_Cause__c"; 
        public static readonly string  JCISMEURootCauseDescriptionc = "JCI_SM_EU_Root_Cause_Description__c"; 
        public static readonly string  RSMc = "RSM__c"; 
        public static readonly string  SalesOrderNumberc = "Sales_Order_Number__c"; 
        public static readonly string  SVMXCScheduledDatec = "SVMXC__Scheduled_Date__c"; 
        public static readonly string  JCISMEUSecondaryTechnicianc = "JCI_SM_EU_Secondary_Technician__c"; 
        public static readonly string  SellingEntityc = "Selling_Entity__c"; 
        public static readonly string  SMEUSendIntegrationc = "SM_EU_Send_Integration__c"; 
        public static readonly string  CCSerialNumberc = "CC_Serial_Number__c"; 
        public static readonly string  SVMXCServiceContractc = "SVMXC__Service_Contract__c"; 
        public static readonly string  ServiceInitiativec = "Service_Initiative__c"; 
        public static readonly string  JCISMEUServiceOfferingc = "JCI_SM_EU_Service_Offering__c"; 
        public static readonly string  SVMXCSitec = "SVMXC__Site__c"; 
        public static readonly string  SkillLevelRatingc = "Skill_Level_Rating__c"; 
        public static readonly string  SVMXCSLAClockExtensionMinutesc = "SVMXC__SLA_Clock_Extension_Minutes__c"; 
        public static readonly string  SVMXCSLAClockPausedc = "SVMXC__SLA_Clock_Paused__c"; 
        public static readonly string  SVMXCSLAClockPauseDaysc = "SVMXC__SLA_Clock_Pause_Days__c"; 
        public static readonly string  SVMXCSLAClockPauseHoursc = "SVMXC__SLA_Clock_Pause_Hours__c"; 
        public static readonly string  SVMXCSLAClockPauseMinutesc = "SVMXC__SLA_Clock_Pause_Minutes__c"; 
        public static readonly string  SVMXCSLAClockPauseReasonc = "SVMXC__SLA_Clock_Pause_Reason__c"; 
        public static readonly string  SVMXCSLAClockPauseRestartTimec = "SVMXC__SLA_Clock_Pause_Restart_Time__c"; 
        public static readonly string  SVMXCSLAClockPauseTimec = "SVMXC__SLA_Clock_Pause_Time__c"; 
        public static readonly string  SVMXCSLATermsc = "SVMXC__SLA_Terms__c"; 
        public static readonly string  ResolutionMethodc = "Resolution_Method__c"; 
        public static readonly string  Sourcec = "Source__c"; 
        public static readonly string  JCISMEUStatec = "JCI_SM_EU_State__c"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  IsStopped = "IsStopped"; 
        public static readonly string  JCISMEUStreetc = "JCI_SM_EU_Street__c"; 
        public static readonly string  JCISMEUStreetAddr2c = "JCI_SM_EU_Street_Addr2__c"; 
        public static readonly string  JCISMEUStreetAddr3c = "JCI_SM_EU_Street_Addr3__c"; 
        public static readonly string  Subcomponentc = "Subcomponent__c"; 
        public static readonly string  SubcomponentLookupc = "Subcomponent_Lookup__c"; 
        public static readonly string  Subject = "Subject"; 
        public static readonly string  Summaryc = "Summary__c"; 
        public static readonly string  SupportTypec = "Support_Type__c"; 
        public static readonly string  Symptomc = "Symptom__c"; 
        public static readonly string  Systemc = "System__c"; 
        public static readonly string  TeamGroupc = "Team_Group__c"; 
        public static readonly string  SMEUTechnicianEmailforSafetyCasec = "SM_EU_Technician_Email_for_Safety_Case__c"; 
        public static readonly string  SMEUTechnicianforSafetyCasec = "SM_EU_Technician_for_Safety_Case__c"; 
        public static readonly string  SVMXCTimetoInitialResponsec = "SVMXC__Time_to_Initial_Response__c"; 
        public static readonly string  SVMXCTimetoOnsiteResponsec = "SVMXC__Time_to_Onsite_Response__c"; 
        public static readonly string  SVMXCTimetoResolvec = "SVMXC__Time_to_Resolve__c"; 
        public static readonly string  SVMXCTimetoRestorec = "SVMXC__Time_to_Restore__c"; 
        public static readonly string  TimeWithCustomerc = "Time_With_Customer__c"; 
        public static readonly string  TimeWithLevel3c = "Time_With_Level3__c"; 
        public static readonly string  TimeWithSupportc = "Time_With_Support__c"; 
        public static readonly string  ActualTotalCostc = "Actual_Total_Cost__c"; 
        public static readonly string  SMEUTotalActualCostInventoryc = "SM_EU_Total_Actual_Cost_Inventory__c"; 
        public static readonly string  SMEUTotalActualCostLaborc = "SM_EU_Total_Actual_Cost_Labor__c"; 
        public static readonly string  SMEUTotalActualCostOtherc = "SM_EU_Total_Actual_Cost_Other__c"; 
        public static readonly string  SMEUTotalActualCostPurchasedc = "SM_EU_Total_Actual_Cost_Purchased__c"; 
        public static readonly string  SMEUTotalActualCostSubc = "SM_EU_Total_Actual_Cost_Sub__c"; 
        public static readonly string  SMEUTotalPartsOrderAmountc = "SM_EU_Total_Parts_Order_Amount__c"; 
        public static readonly string  SMEUTotalInvoiceAmountc = "SM_EU_Total_Invoice_Amount__c"; 
        public static readonly string  SMEUTotalAPInvoiceAmountc = "SM_EU_Total_AP_Invoice_Amount__c"; 
        public static readonly string  TotalPricec = "Total_Price__c"; 
        public static readonly string  Trainingc = "Training__c"; 
        public static readonly string  ContactCenterTypec = "ContactCenterType__c"; 
        public static readonly string  Typec = "Type__c"; 
        public static readonly string  CCVersionc = "CC_Version__c"; 
        public static readonly string  Versionc = "Version__c"; 
        public static readonly string  JCISMEUWarrantyc = "JCI_SM_EU_Warranty__c"; 
        public static readonly string  SVMXCWarrantyc = "SVMXC__Warranty__c"; 
        public static readonly string  WarrantyTypec = "Warranty_Type__c"; 
        public static readonly string  WarrantyVoucherNumberc = "Warranty_Voucher_Number__c"; 
        public static readonly string  WarrantyVoucherReasonc = "Warranty_Voucher_Reason__c"; 
        public static readonly string  Winc = "Win__c"; 
        public static readonly string  WinValuec = "Win_Value__c"; 
        public static readonly string  SMEUWorkOrderforSafetyCasec = "SM_EU_Work_Order_for_Safety_Case__c"; 
        public static readonly string  Year1SalesPlanc = "Year_1_Sales_Plan__c"; 
        public static readonly string  Year2SalesPlanc = "Year_2_Sales_Plan__c"; 
        public static readonly string  Year3SalesPlanc = "Year_3_Sales_Plan__c"; 
        public static readonly string  YBLMarginc = "YBL_Margin__c"; 
        public static readonly string  YBLSalesc = "YBL_Sales__c"; 
        public static readonly string  JCISMEUZipc = "JCI_SM_EU_Zip__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseHistoryField(string s)
        {
            return new PickCaseHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseHistoryField Parse(string text) => text;

        

    }
    public class PickChannelChangeBrandLeaderCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeBrandLeaderCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeBrandLeaderCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeBrandLeaderCurrencyIsoCodeConverter))]
    public class PickChannelChangeBrandLeaderCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeBrandLeaderCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeBrandLeaderCurrencyIsoCode(string s)
        {
            return new PickChannelChangeBrandLeaderCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeBrandLeaderCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickChannelChangeBrandVPCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeBrandVPCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeBrandVPCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeBrandVPCurrencyIsoCodeConverter))]
    public class PickChannelChangeBrandVPCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeBrandVPCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeBrandVPCurrencyIsoCode(string s)
        {
            return new PickChannelChangeBrandVPCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeBrandVPCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickChannelChangeGenericCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeGenericCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeGenericCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeGenericCurrencyIsoCodeConverter))]
    public class PickChannelChangeGenericCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeGenericCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeGenericCurrencyIsoCode(string s)
        {
            return new PickChannelChangeGenericCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeGenericCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickChannelChangeHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeHistoryFieldConverter))]
    public class PickChannelChangeHistoryField
    {
        public static readonly string  AccountMarketc = "Account_Market__c"; 
        public static readonly string  AccountNamec = "Account_Name__c"; 
        public static readonly string  AccountShippingLocationc = "Account_Shipping_Location__c"; 
        public static readonly string  AccountTeamMemberstobeaddedc = "Account_Team_Members_to_be_added__c"; 
        public static readonly string  AccountTeamMemberImpactedc = "Account_Team_Member_Impacted__c"; 
        public static readonly string  AccountTeamMembersImpactedIDsc = "Account_Team_Member_s_Impacted_IDs__c"; 
        public static readonly string  AlternativeOptionsConsideredc = "Alternative_Options_Considered__c"; 
        public static readonly string  FullFiscalYearRevenueEstimatec = "Full_Fiscal_Year_Revenue_Estimate__c"; 
        public static readonly string  Brandc = "Brand__c"; 
        public static readonly string  BrandRestrictionc = "Brand_Restriction__c"; 
        public static readonly string  BrandVPc = "Brand_VP__c"; 
        public static readonly string  BusinessJustificationc = "Business_Justification__c"; 
        public static readonly string  BrandLeaderc = "Brand_Leader__c"; 
        public static readonly string  BusinessSourceSystemProcessStatusc = "Business_Source_System_Process_Status__c"; 
        public static readonly string  ChannelActionc = "Channel_Action__c"; 
        public static readonly string  ChannelChangeNamec = "Channel_Change_Name__c"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  ChannelChangeProcessStatusc = "Channel_Change_Process_Status__c"; 
        public static readonly string  ChannelChangeTypec = "Channel_Change_Type__c"; 
        public static readonly string  LegalCommentsc = "Legal_Comments__c"; 
        public static readonly string  ComplianceRepc = "Compliance_Rep__c"; 
        public static readonly string  ConsofRecommendationc = "Cons_of_Recommendation__c"; 
        public static readonly string  ContractAttachedc = "Contract_Attached__c"; 
        public static readonly string  ContractStatusc = "Contract_Status__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  RevenueEstimatec = "Revenue_Estimate__c"; 
        public static readonly string  ActualPhysicalLocationAddressc = "Actual_Physical_Location_Address__c"; 
        public static readonly string  CustomerNamec = "Customer_Name__c"; 
        public static readonly string  DueDiligenceDecisionc = "Due_Diligence_Decision__c"; 
        public static readonly string  EffectiveDateofContractc = "Effective_Date_of_Contract__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  HasLegalapprovedthiscontractc = "Has_Legal_approved_this_contract__c"; 
        public static readonly string  Legalapprovedc = "Legal_approved__c"; 
        public static readonly string  Hasthecontractbeenterminatedc = "Has_the_contract_been_terminated__c"; 
        public static readonly string  ImpactedCustomersc = "Impacted_Customers__c"; 
        public static readonly string  Isbrandlinecardbeingtransferredc = "Isbrand_line_card_being_transferred__c"; 
        public static readonly string  Isthereanexistingthirdpartysellingc = "Is_there_an_existing_third_party_selling__c"; 
        public static readonly string  IstheLegalContractCompleteSignedc = "Is_the_Legal_Contract_Complete_Signed__c"; 
        public static readonly string  JCIBranchesc = "JCI_Branches__c"; 
        public static readonly string  LegalContractmodificationrequestedc = "Legal_Contract_modification_requested__c"; 
        public static readonly string  TerritoriestoAddc = "Territories_to_Add__c"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  PlanDollarsUSDc = "Plan_Dollars_USD__c"; 
        public static readonly string  CurrentAccountERPIDc = "Current_Account_ERP_ID__c"; 
        public static readonly string  CurrentAccountNamec = "Current_Account_Name__c"; 
        public static readonly string  CurrentAccountOpenGlobeIDc = "Current_Account_OpenGlobe_ID__c"; 
        public static readonly string  ProductIdsc = "Product_Ids__c"; 
        public static readonly string  Productsc = "Products__c"; 
        public static readonly string  ProsofRecommendationc = "Pros_of_Recommendation__c"; 
        public static readonly string  RecordEditablec = "Record_Editable__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  RegionalVPc = "Regional_VP__c"; 
        public static readonly string  Representativesc = "Representatives__c"; 
        public static readonly string  SalesOpsc = "Sales_Ops__c"; 
        public static readonly string  SellingEntityc = "Selling_Entity__c"; 
        public static readonly string  ShowLegalFieldsc = "Show_Legal_Fields__c"; 
        public static readonly string  ShowLegalFieldsRemovec = "Show_Legal_Fields_Remove__c"; 
        public static readonly string  SSNARepc = "SSNA_Rep__c"; 
        public static readonly string  SSNARegionalLeaderc = "SSNA_Regional_Leader__c"; 
        public static readonly string  StakeholdersReviewc = "Stakeholders_Review__c"; 
        public static readonly string  Statusc = "Status__c"; 
        public static readonly string  SubStatusc = "Sub_Status__c"; 
        public static readonly string  TerminationEffectiveDatec = "Termination_Effective_Date__c"; 
        public static readonly string  SourceERPc = "Source_ERP__c"; 
        public static readonly string  VPGMc = "VPGM__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeHistoryField(string s)
        {
            return new PickChannelChangeHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeHistoryField Parse(string text) => text;

        

    }
    public class PickChannelChangeCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeCurrencyIsoCodeConverter))]
    public class PickChannelChangeCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeCurrencyIsoCode(string s)
        {
            return new PickChannelChangeCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickChannelChangeBrandConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeBrand)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeBrand {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeBrandConverter))]
    public class PickChannelChangeBrand
    {
        public static readonly string  ABCOOLAIR = "ABCOOL AIR"; 
        public static readonly string  Airmate = "Airmate"; 
        public static readonly string  AmericanMetalProducts = "American Metal Products"; 
        public static readonly string  Ameriflex = "Ameriflex"; 
        public static readonly string  Ameriflow = "Ameriflow"; 
        public static readonly string  AmeriVent = "Ameri-Vent"; 
        public static readonly string  Ampco = "Ampco"; 
        public static readonly string  ASC = "ASC"; 
        public static readonly string  CarrierKrueger = "Carrier (Krueger)"; 
        public static readonly string  Champion = "Champion"; 
        public static readonly string  Coleman = "Coleman"; 
        public static readonly string  Dayton = "Dayton"; 
        public static readonly string  EasternSheetMetal = "Eastern Sheet Metal"; 
        public static readonly string  EnERVent = "EnERVent"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  Evcon = "Evcon"; 
        public static readonly string  FacilityExplorer = "Facility Explorer"; 
        public static readonly string  FraserJohnston = "Fraser-Johnston"; 
        public static readonly string  Frick = "Frick"; 
        public static readonly string  Guardian = "Guardian"; 
        public static readonly string  HartCooley = "Hart & Cooley"; 
        public static readonly string  Heatfab = "Heatfab"; 
        public static readonly string  Hitachi = "Hitachi"; 
        public static readonly string  JohnsonControlsCommercial = "Johnson Controls - Commercial"; 
        public static readonly string  JohnsonControlsControlsProducts = "Johnson Controls - Controls Products"; 
        public static readonly string  KochFilter = "Koch Filter"; 
        public static readonly string  KochFilterofferedbyHC = "Koch Filter offered by H&C"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  Lau = "Lau"; 
        public static readonly string  LauOEM = "Lau - OEM"; 
        public static readonly string  LauParts = "Lau - Parts"; 
        public static readonly string  Lima = "Lima"; 
        public static readonly string  Luxaire = "Luxaire"; 
        public static readonly string  Metasys = "Metasys"; 
        public static readonly string  Milcor = "Milcor"; 
        public static readonly string  MillerPicking = "Miller-Picking"; 
        public static readonly string  Others = "Others"; 
        public static readonly string  P2000 = "P2000"; 
        public static readonly string  PACE = "PACE"; 
        public static readonly string  PANOPTIX = "PANOPTIX"; 
        public static readonly string  PEAKOEMControl = "PEAK - OEM Control"; 
        public static readonly string  PENN = "PENN"; 
        public static readonly string  PennBarry = "PennBarry"; 
        public static readonly string  Polyflue = "Polyflue"; 
        public static readonly string  PORTALSPLUS = "PORTALS PLUS"; 
        public static readonly string  Provent = "Provent"; 
        public static readonly string  Quantech = "Quantech"; 
        public static readonly string  Reliable = "Reliable"; 
        public static readonly string  ReliableProducts = "Reliable Products"; 
        public static readonly string  Rickard = "Rickard"; 
        public static readonly string  RPS = "RPS"; 
        public static readonly string  RUSJOHNSONCONTROLINC = "RUS JOHNSON CONTROL, INC"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  RUSKINROOFTOPSYSTEMS = "RUSKIN ROOFTOP SYSTEMS"; 
        public static readonly string  SelkirkCorp = "Selkirk Corp"; 
        public static readonly string  Skymark = "Skymark"; 
        public static readonly string  SMARTAirEnergySolutions = "SMART Air & Energy Solutions"; 
        public static readonly string  SmartFlex = "Smart Flex"; 
        public static readonly string  Source1 = "Source 1"; 
        public static readonly string  SuperiorRex = "Superior Rex"; 
        public static readonly string  SuperPro = "SuperPro"; 
        public static readonly string  SuperVent = "SuperVent"; 
        public static readonly string  SupremeFan = "Supreme Fan"; 
        public static readonly string  Tempmaster = "Tempmaster"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  Trion = "Trion"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  Verasys = "Verasys"; 
        public static readonly string  WARD = "WARD"; 
        public static readonly string  Winchester = "Winchester"; 
        public static readonly string  YorkAHU = "York - AHU"; 
        public static readonly string  YorkAirDistribution = "York - Air Distribution"; 
        public static readonly string  YorkChiller = "York - Chiller"; 
        public static readonly string  YorkChillerParts = "York - Chiller Parts"; 
        public static readonly string  YorkDFS = "York - DFS"; 
        public static readonly string  YorkMiniVRF = "York - Mini VRF"; 
        public static readonly string  YorkResidentialLightCommercial = "York - Residential & Light Commercial"; 
        public static readonly string  YorkVRF = "York - VRF"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeBrand o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeBrand(string s)
        {
            return new PickChannelChangeBrand {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeBrand Parse(string text) => text;

        

    }
    public class PickChannelChangeBusinessSourceSystemProcessStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeBusinessSourceSystemProcessStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeBusinessSourceSystemProcessStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeBusinessSourceSystemProcessStatusConverter))]
    public class PickChannelChangeBusinessSourceSystemProcessStatus
    {
        public static readonly string  InProcess = "In Process"; 
        public static readonly string  Complete = "Complete"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeBusinessSourceSystemProcessStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeBusinessSourceSystemProcessStatus(string s)
        {
            return new PickChannelChangeBusinessSourceSystemProcessStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeBusinessSourceSystemProcessStatus Parse(string text) => text;

        

    }
    public class PickChannelChangeChannelActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeChannelAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeChannelAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeChannelActionConverter))]
    public class PickChannelChangeChannelAction
    {
        public static readonly string  AddToLineCardorAddLocation = "Add To Line Card or Add Location"; 
        public static readonly string  ChannelPartnerAddition = "Channel Partner Addition"; 
        public static readonly string  RemoveFromLineCardorRemoveLocation = "Remove From Line Card or Remove Location"; 
        public static readonly string  ChannelPartnerTermination = "Channel Partner Termination"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeChannelAction o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeChannelAction(string s)
        {
            return new PickChannelChangeChannelAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeChannelAction Parse(string text) => text;

        

    }
    public class PickChannelChangeChannelChangeProcessStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeChannelChangeProcessStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeChannelChangeProcessStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeChannelChangeProcessStatusConverter))]
    public class PickChannelChangeChannelChangeProcessStatus
    {
        public static readonly string  InProcess = "In Process"; 
        public static readonly string  Complete = "Complete"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeChannelChangeProcessStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeChannelChangeProcessStatus(string s)
        {
            return new PickChannelChangeChannelChangeProcessStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeChannelChangeProcessStatus Parse(string text) => text;

        

    }
    public class PickChannelChangeChannelChangeTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeChannelChangeType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeChannelChangeType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeChannelChangeTypeConverter))]
    public class PickChannelChangeChannelChangeType
    {
        public static readonly string  ChannelChangeRequest = "Channel Change Request"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeChannelChangeType o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeChannelChangeType(string s)
        {
            return new PickChannelChangeChannelChangeType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeChannelChangeType Parse(string text) => text;

        

    }
    public class PickChannelChangeContractAttachedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeContractAttached)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeContractAttached {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeContractAttachedConverter))]
    public class PickChannelChangeContractAttached
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeContractAttached o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeContractAttached(string s)
        {
            return new PickChannelChangeContractAttached {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeContractAttached Parse(string text) => text;

        

    }
    public class PickChannelChangeContractStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeContractStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeContractStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeContractStatusConverter))]
    public class PickChannelChangeContractStatus
    {
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Complete = "Complete"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeContractStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeContractStatus(string s)
        {
            return new PickChannelChangeContractStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeContractStatus Parse(string text) => text;

        

    }
    public class PickChannelChangeDueDiligenceDecisionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeDueDiligenceDecision)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeDueDiligenceDecision {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeDueDiligenceDecisionConverter))]
    public class PickChannelChangeDueDiligenceDecision
    {
        public static readonly string  NeedtoperformHRVDueDiligence = "Need to perform HRV Due Diligence"; 
        public static readonly string  NoneedtoperformHRVDueDiligence = "No need to perform HRV Due Diligence"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeDueDiligenceDecision o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeDueDiligenceDecision(string s)
        {
            return new PickChannelChangeDueDiligenceDecision {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeDueDiligenceDecision Parse(string text) => text;

        

    }
    public class PickChannelChangeHasLegalApprovedThisContractConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeHasLegalApprovedThisContract)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeHasLegalApprovedThisContract {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeHasLegalApprovedThisContractConverter))]
    public class PickChannelChangeHasLegalApprovedThisContract
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeHasLegalApprovedThisContract o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeHasLegalApprovedThisContract(string s)
        {
            return new PickChannelChangeHasLegalApprovedThisContract {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeHasLegalApprovedThisContract Parse(string text) => text;

        

    }
    public class PickChannelChangeHasTheContractBeenTerminatedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeHasTheContractBeenTerminated)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeHasTheContractBeenTerminated {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeHasTheContractBeenTerminatedConverter))]
    public class PickChannelChangeHasTheContractBeenTerminated
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeHasTheContractBeenTerminated o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeHasTheContractBeenTerminated(string s)
        {
            return new PickChannelChangeHasTheContractBeenTerminated {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeHasTheContractBeenTerminated Parse(string text) => text;

        

    }
    public class PickChannelChangeIsTheLegalContractCompleteSignedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeIsTheLegalContractCompleteSigned)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeIsTheLegalContractCompleteSigned {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeIsTheLegalContractCompleteSignedConverter))]
    public class PickChannelChangeIsTheLegalContractCompleteSigned
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeIsTheLegalContractCompleteSigned o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeIsTheLegalContractCompleteSigned(string s)
        {
            return new PickChannelChangeIsTheLegalContractCompleteSigned {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeIsTheLegalContractCompleteSigned Parse(string text) => text;

        

    }
    public class PickChannelChangeIsThereAnExistingThirdPartySellingConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeIsThereAnExistingThirdPartySelling)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeIsThereAnExistingThirdPartySelling {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeIsThereAnExistingThirdPartySellingConverter))]
    public class PickChannelChangeIsThereAnExistingThirdPartySelling
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeIsThereAnExistingThirdPartySelling o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeIsThereAnExistingThirdPartySelling(string s)
        {
            return new PickChannelChangeIsThereAnExistingThirdPartySelling {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeIsThereAnExistingThirdPartySelling Parse(string text) => text;

        

    }
    public class PickChannelChangeIsbrandLineCardBeingTransferredConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeIsbrandLineCardBeingTransferred)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeIsbrandLineCardBeingTransferred {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeIsbrandLineCardBeingTransferredConverter))]
    public class PickChannelChangeIsbrandLineCardBeingTransferred
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeIsbrandLineCardBeingTransferred o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeIsbrandLineCardBeingTransferred(string s)
        {
            return new PickChannelChangeIsbrandLineCardBeingTransferred {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeIsbrandLineCardBeingTransferred Parse(string text) => text;

        

    }
    public class PickChannelChangeLegalContractModificationRequestedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeLegalContractModificationRequested)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeLegalContractModificationRequested {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeLegalContractModificationRequestedConverter))]
    public class PickChannelChangeLegalContractModificationRequested
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeLegalContractModificationRequested o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeLegalContractModificationRequested(string s)
        {
            return new PickChannelChangeLegalContractModificationRequested {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeLegalContractModificationRequested Parse(string text) => text;

        

    }
    public class PickChannelChangeLegalApprovedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeLegalApproved)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeLegalApproved {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeLegalApprovedConverter))]
    public class PickChannelChangeLegalApproved
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeLegalApproved o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeLegalApproved(string s)
        {
            return new PickChannelChangeLegalApproved {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeLegalApproved Parse(string text) => text;

        

    }
    public class PickChannelChangeSellingEntityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeSellingEntity)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeSellingEntity {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeSellingEntityConverter))]
    public class PickChannelChangeSellingEntity
    {
        public static readonly string  AftermarketParts = "Aftermarket Parts"; 
        public static readonly string  AirFiltration = "Air Filtration"; 
        public static readonly string  AppliedSystems = "Applied Systems"; 
        public static readonly string  ASC = "ASC"; 
        public static readonly string  BSNA = "BSNA"; 
        public static readonly string  ControlsProductsBSNA = "Controls Products – BSNA"; 
        public static readonly string  ControlsProductsIndependent = "Controls Products - Independent"; 
        public static readonly string  ControlsProductsInsideSales = "Controls Products - Inside Sales"; 
        public static readonly string  ControlsProductsOEM = "Controls Products – OEM"; 
        public static readonly string  DFS = "DFS"; 
        public static readonly string  Fans = "Fans"; 
        public static readonly string  HartCooleyCommercial = "Hart & Cooley Commercial"; 
        public static readonly string  HartCooleyHearthRetail = "Hart & Cooley Hearth / Retail"; 
        public static readonly string  HartCooleyWholesale = "Hart & Cooley Wholesale"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  VRF = "VRF"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeSellingEntity o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeSellingEntity(string s)
        {
            return new PickChannelChangeSellingEntity {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeSellingEntity Parse(string text) => text;

        

    }
    public class PickChannelChangeStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeStatusConverter))]
    public class PickChannelChangeStatus
    {
        public static readonly string  New = "New"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Approved = "Approved"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Completed = "Completed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeStatus(string s)
        {
            return new PickChannelChangeStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeStatus Parse(string text) => text;

        

    }
    public class PickChannelChangeSubStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelChangeSubStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelChangeSubStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelChangeSubStatusConverter))]
    public class PickChannelChangeSubStatus
    {
        public static readonly string  BrandVPApproved = "Brand VP Approved"; 
        public static readonly string  BrandVPRejected = "Brand VP Rejected"; 
        public static readonly string  BrandVPAgrees = "Brand VP Agrees"; 
        public static readonly string  BrandVPDisagrees = "Brand VP Disagrees"; 
        public static readonly string  RegionalVPApproved = "Regional VP Approved"; 
        public static readonly string  RegionalVPRejected = "Regional VP Rejected"; 
        public static readonly string  BrandLeadersApproved = "Brand Leaders Approved"; 
        public static readonly string  BrandLeadersRejected = "Brand Leaders Rejected"; 
        public static readonly string  ComplianceApproved = "Compliance Approved"; 
        public static readonly string  ComplianceRejected = "Compliance Rejected"; 
        public static readonly string  VPGMApproved = "VPGM Approved"; 
        public static readonly string  VPGMRejected = "VPGM Rejected"; 
        public static readonly string  AutoApprove = "Auto Approve"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelChangeSubStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelChangeSubStatus(string s)
        {
            return new PickChannelChangeSubStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelChangeSubStatus Parse(string text) => text;

        

    }
    public class PickChannelLineCardDetailsCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelLineCardDetailsCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelLineCardDetailsCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelLineCardDetailsCurrencyIsoCodeConverter))]
    public class PickChannelLineCardDetailsCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelLineCardDetailsCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelLineCardDetailsCurrencyIsoCode(string s)
        {
            return new PickChannelLineCardDetailsCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelLineCardDetailsCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickChannelLineCardCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelLineCardCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelLineCardCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelLineCardCurrencyIsoCodeConverter))]
    public class PickChannelLineCardCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelLineCardCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelLineCardCurrencyIsoCode(string s)
        {
            return new PickChannelLineCardCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelLineCardCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickChannelCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickChannelCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickChannelCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickChannelCurrencyIsoCodeConverter))]
    public class PickChannelCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickChannelCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickChannelCurrencyIsoCode(string s)
        {
            return new PickChannelCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickChannelCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickContactSalutationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactSalutation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactSalutation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactSalutationConverter))]
    public class PickContactSalutation
    {
        public static readonly string  Mr = "Mr."; 
        public static readonly string  Ms = "Ms."; 
        public static readonly string  Mrs = "Mrs."; 
        public static readonly string  Dr = "Dr."; 
        public static readonly string  Miss = "Miss"; 
        public static readonly string  Father = "Father"; 
        public static readonly string  Honorable = "Honorable"; 
        public static readonly string  Reverend = "Reverend"; 
        public static readonly string  Sir = "Sir"; 
        public static readonly string  M = "M."; 
        public static readonly string  Melle = "Melle"; 
        public static readonly string  Mgr = "Mgr"; 
        public static readonly string  Mme = "Mme"; 
        public static readonly string  Père = "Père"; 
        public static readonly string  Révérend = "Révérend"; 
        public static readonly string  Don = "Don"; 
        public static readonly string  Doña = "Doña"; 
        public static readonly string  Doctor = "Doctor"; 
        public static readonly string  Doctora = "Doctora"; 
        public static readonly string  Profesor = "Profesor"; 
        public static readonly string  Profesora = "Profesora"; 
        public static readonly string  Señor = "Señor"; 
        public static readonly string  Señora = "Señora"; 
        public static readonly string  Señorita = "Señorita"; 
        public static readonly string  Prof = "Prof."; 
        public static readonly string  Lic = "Lic."; 
        public static readonly string  Ing = "Ing."; 
        public static readonly string  Eng = "Eng."; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactSalutation o)
        {
            return o.Value;
        }

        public static implicit operator PickContactSalutation(string s)
        {
            return new PickContactSalutation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactSalutation Parse(string text) => text;

        

    }
    public class PickContactOtherStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactOtherStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactOtherStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactOtherStateCodeConverter))]
    public class PickContactOtherStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactOtherStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContactOtherStateCode(string s)
        {
            return new PickContactOtherStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactOtherStateCode Parse(string text) => text;

        

    }
    public class PickContactOtherCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactOtherCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactOtherCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactOtherCountryCodeConverter))]
    public class PickContactOtherCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactOtherCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContactOtherCountryCode(string s)
        {
            return new PickContactOtherCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactOtherCountryCode Parse(string text) => text;

        

    }
    public class PickContactMailingStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactMailingStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactMailingStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactMailingStateCodeConverter))]
    public class PickContactMailingStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactMailingStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContactMailingStateCode(string s)
        {
            return new PickContactMailingStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactMailingStateCode Parse(string text) => text;

        

    }
    public class PickContactMailingCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactMailingCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactMailingCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactMailingCountryCodeConverter))]
    public class PickContactMailingCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactMailingCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContactMailingCountryCode(string s)
        {
            return new PickContactMailingCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactMailingCountryCode Parse(string text) => text;

        

    }
    public class PickContactLeadSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactLeadSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactLeadSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactLeadSourceConverter))]
    public class PickContactLeadSource
    {
        public static readonly string _121SecuritySummit = "121 Security Summit"; 
        public static readonly string  AcuityBrands = "Acuity Brands"; 
        public static readonly string  AHR2016 = "AHR 2016"; 
        public static readonly string  Backlog = "Backlog"; 
        public static readonly string  BestGuess = "Best Guess"; 
        public static readonly string  BidClerkcom = "BidClerk.com"; 
        public static readonly string  BranchFederalGrowthInitiative = "Branch Federal Growth Initiative"; 
        public static readonly string  CCIClintonClimateInitiative = "CCI (Clinton Climate Initiative)"; 
        public static readonly string  ChillerTurnkeyRetrofit = "Chiller Turnkey Retrofit"; 
        public static readonly string  Competition = "Competition"; 
        public static readonly string  ConstructionJournal = "Construction Journal"; 
        public static readonly string  ConsultingEngineerAccountRelationship = "Consulting Engineer Account Relationship"; 
        public static readonly string  ContractorAccountRelationship = "Contractor Account Relationship"; 
        public static readonly string  CooperLighting = "Cooper Lighting"; 
        public static readonly string  CorporateClients = "Corporate Clients"; 
        public static readonly string  CoSell = "Co-Sell"; 
        public static readonly string  CREE = "CREE"; 
        public static readonly string  Customer = "Customer"; 
        public static readonly string  DigitalMarketing = "Digital Marketing"; 
        public static readonly string  DigitalMarketingusingLean = "Digital Marketing using Lean"; 
        public static readonly string  DodgeReports = "Dodge Reports"; 
        public static readonly string  EnergySolutions = "Energy Solutions"; 
        public static readonly string  ENGOPSCustomerLead = "ENG/OPS Customer Lead"; 
        public static readonly string  Engineer = "Engineer"; 
        public static readonly string  ExternalReferral = "External Referral"; 
        public static readonly string  FacilityDude = "FacilityDude"; 
        public static readonly string  FLSP = "FLSP"; 
        public static readonly string  FWDodge = "FW Dodge"; 
        public static readonly string  GCWebsite = "GC Website"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  Gexpro = "Gexpro"; 
        public static readonly string  Glenigans = "Glenigan's"; 
        public static readonly string  Graybar = "Graybar"; 
        public static readonly string  GWS = "GWS"; 
        public static readonly string  HealthcareEnvironmentOptimization = "Healthcare Environment Optimization"; 
        public static readonly string  IBM = "IBM"; 
        public static readonly string  InboundCalls = "Inbound - Calls"; 
        public static readonly string  InboundEmail = "Inbound - Email"; 
        public static readonly string  InboundForm = "Inbound - Form"; 
        public static readonly string  InboundTradeShow = "Inbound - Trade Show"; 
        public static readonly string  LATIBTLM = "LAT IBT L&M"; 
        public static readonly string  LATIBTNewPSA = "LAT IBT New PSA"; 
        public static readonly string  LATIBTNewPSAControls = "LAT IBT New PSA Controls"; 
        public static readonly string  LATIBTNewPSARefrigeration = "LAT IBT New PSA Refrigeration"; 
        public static readonly string  LATIBTRetrofitControls = "LAT IBT Retrofit Controls"; 
        public static readonly string  LATIBTRetrofitLTC = "LAT IBT Retrofit LTC"; 
        public static readonly string  LATIBTRetrofitRefrigeration = "LAT IBT Retrofit Refrigeration"; 
        public static readonly string  LATIBTRetrofitSTC = "LAT IBT Retrofit STC"; 
        public static readonly string  LATLMorPrimeRetrofitFrickControlPanelUpgrade = "LAT L&M or Prime Retrofit / Frick Control Panel Upgrade"; 
        public static readonly string  LATNonIBTSTCReplacement = "LAT Non IBT STC Replacement"; 
        public static readonly string  LATOptispeedVSDRetrofitCompetitorChiller = "LAT Optispeed (VSD)Retrofit - Competitor Chiller"; 
        public static readonly string  LATOptispeedVSDRetrofitYorkChiller = "LAT Optispeed (VSD)Retrofit - York Chiller"; 
        public static readonly string  LATOptiviewControlPanelCompetitorChiller = "LAT Optiview Control Panel - Competitor Chiller"; 
        public static readonly string  LATOptiviewControlPanelYorkChiller = "LAT Optiview Control Panel - York Chiller"; 
        public static readonly string  LATPrimeRetrofitACScrewCompressorReplacementExchange = "LAT Prime Retrofit /AC Screw Compressor Replacement/Exchange"; 
        public static readonly string  LATPrimeRetrofitAircooledChillerCoilChange = "LAT Prime Retrofit / Air-cooled Chiller Coil Change"; 
        public static readonly string  LATPrimeRetrofitDXCompressorOverhaulReplacement = "LAT Prime Retrofit / DX Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitFSUpgrade = "LAT Prime Retrofit / F&S Upgrade"; 
        public static readonly string  LATPrimeRetrofitFrickCompressorOverhaulReplacement = "LAT Prime Retrofit / Frick Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitNonIBTLTCReplacement = "LAT Prime Retrofit / Non IBT LTC Replacement"; 
        public static readonly string  LATSabroeCompressorOverhaul = "LAT Sabroe Compressor Overhaul"; 
        public static readonly string  LATUnisabPanelUpgrade = "LAT Unisab Panel Upgrade"; 
        public static readonly string  LATYKMotorMonitoring = "LAT YK Motor Monitoring"; 
        public static readonly string  LATYSScrewCompresorReplacementExchange = "LAT YS Screw Compresor Replacement / Exchange"; 
        public static readonly string  LeadPass = "Lead Pass"; 
        public static readonly string  LeanEnergyAnalysis = "Lean Energy Analysis"; 
        public static readonly string  LEEDFullProject = "LEED - Full Project"; 
        public static readonly string  LEEDPartialProject = "LEED - Partial Project"; 
        public static readonly string  LocalTargeting = "Local Targeting"; 
        public static readonly string  MakeYourBuildingsWork = "Make Your Buildings Work"; 
        public static readonly string  MCEmail = "MC E-mail"; 
        public static readonly string  MCFax = "MC Fax"; 
        public static readonly string  MCPhoneCall = "MC Phone Call"; 
        public static readonly string  MCWebsite = "MC Website"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  MidAtlanticBuildersExchange = "Mid-Atlantic Builders Exchange"; 
        public static readonly string  MSC = "MSC"; 
        public static readonly string  MUMS = "MUMS"; 
        public static readonly string  NationalAccounts = "National Accounts"; 
        public static readonly string  NationalSales = "National Sales"; 
        public static readonly string  NetProspex = "NetProspex"; 
        public static readonly string  NorthAmericanTradeShows = "North American Trade Shows"; 
        public static readonly string  Operations = "Operations"; 
        public static readonly string  OracleEquipment = "Oracle Equipment"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  OtherSource = "Other Source"; 
        public static readonly string  OwnerAccountRelationship = "Owner Account Relationship"; 
        public static readonly string  P2000V5Upgrade = "P2000 V5 Upgrade"; 
        public static readonly string  Partner = "Partner"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  Pastquotelostopportunity = "Past quote /lost opportunity"; 
        public static readonly string  Philips = "Philips"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PipelineJumpstart = "Pipeline Jumpstart"; 
        public static readonly string  PipelineJumpstartusingLean = "Pipeline Jumpstart using Lean"; 
        public static readonly string  ProactiveSales = "Proactive Sales"; 
        public static readonly string  PublicInformationWebTradeShowMedia = "Public Information(Web,Trade Show,Media)"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  RFIRFP = "RFI/RFP"; 
        public static readonly string  Sales = "Sales"; 
        public static readonly string  SalesStaff = "Sales Staff"; 
        public static readonly string  SCCNewPSA = "SCC New PSA"; 
        public static readonly string  SCCPSARenewal = "SCC PSA Renewal"; 
        public static readonly string  SchneiderElectric = "Schneider Electric"; 
        public static readonly string  SchoolDude = "SchoolDude"; 
        public static readonly string  Seminar = "Seminar"; 
        public static readonly string  Service = "Service"; 
        public static readonly string  ServiceGeneratedLead = "Service Generated Lead"; 
        public static readonly string  ServiceMarketingLead = "Service Marketing Lead"; 
        public static readonly string  ServiceMarketingLead5 = "Service Marketing Lead (5)"; 
        public static readonly string  ServiceTelemarketingLead = "Service Telemarketing Lead"; 
        public static readonly string  ServiceTelemarketingLeadJ = "Service Telemarketing Lead (J)"; 
        public static readonly string  SilverBulletPerformanceInfrastructure = "Silver Bullet Performance Infrastructure"; 
        public static readonly string  SolutionsDigitalMarketing = "Solutions Digital Marketing"; 
        public static readonly string  SubContract = "Sub-Contract"; 
        public static readonly string  SystemsControlsHVACIR = "Systems (Controls, HVAC, IR)"; 
        public static readonly string  TechnicalAssistant = "Technical Assistant"; 
        public static readonly string  TMEMail = "TM E-Mail"; 
        public static readonly string  TMFax = "TM Fax"; 
        public static readonly string  TMPhoneCall = "TM Phone Call"; 
        public static readonly string  TMTakeOff = "TM Take-Off"; 
        public static readonly string  TopDownBottomUpTargetList = "Top Down Bottom Up Target List"; 
        public static readonly string  TradeShow = "Trade Show"; 
        public static readonly string  TradeshowLeadPerformanceInfrastructure = "Tradeshow Lead Performance Infrastructure"; 
        public static readonly string  UKAIPServiceoffering = "UK - AIP Service offering"; 
        public static readonly string  UKLeadGeneration = "UK Lead Generation"; 
        public static readonly string  Unsolicited = "Unsolicited"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  Vantage = "Vantage"; 
        public static readonly string  Web = "Web"; 
        public static readonly string  WebCampaign = "Web Campaign"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactLeadSource o)
        {
            return o.Value;
        }

        public static implicit operator PickContactLeadSource(string s)
        {
            return new PickContactLeadSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactLeadSource Parse(string text) => text;

        

    }
    public class PickContactCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactCurrencyIsoCodeConverter))]
    public class PickContactCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContactCurrencyIsoCode(string s)
        {
            return new PickContactCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickContactInfluenceLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactInfluenceLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactInfluenceLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactInfluenceLevelConverter))]
    public class PickContactInfluenceLevel
    {
        public static readonly string  Low = "Low"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  High = "High"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactInfluenceLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickContactInfluenceLevel(string s)
        {
            return new PickContactInfluenceLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactInfluenceLevel Parse(string text) => text;

        

    }
    public class PickContactPreferredContactMethodConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactPreferredContactMethod)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactPreferredContactMethod {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactPreferredContactMethodConverter))]
    public class PickContactPreferredContactMethod
    {
        public static readonly string  Email = "Email"; 
        public static readonly string  Phone = "Phone"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactPreferredContactMethod o)
        {
            return o.Value;
        }

        public static implicit operator PickContactPreferredContactMethod(string s)
        {
            return new PickContactPreferredContactMethod {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactPreferredContactMethod Parse(string text) => text;

        

    }
    public class PickContactReasonForInactivationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactReasonForInactivation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactReasonForInactivation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactReasonForInactivationConverter))]
    public class PickContactReasonForInactivation
    {
        public static readonly string  LeftOrganization = "Left Organization"; 
        public static readonly string  ChangedRole = "Changed Role"; 
        public static readonly string  Retired = "Retired"; 
        public static readonly string  Deceased = "Deceased"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactReasonForInactivation o)
        {
            return o.Value;
        }

        public static implicit operator PickContactReasonForInactivation(string s)
        {
            return new PickContactReasonForInactivation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactReasonForInactivation Parse(string text) => text;

        

    }
    public class PickContactRelationshipStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactRelationshipStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactRelationshipStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactRelationshipStatusConverter))]
    public class PickContactRelationshipStatus
    {
        public static readonly string  Excellent = "Excellent"; 
        public static readonly string  Good = "Good"; 
        public static readonly string  Fair = "Fair"; 
        public static readonly string  Poor = "Poor"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactRelationshipStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickContactRelationshipStatus(string s)
        {
            return new PickContactRelationshipStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactRelationshipStatus Parse(string text) => text;

        

    }
    public class PickContactFunctionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactFunction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactFunction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactFunctionConverter))]
    public class PickContactFunction
    {
        public static readonly string  Administration = "Administration"; 
        public static readonly string  BranchManager = "Branch Manager"; 
        public static readonly string  CounterSales = "Counter Sales"; 
        public static readonly string  CustomerService = "Customer Service"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Estimator = "Estimator"; 
        public static readonly string  FinanceAccounting = "Finance & Accounting"; 
        public static readonly string  InformationTechnology = "Information Technology"; 
        public static readonly string  InsideSales = "Inside Sales"; 
        public static readonly string  Marketing = "Marketing"; 
        public static readonly string  Management = "Management"; 
        public static readonly string  OutsideSales = "Outside Sales"; 
        public static readonly string  PartsSales = "Parts Sales"; 
        public static readonly string  President = "President"; 
        public static readonly string  ProjectManager = "Project Manager"; 
        public static readonly string  Purchasing = "Purchasing"; 
        public static readonly string  Warehouse = "Warehouse"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactFunction o)
        {
            return o.Value;
        }

        public static implicit operator PickContactFunction(string s)
        {
            return new PickContactFunction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactFunction Parse(string text) => text;

        

    }
    public class PickContactPrimaryContactConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactPrimaryContact)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactPrimaryContact {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactPrimaryContactConverter))]
    public class PickContactPrimaryContact
    {
        public static readonly string  Yes = "Yes"; 
        public static readonly string  No = "No"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactPrimaryContact o)
        {
            return o.Value;
        }

        public static implicit operator PickContactPrimaryContact(string s)
        {
            return new PickContactPrimaryContact {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactPrimaryContact Parse(string text) => text;

        

    }
    public class PickContactEventsSelectedEventsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactEventsSelectedEvents)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactEventsSelectedEvents {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactEventsSelectedEventsConverter))]
    public class PickContactEventsSelectedEvents
    {
        public static readonly string  AustriaCustomerRoadshow = "Austria - Customer Roadshow"; 
        public static readonly string  BelgiumVDTVCongres = "Belgium - VDTV Congres"; 
        public static readonly string  CantonEnshrinementWeekendFY17 = "Canton Enshrinement Weekend – FY17"; 
        public static readonly string  DenmarkDanFish = "Denmark - DanFish"; 
        public static readonly string  DenmarkDanskFjermvarmesLandsmode = "Denmark - Dansk Fjermvarmes Landsmode"; 
        public static readonly string  DenmarkFSTAArsmode = "Denmark - FSTA Arsmode"; 
        public static readonly string  FranceCFIA = "France - CFIA"; 
        public static readonly string  FranceCFIADinner = "France - CFIA Dinner"; 
        public static readonly string  FranceEuronaval = "France - Euronaval"; 
        public static readonly string  FranceIBS = "France - IBS"; 
        public static readonly string  FranceInnovationEnergyForum = "France - Innovation & Energy Forum"; 
        public static readonly string  FranceItechmer2017 = "France - Itechmer 2017"; 
        public static readonly string  GermanyChillventa = "Germany - Chillventa"; 
        public static readonly string  GermanyChristmasTreeevent = "Germany - Christmas Tree event"; 
        public static readonly string  GermanyHannoverMesse = "Germany - Hannover Messe"; 
        public static readonly string  GermanyISH = "Germany - ISH"; 
        public static readonly string  GermanyLightandbuilding = "Germany - Light and building"; 
        public static readonly string  GermanySMM = "Germany - SMM"; 
        public static readonly string  GermanyTannenbaumaktion = "Germany - Tannenbaumaktion"; 
        public static readonly string  InternalContractorsevent = "Internal - Contractors event"; 
        public static readonly string  InternalECXSurveyFY17 = "Internal - ECX Survey FY17"; 
        public static readonly string  ItalyAicarr = "Italy - Aicarr"; 
        public static readonly string  ItalyMostraConvegno = "Italy - Mostra Convegno"; 
        public static readonly string  NetherlandsBuildingG100 = "Netherlands - Building G100"; 
        public static readonly string  NetherlandsNCGA = "Netherlands - NCGA"; 
        public static readonly string  NetherlandsNieuwsbrief = "Netherlands - Nieuwsbrief"; 
        public static readonly string  NetherlandsPrijslijst = "Netherlands - Prijslijst"; 
        public static readonly string  NorwayNewsletterBMS = "Norway - Newsletter BMS"; 
        public static readonly string  NorwayNorfishing = "Norway - Norfishing"; 
        public static readonly string  SingaporeAPM = "Singapore - APM"; 
        public static readonly string  SpainAtmosphere = "Spain - Atmosphere"; 
        public static readonly string  SSNAExecutiveForumMastersFY16 = "SSNA Executive Forum – Masters – FY16"; 
        public static readonly string  SSNAExecutiveForumMastersFY17 = "SSNA Executive Forum – Masters – FY17"; 
        public static readonly string  SSNAExecutiveForumPGAFY15 = "SSNA Executive Forum – PGA – FY15"; 
        public static readonly string  SSNAExecutiveForumUSOpenFY17 = "SSNA Executive Forum – US Open FY17"; 
        public static readonly string  SSNAExecutiveRoundTableMCAAFY17 = "SSNA Executive Round Table – MCAA FY17"; 
        public static readonly string  SwitzerlandIneltecBasel = "Switzerland - Ineltec Basel"; 
        public static readonly string  SwitzerlandSwissbauBasel = "Switzerland - Swissbau Basel"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactEventsSelectedEvents o)
        {
            return o.Value;
        }

        public static implicit operator PickContactEventsSelectedEvents(string s)
        {
            return new PickContactEventsSelectedEvents {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactEventsSelectedEvents Parse(string text) => text;

        

    }
    public class PickContactHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactHistoryFieldConverter))]
    public class PickContactHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  IsActiveInactivec = "Is_Active_Inactive__c"; 
        public static readonly string  EmploymentStatusc = "Employment_Status__c"; 
        public static readonly string  JCIAddressc = "JCI_Address__c"; 
        public static readonly string  AssistantName = "AssistantName"; 
        public static readonly string  AssistantPhone = "AssistantPhone"; 
        public static readonly string  BasicDistributionc = "Basic_Distribution__c"; 
        public static readonly string  Birthdate = "Birthdate"; 
        public static readonly string  JCIBranchcc = "JCI_Branch_c__c"; 
        public static readonly string  JCIBranchNumberc = "JCI_Branch_Number__c"; 
        public static readonly string  CCRegistrationCodec = "CC_Registration_Code__c"; 
        public static readonly string  CommunicationStylec = "Communication_Style__c"; 
        public static readonly string  ccrzCompanyNamec = "ccrz__CompanyName__c"; 
        public static readonly string  ccrzCompanyTypec = "ccrz__CompanyType__c"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  ContactLegacyIDc = "Contact_Legacy_ID__c"; 
        public static readonly string  contactMerged = "contactMerged"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  RecordType = "RecordType"; 
        public static readonly string  ConstructionPtsCPLinkc = "ConstructionPts__CPLink__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  contactCreatedFromLead = "contactCreatedFromLead"; 
        public static readonly string  CustomerMailingc = "Customer_Mailing__c"; 
        public static readonly string  CustomerTypesc = "Customer_Types__c"; 
        public static readonly string  DBEmailc = "D_B_Email__c"; 
        public static readonly string  DBPhonec = "D_B_Phone__c"; 
        public static readonly string  Jigsaw = "Jigsaw"; 
        public static readonly string  DeleteReasonc = "Delete_Reason__c"; 
        public static readonly string  Department = "Department"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  DoNotCall = "DoNotCall"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  EmailBouncedDate = "EmailBouncedDate"; 
        public static readonly string  EmailBouncedReason = "EmailBouncedReason"; 
        public static readonly string  HasOptedOutOfEmail = "HasOptedOutOfEmail"; 
        public static readonly string  EUOrgIDc = "EU_Org_ID__c"; 
        public static readonly string  EventsMethodofinvitec = "Events_Method_of_invite__c"; 
        public static readonly string  EventsSelectedEventsc = "Events_Selected_Events__c"; 
        public static readonly string  Expertisec = "Expertise__c"; 
        public static readonly string  Extensionc = "Extension__c"; 
        public static readonly string  ExternalIDc = "External_ID__c"; 
        public static readonly string  Fax = "Fax"; 
        public static readonly string  HasOptedOutOfFax = "HasOptedOutOfFax"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FirstNamec = "First_Name__c"; 
        public static readonly string  FirstName = "FirstName"; 
        public static readonly string  Functionc = "Function__c"; 
        public static readonly string  GLASPromoEmailsc = "GLAS_Promo_Emails__c"; 
        public static readonly string  piutmcampaignc = "pi__utm_campaign__c"; 
        public static readonly string  piutmcontentc = "pi__utm_content__c"; 
        public static readonly string  piutmmediumc = "pi__utm_medium__c"; 
        public static readonly string  piutmsourcec = "pi__utm_source__c"; 
        public static readonly string  piutmtermc = "pi__utm_term__c"; 
        public static readonly string  HasServiceContractc = "Has_Service_Contract__c"; 
        public static readonly string  HobbiesLikesInterestsc = "Hobbies_Likes_Interests__c"; 
        public static readonly string  HomePhone = "HomePhone"; 
        public static readonly string  InfluenceLevelc = "Influence_Level__c"; 
        public static readonly string  Interestsc = "Interests__c"; 
        public static readonly string  InvitationCodec = "Invitation_Code__c"; 
        public static readonly string  IsTycoContactc = "Is_Tyco_Contact__c"; 
        public static readonly string  JCIAddressCityc = "JCI_Address_City__c"; 
        public static readonly string  JCIAddressCountryc = "JCI_Address_Country__c"; 
        public static readonly string  JCIAddressPostalCodec = "JCI_Address_Postal_Code__c"; 
        public static readonly string  JCIAddressStatec = "JCI_Address_State__c"; 
        public static readonly string  JCIFriendlyc = "JCI_Friendly__c"; 
        public static readonly string  JCITeamRgnc = "JCI_Team_Rgn__c"; 
        public static readonly string  AcuerdoCURLastSiTRequestDatec = "AcuerdoCUR__LastSiTRequestDate__c"; 
        public static readonly string  AcuerdoCURLastSiTUpdateDatec = "AcuerdoCUR__LastSiTUpdateDate__c"; 
        public static readonly string  LastNamec = "Last_Name__c"; 
        public static readonly string  LastName = "LastName"; 
        public static readonly string  contactUpdatedByLead = "contactUpdatedByLead"; 
        public static readonly string  LeadSource = "LeadSource"; 
        public static readonly string  LevelofContactc = "Level_of_Contact__c"; 
        public static readonly string  LocatedInc = "Located_In__c"; 
        public static readonly string  locationIdhackc = "locationIdhack__c"; 
        public static readonly string  MailingAddress = "MailingAddress"; 
        public static readonly string  MailingCity = "MailingCity"; 
        public static readonly string  MailingCountry = "MailingCountry"; 
        public static readonly string  MailingCountryCode = "MailingCountryCode"; 
        public static readonly string  MailingGeocodeAccuracy = "MailingGeocodeAccuracy"; 
        public static readonly string  MailingLatitude = "MailingLatitude"; 
        public static readonly string  MailingLongitude = "MailingLongitude"; 
        public static readonly string  MailingState = "MailingState"; 
        public static readonly string  MailingStateCode = "MailingStateCode"; 
        public static readonly string  MailingStreet = "MailingStreet"; 
        public static readonly string  MailingPostalCode = "MailingPostalCode"; 
        public static readonly string  Managerc = "Manager__c"; 
        public static readonly string  MiddleInitc = "Middle_Init__c"; 
        public static readonly string  MobilePhone = "MobilePhone"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  piNeedsScoreSyncedc = "pi__Needs_Score_Synced__c"; 
        public static readonly string  Nicknamec = "Nickname__c"; 
        public static readonly string  OtherAddress = "OtherAddress"; 
        public static readonly string  OtherCity = "OtherCity"; 
        public static readonly string  OtherCountry = "OtherCountry"; 
        public static readonly string  OtherCountryCode = "OtherCountryCode"; 
        public static readonly string  OtherExpertiseLAc = "Other_Expertise_LA__c"; 
        public static readonly string  OtherGeocodeAccuracy = "OtherGeocodeAccuracy"; 
        public static readonly string  OtherLatitude = "OtherLatitude"; 
        public static readonly string  OtherLeadSourceLAc = "Other_Lead_Source_LA__c"; 
        public static readonly string  OtherLongitude = "OtherLongitude"; 
        public static readonly string  OtherPhone = "OtherPhone"; 
        public static readonly string  OtherState = "OtherState"; 
        public static readonly string  OtherStateCode = "OtherStateCode"; 
        public static readonly string  OtherStreet = "OtherStreet"; 
        public static readonly string  OtherPostalCode = "OtherPostalCode"; 
        public static readonly string  WalkerInfoOverallQualityc = "Walker_Info__OverallQuality__c"; 
        public static readonly string  WalkerInfoOverallQualityRawc = "Walker_Info__Overall_Quality_Raw__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  picampaignc = "pi__campaign__c"; 
        public static readonly string  picommentsc = "pi__comments__c"; 
        public static readonly string  piconversiondatec = "pi__conversion_date__c"; 
        public static readonly string  piconversionobjectnamec = "pi__conversion_object_name__c"; 
        public static readonly string  piconversionobjecttypec = "pi__conversion_object_type__c"; 
        public static readonly string  picreateddatec = "pi__created_date__c"; 
        public static readonly string  pifirstactivityc = "pi__first_activity__c"; 
        public static readonly string  pifirsttouchurlc = "pi__first_touch_url__c"; 
        public static readonly string  pifirstsearchtermc = "pi__first_search_term__c"; 
        public static readonly string  pifirstsearchtypec = "pi__first_search_type__c"; 
        public static readonly string  pigradec = "pi__grade__c"; 
        public static readonly string  pipardothardbouncedc = "pi__pardot_hard_bounced__c"; 
        public static readonly string  pilastactivityc = "pi__last_activity__c"; 
        public static readonly string  piPardotLastScoredAtc = "pi__Pardot_Last_Scored_At__c"; 
        public static readonly string  pinotesc = "pi__notes__c"; 
        public static readonly string  piscorec = "pi__score__c"; 
        public static readonly string  piurlc = "pi__url__c"; 
        public static readonly string  Phone = "Phone"; 
        public static readonly string  PhoneNbrFormatc = "Phone_Nbr_Format__c"; 
        public static readonly string  ccrzIsPortalUserc = "ccrz__IsPortalUser__c"; 
        public static readonly string  PreferredCompetitorc = "Preferred_Competitor__c"; 
        public static readonly string  PreferredContactMethodc = "Preferred_Contact_Method__c"; 
        public static readonly string  PreviousOwnerc = "Previous_Owner__c"; 
        public static readonly string  PrevRecordTypec = "Prev_RecordType__c"; 
        public static readonly string  PrimaryContactc = "Primary_Contact__c"; 
        public static readonly string  WalkerInfoProactiveCommunicationc = "Walker_Info__Proactive_Communication__c"; 
        public static readonly string  WalkerInfoProactiveCommunicationRawc = "Walker_Info__Proactive_Communication_Raw__c"; 
        public static readonly string  ProjectBidIDc = "Project_Bid_ID__c"; 
        public static readonly string  ReasonforInactivationc = "Reason_for_Inactivation__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  JCIRegionc = "JCI_Region__c"; 
        public static readonly string  Regioneuc = "Region_eu__c"; 
        public static readonly string  RelationshipStatusc = "Relationship_Status__c"; 
        public static readonly string  ReportsTo = "ReportsTo"; 
        public static readonly string  JCISMEURolesc = "JCI_SM_EU_Roles__c"; 
        public static readonly string  Salutation = "Salutation"; 
        public static readonly string  ccrzSelfRegisteredc = "ccrz__SelfRegistered__c"; 
        public static readonly string  SendInvitationc = "Send_Invitation__c"; 
        public static readonly string  Signupfornewsletterc = "Sign_up_for_news_letter__c"; 
        public static readonly string  STAMP1c = "STAMP1__c"; 
        public static readonly string  StartDtc = "Start_Dt__c"; 
        public static readonly string  Statusc = "Status__c"; 
        public static readonly string  Title = "Title"; 
        public static readonly string  TradeShowParticipationc = "Trade_Show_Participation__c"; 
        public static readonly string  TradeshowSpecialEventc = "Tradeshow_Special_Event__c"; 
        public static readonly string  UnSubscribeAbandonedEmailc = "UnSubscribeAbandonedEmail__c"; 
        public static readonly string  Userc = "User__c"; 
        public static readonly string  UserIdc = "User_Id__c"; 
        public static readonly string  WalkerInfoWalkerIdc = "Walker_Info__WalkerId__c"; 
        public static readonly string  WalkerInfoWalkerSurveyc = "Walker_Info__Walker_Survey__c"; 
        public static readonly string  twodWarrantyContactTypec = "twod__Warranty_Contact_Type__c"; 
        public static readonly string  WalkerInfoWebIdc = "Walker_Info__WebId__c"; 
        public static readonly string  WorkEmailc = "Work_Email__c"; 
        public static readonly string  WorkMobilec = "Work_Mobile__c"; 
        public static readonly string  WorkPhonec = "Work_Phone__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickContactHistoryField(string s)
        {
            return new PickContactHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactHistoryField Parse(string text) => text;

        

    }
    public class PickCustGoalCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCustGoalCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCustGoalCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCustGoalCurrencyIsoCodeConverter))]
    public class PickCustGoalCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCustGoalCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickCustGoalCurrencyIsoCode(string s)
        {
            return new PickCustGoalCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCustGoalCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickCustGoalJCIInternalBrandsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCustGoalJCIInternalBrands)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCustGoalJCIInternalBrands {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCustGoalJCIInternalBrandsConverter))]
    public class PickCustGoalJCIInternalBrands
    {
        public static readonly string  ABCOOLAIR = "ABCOOL AIR"; 
        public static readonly string  Airmate = "Airmate"; 
        public static readonly string  AmericanMetalProducts = "American Metal Products"; 
        public static readonly string  Ameriflex = "Ameriflex"; 
        public static readonly string  Ameriflow = "Ameriflow"; 
        public static readonly string  AmeriVent = "Ameri-Vent"; 
        public static readonly string  Ampco = "Ampco"; 
        public static readonly string  ASC = "ASC"; 
        public static readonly string  CarrierKrueger = "Carrier (Krueger)"; 
        public static readonly string  Champion = "Champion"; 
        public static readonly string  Coleman = "Coleman"; 
        public static readonly string  Dayton = "Dayton"; 
        public static readonly string  EasternSheetMetal = "Eastern Sheet Metal"; 
        public static readonly string  EnERVent = "EnERVent"; 
        public static readonly string  EnviroTec = "EnviroTec"; 
        public static readonly string  Evcon = "Evcon"; 
        public static readonly string  FacilityExplorer = "Facility Explorer"; 
        public static readonly string  FraserJohnston = "Fraser-Johnston"; 
        public static readonly string  Frick = "Frick"; 
        public static readonly string  Guardian = "Guardian"; 
        public static readonly string  HartCooley = "Hart & Cooley"; 
        public static readonly string  Heatfab = "Heatfab"; 
        public static readonly string  Hitachi = "Hitachi"; 
        public static readonly string  JohnsonControlsCommercial = "Johnson Controls - Commercial"; 
        public static readonly string  JohnsonControlsControlsProducts = "Johnson Controls - Controls Products"; 
        public static readonly string  KochFilter = "Koch Filter"; 
        public static readonly string  KochFilterofferedbyHC = "Koch Filter offered by H&C"; 
        public static readonly string  Krueger = "Krueger"; 
        public static readonly string  Lau = "Lau"; 
        public static readonly string  LauOEM = "Lau - OEM"; 
        public static readonly string  LauParts = "Lau - Parts"; 
        public static readonly string  Lima = "Lima"; 
        public static readonly string  Luxaire = "Luxaire"; 
        public static readonly string  Metasys = "Metasys"; 
        public static readonly string  Milcor = "Milcor"; 
        public static readonly string  MillerPicking = "Miller-Picking"; 
        public static readonly string  P2000 = "P2000"; 
        public static readonly string  Pace = "Pace"; 
        public static readonly string  Panoptix = "Panoptix"; 
        public static readonly string  PEAKOEMControl = "PEAK - OEM Control"; 
        public static readonly string  Penn = "Penn"; 
        public static readonly string  PennBarry = "PennBarry"; 
        public static readonly string  Polyflue = "Polyflue"; 
        public static readonly string  PORTALSPLUS = "PORTALS PLUS"; 
        public static readonly string  Provent = "Provent"; 
        public static readonly string  Quantech = "Quantech"; 
        public static readonly string  Reliable = "Reliable"; 
        public static readonly string  ReliableProducts = "Reliable Products"; 
        public static readonly string  Rickard = "Rickard"; 
        public static readonly string  RPS = "RPS"; 
        public static readonly string  RUSJOHNSONCONTROLINC = "RUS JOHNSON CONTROL, INC"; 
        public static readonly string  Ruskin = "Ruskin"; 
        public static readonly string  RuskinRooftopSystems = "Ruskin Rooftop Systems"; 
        public static readonly string  SelkirkCorp = "Selkirk Corp"; 
        public static readonly string  Skymark = "Skymark"; 
        public static readonly string  SMARTAirEnergySolutions = "SMART Air & Energy Solutions"; 
        public static readonly string  SmartFlex = "Smart Flex"; 
        public static readonly string  Source1 = "Source 1"; 
        public static readonly string  SuperiorRex = "Superior Rex"; 
        public static readonly string  SuperPro = "SuperPro"; 
        public static readonly string  SuperVent = "SuperVent"; 
        public static readonly string  SupremeFan = "Supreme Fan"; 
        public static readonly string  Tempmaster = "Tempmaster"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  TRION = "TRION"; 
        public static readonly string  TuttleBailey = "Tuttle & Bailey"; 
        public static readonly string  Verasys = "Verasys"; 
        public static readonly string  WARD = "WARD"; 
        public static readonly string  Winchester = "Winchester"; 
        public static readonly string  YorkAHU = "York - AHU"; 
        public static readonly string  YorkAirDistribution = "York - Air Distribution"; 
        public static readonly string  YorkChiller = "York - Chiller"; 
        public static readonly string  YorkChillerParts = "York - Chiller Parts"; 
        public static readonly string  YorkDFS = "York - DFS"; 
        public static readonly string  YorkResidentialLightCommercial = "York - Residential & Light Commercial"; 
        public static readonly string  YorkVRF = "York - VRF"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCustGoalJCIInternalBrands o)
        {
            return o.Value;
        }

        public static implicit operator PickCustGoalJCIInternalBrands(string s)
        {
            return new PickCustGoalJCIInternalBrands {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCustGoalJCIInternalBrands Parse(string text) => text;

        

    }
    public class PickCustGoalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCustGoalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCustGoalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCustGoalStatusConverter))]
    public class PickCustGoalStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Cancelled = "Cancelled"; 
        public static readonly string  Abandoned = "Abandoned"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCustGoalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCustGoalStatus(string s)
        {
            return new PickCustGoalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCustGoalStatus Parse(string text) => text;

        

    }
    public class PickDashboardLeftSizeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardLeftSize)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardLeftSize {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardLeftSizeConverter))]
    public class PickDashboardLeftSize
    {
        public static readonly string  Narrow = "Narrow"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Wide = "Wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardLeftSize o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardLeftSize(string s)
        {
            return new PickDashboardLeftSize {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardLeftSize Parse(string text) => text;

        

    }
    public class PickDashboardMiddleSizeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardMiddleSize)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardMiddleSize {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardMiddleSizeConverter))]
    public class PickDashboardMiddleSize
    {
        public static readonly string  Narrow = "Narrow"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Wide = "Wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardMiddleSize o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardMiddleSize(string s)
        {
            return new PickDashboardMiddleSize {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardMiddleSize Parse(string text) => text;

        

    }
    public class PickDashboardRightSizeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardRightSize)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardRightSize {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardRightSizeConverter))]
    public class PickDashboardRightSize
    {
        public static readonly string  Narrow = "Narrow"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Wide = "Wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardRightSize o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardRightSize(string s)
        {
            return new PickDashboardRightSize {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardRightSize Parse(string text) => text;

        

    }
    public class PickDashboardBackgroundDirectionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardBackgroundDirection)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardBackgroundDirection {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardBackgroundDirectionConverter))]
    public class PickDashboardBackgroundDirection
    {
        public static readonly string  TopToBottom = "TopToBottom"; 
        public static readonly string  LeftToRight = "LeftToRight"; 
        public static readonly string  Diagonal = "Diagonal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardBackgroundDirection o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardBackgroundDirection(string s)
        {
            return new PickDashboardBackgroundDirection {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardBackgroundDirection Parse(string text) => text;

        

    }
    public class PickDashboardTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardTypeConverter))]
    public class PickDashboardType
    {
        public static readonly string  SpecifiedUser = "SpecifiedUser"; 
        public static readonly string  LoggedInUser = "LoggedInUser"; 
        public static readonly string  MyTeamUser = "MyTeamUser"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardType o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardType(string s)
        {
            return new PickDashboardType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardType Parse(string text) => text;

        

    }
    public class PickEventCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventCurrencyIsoCodeConverter))]
    public class PickEventCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickEventCurrencyIsoCode(string s)
        {
            return new PickEventCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickEventTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventTypeConverter))]
    public class PickEventType
    {
        public static readonly string  FacetoFace = "Face to Face"; 
        public static readonly string  RemoteCall = "Remote Call"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Meeting = "Meeting"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  Call = "Call"; 
        public static readonly string  Training = "Training"; 
        public static readonly string  Administration = "Administration"; 
        public static readonly string  Holiday = "Holiday"; 
        public static readonly string  Sickness = "Sickness"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventType(string s)
        {
            return new PickEventType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventType Parse(string text) => text;

        

    }
    public class PickEventShowAsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventShowAs)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventShowAs {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventShowAsConverter))]
    public class PickEventShowAs
    {
        public static readonly string  Busy = "Busy"; 
        public static readonly string  OutOfOffice = "OutOfOffice"; 
        public static readonly string  Free = "Free"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventShowAs o)
        {
            return o.Value;
        }

        public static implicit operator PickEventShowAs(string s)
        {
            return new PickEventShowAs {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventShowAs Parse(string text) => text;

        

    }
    public class PickEventGroupEventTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventGroupEventType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventGroupEventType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventGroupEventTypeConverter))]
    public class PickEventGroupEventType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventGroupEventType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventGroupEventType(string s)
        {
            return new PickEventGroupEventType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventGroupEventType Parse(string text) => text;

        

    }
    public class PickEventRecurrenceTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceTimeZoneSidKeyConverter))]
    public class PickEventRecurrenceTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceTimeZoneSidKey(string s)
        {
            return new PickEventRecurrenceTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickEventRecurrenceTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceTypeConverter))]
    public class PickEventRecurrenceType
    {
        public static readonly string  RecursDaily = "RecursDaily"; 
        public static readonly string  RecursEveryWeekday = "RecursEveryWeekday"; 
        public static readonly string  RecursMonthly = "RecursMonthly"; 
        public static readonly string  RecursMonthlyNth = "RecursMonthlyNth"; 
        public static readonly string  RecursWeekly = "RecursWeekly"; 
        public static readonly string  RecursYearly = "RecursYearly"; 
        public static readonly string  RecursYearlyNth = "RecursYearlyNth"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceType(string s)
        {
            return new PickEventRecurrenceType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceType Parse(string text) => text;

        

    }
    public class PickEventRecurrenceInstanceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceInstance)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceInstance {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceInstanceConverter))]
    public class PickEventRecurrenceInstance
    {
        public static readonly string  First = "First"; 
        public static readonly string  Second = "Second"; 
        public static readonly string  Third = "Third"; 
        public static readonly string  Fourth = "Fourth"; 
        public static readonly string  Last = "Last"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceInstance o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceInstance(string s)
        {
            return new PickEventRecurrenceInstance {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceInstance Parse(string text) => text;

        

    }
    public class PickEventRecurrenceMonthOfYearConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceMonthOfYear)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceMonthOfYear {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceMonthOfYearConverter))]
    public class PickEventRecurrenceMonthOfYear
    {
        public static readonly string  January = "January"; 
        public static readonly string  February = "February"; 
        public static readonly string  March = "March"; 
        public static readonly string  April = "April"; 
        public static readonly string  May = "May"; 
        public static readonly string  June = "June"; 
        public static readonly string  July = "July"; 
        public static readonly string  August = "August"; 
        public static readonly string  September = "September"; 
        public static readonly string  October = "October"; 
        public static readonly string  November = "November"; 
        public static readonly string  December = "December"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceMonthOfYear o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceMonthOfYear(string s)
        {
            return new PickEventRecurrenceMonthOfYear {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceMonthOfYear Parse(string text) => text;

        

    }
    public class PickEventEventStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventEventStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventEventStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventEventStatusConverter))]
    public class PickEventEventStatus
    {
        public static readonly string  Scheduled = "Scheduled"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Planned = "Planned"; 
        public static readonly string  Confirmed = "Confirmed"; 
        public static readonly string  Closed = "Closed"; 
        public static readonly string  Cancelled = "Cancelled"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventEventStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickEventEventStatus(string s)
        {
            return new PickEventEventStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventEventStatus Parse(string text) => text;

        

    }
    public class PickEventJCIActivitySubTypesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventJCIActivitySubTypes)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventJCIActivitySubTypes {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventJCIActivitySubTypesConverter))]
    public class PickEventJCIActivitySubTypes
    {
        public static readonly string  SalesCall = "Sales Call"; 
        public static readonly string  ShowcaseIdeationSession = "Showcase/Ideation Session"; 
        public static readonly string  FactoryTour = "Factory Tour"; 
        public static readonly string  CustomerSiteVisit = "Customer Site Visit"; 
        public static readonly string  CustomerEntertainment = "Customer Entertainment"; 
        public static readonly string  Tradeshow = "Tradeshow"; 
        public static readonly string  RelationshipBuilding = "Relationship Building"; 
        public static readonly string  JointProspectingCall = "Joint Prospecting Call"; 
        public static readonly string  BidProposal = "Bid/Proposal"; 
        public static readonly string  LunchnLearnPresentation = "Lunch 'n Learn/ Presentation"; 
        public static readonly string  QBR = "QBR"; 
        public static readonly string  TASReview = "TAS Review"; 
        public static readonly string  STAR = "STAR"; 
        public static readonly string  AccountTeamMeeting = "Account Team Meeting"; 
        public static readonly string  BranchMeeting = "Branch Meeting"; 
        public static readonly string  OneonOne = "One on One"; 
        public static readonly string  CoachingSession = "Coaching Session"; 
        public static readonly string  ManagementReviewCall = "Management Review Call"; 
        public static readonly string  AccountPlan = "Account Plan"; 
        public static readonly string  StrategicDealTeamReviewed = "Strategic Deal Team- Reviewed"; 
        public static readonly string  ManagerFeedback = "Manager Feedback"; 
        public static readonly string  BoardPositioninIndustryOrganization = "Board Position in Industry Organization"; 
        public static readonly string  CallPlanReview = "Call Plan Review"; 
        public static readonly string  CustomerPresentations = "Customer Presentations"; 
        public static readonly string  CustomertoCustomerSellingEngagements = "Customer to Customer Selling Engagements"; 
        public static readonly string  NewLOBJointSalesCall = "New LOB Joint Sales Call"; 
        public static readonly string  CrossSellMeeting = "Cross Sell Meeting"; 
        public static readonly string  CrossSellJointSalesCall = "Cross Sell Joint Sales Call"; 
        public static readonly string  CrossSellDiscoveryMeeting = "Cross Sell Discovery Meeting"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventJCIActivitySubTypes o)
        {
            return o.Value;
        }

        public static implicit operator PickEventJCIActivitySubTypes(string s)
        {
            return new PickEventJCIActivitySubTypes {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventJCIActivitySubTypes Parse(string text) => text;

        

    }
    public class PickEventJCIActivityTypesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventJCIActivityTypes)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventJCIActivityTypes {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventJCIActivityTypesConverter))]
    public class PickEventJCIActivityTypes
    {
        public static readonly string  CustomerFacing = "Customer Facing"; 
        public static readonly string  Internal = "Internal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventJCIActivityTypes o)
        {
            return o.Value;
        }

        public static implicit operator PickEventJCIActivityTypes(string s)
        {
            return new PickEventJCIActivityTypes {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventJCIActivityTypes Parse(string text) => text;

        

    }
    public class PickEventObservedUnobservedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventObservedUnobserved)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventObservedUnobserved {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventObservedUnobservedConverter))]
    public class PickEventObservedUnobserved
    {
        public static readonly string  Observed = "Observed"; 
        public static readonly string  Unobserved = "Unobserved"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventObservedUnobserved o)
        {
            return o.Value;
        }

        public static implicit operator PickEventObservedUnobserved(string s)
        {
            return new PickEventObservedUnobserved {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventObservedUnobserved Parse(string text) => text;

        

    }
    public class PickEventEventTaskTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventEventTaskType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventEventTaskType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventEventTaskTypeConverter))]
    public class PickEventEventTaskType
    {
        public static readonly string  CustomerBranchReview = "Customer / Branch Review"; 
        public static readonly string  ProductTraining = "Product Training"; 
        public static readonly string  ToolApplicationTraining = "Tool / Application Training"; 
        public static readonly string  CustomerVisit = "Customer Visit"; 
        public static readonly string  CustomerCall = "Customer Call"; 
        public static readonly string  SalesSupport = "Sales Support"; 
        public static readonly string  CustomerSupport = "Customer Support"; 
        public static readonly string _1on1 = "1 on 1"; 
        public static readonly string  PerformanceRecovery = "Performance Recovery"; 
        public static readonly string  CustomerExperienceSurvey = "Customer Experience Survey"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventEventTaskType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventEventTaskType(string s)
        {
            return new PickEventEventTaskType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventEventTaskType Parse(string text) => text;

        

    }
    public class PickEventCustomerPartnerTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventCustomerPartnerType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventCustomerPartnerType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventCustomerPartnerTypeConverter))]
    public class PickEventCustomerPartnerType
    {
        public static readonly string  ArchitectEngineer = "Architect / Engineer"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  DirectBranch = "Direct Branch"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  ManufacturerRep = "Manufacturer Rep"; 
        public static readonly string  OEM = "OEM"; 
        public static readonly string  Owner = "Owner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventCustomerPartnerType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventCustomerPartnerType(string s)
        {
            return new PickEventCustomerPartnerType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventCustomerPartnerType Parse(string text) => text;

        

    }
    public class PickFinancialCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFinancialCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFinancialCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFinancialCurrencyIsoCodeConverter))]
    public class PickFinancialCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFinancialCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickFinancialCurrencyIsoCode(string s)
        {
            return new PickFinancialCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFinancialCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickFolderAccessTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFolderAccessType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFolderAccessType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFolderAccessTypeConverter))]
    public class PickFolderAccessType
    {
        public static readonly string  Shared = "Shared"; 
        public static readonly string  Public = "Public"; 
        public static readonly string  Hidden = "Hidden"; 
        public static readonly string  PublicInternal = "PublicInternal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFolderAccessType o)
        {
            return o.Value;
        }

        public static implicit operator PickFolderAccessType(string s)
        {
            return new PickFolderAccessType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFolderAccessType Parse(string text) => text;

        

    }
    public class PickFolderTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFolderType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFolderType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFolderTypeConverter))]
    public class PickFolderType
    {
        public static readonly string  Document = "Document"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Report = "Report"; 
        public static readonly string  Dashboard = "Dashboard"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFolderType o)
        {
            return o.Value;
        }

        public static implicit operator PickFolderType(string s)
        {
            return new PickFolderType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFolderType Parse(string text) => text;

        

    }
    public class PickGroupTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickGroupType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickGroupType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickGroupTypeConverter))]
    public class PickGroupType
    {
        public static readonly string  AllCustomerPortal = "AllCustomerPortal"; 
        public static readonly string  ChannelProgramGroup = "ChannelProgramGroup"; 
        public static readonly string  CollaborationGroup = "CollaborationGroup"; 
        public static readonly string  Manager = "Manager"; 
        public static readonly string  ManagerAndSubordinatesInternal = "ManagerAndSubordinatesInternal"; 
        public static readonly string  Organization = "Organization"; 
        public static readonly string  PRMOrganization = "PRMOrganization"; 
        public static readonly string  Queue = "Queue"; 
        public static readonly string  Regular = "Regular"; 
        public static readonly string  Role = "Role"; 
        public static readonly string  RoleAndSubordinates = "RoleAndSubordinates"; 
        public static readonly string  RoleAndSubordinatesInternal = "RoleAndSubordinatesInternal"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryAndSubordinates = "TerritoryAndSubordinates"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickGroupType o)
        {
            return o.Value;
        }

        public static implicit operator PickGroupType(string s)
        {
            return new PickGroupType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickGroupType Parse(string text) => text;

        

    }
    public class PickJCIBrandHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickJCIBrandHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickJCIBrandHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickJCIBrandHistoryFieldConverter))]
    public class PickJCIBrandHistoryField
    {
        public static readonly string  Acctc = "Acct__c"; 
        public static readonly string  IsActivec = "Is_Active__c"; 
        public static readonly string  AprCFYAmtc = "Apr_CFY_Amt__c"; 
        public static readonly string  AprCFYPlanAmtc = "Apr_CFY_Plan_Amt__c"; 
        public static readonly string  AugCFYAmtc = "Aug_CFY_Amt__c"; 
        public static readonly string  AugCFYPlanAmtc = "Aug_CFY_Plan_Amt__c"; 
        public static readonly string  Brandc = "Brand__c"; 
        public static readonly string  BrandAccountIDConcatc = "Brand_Account_ID_Concat__c"; 
        public static readonly string  Channelc = "Channel__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  DecCFYAmtc = "Dec_CFY_Amt__c"; 
        public static readonly string  DecCFYPlanAmtc = "Dec_CFY_Plan_Amt__c"; 
        public static readonly string  FebCFYAmtc = "Feb_CFY_Amt__c"; 
        public static readonly string  FebCFYPlanAmtc = "Feb_CFY_Plan_Amt__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  InactiveReasonc = "Inactive_Reason__c"; 
        public static readonly string  JanCFYAmtc = "Jan_CFY_Amt__c"; 
        public static readonly string  JanCFYPlanAmtc = "Jan_CFY_Plan_Amt__c"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  JulCFYAmtc = "Jul_CFY_Amt__c"; 
        public static readonly string  JulCFYPlanAmtc = "Jul_CFY_Plan_Amt__c"; 
        public static readonly string  JunCFYAmtc = "Jun_CFY_Amt__c"; 
        public static readonly string  JunCFYPlanAmtc = "Jun_CFY_Plan_Amt__c"; 
        public static readonly string  MarCFYAmtc = "Mar_CFY_Amt__c"; 
        public static readonly string  MarCFYPlanAmtc = "Mar_CFY_Plan_Amt__c"; 
        public static readonly string  MayCFYAmtc = "May_CFY_Amt__c"; 
        public static readonly string  MayCFYPlanAmtc = "May_CFY_Plan_Amt__c"; 
        public static readonly string  TotalLineCardsc = "Total_Line_Cards__c"; 
        public static readonly string  NovCFYAmtc = "Nov_CFY_Amt__c"; 
        public static readonly string  NovCFYPlanAmtc = "Nov_CFY_Plan_Amt__c"; 
        public static readonly string  OctCFYAmtc = "Oct_CFY_Amt__c"; 
        public static readonly string  OctCFYPlanAmtc = "Oct_CFY_Plan_Amt__c"; 
        public static readonly string  OtherDetailc = "Other_Detail__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  ProductLinec = "Product_Line__c"; 
        public static readonly string  ProductLinePicklistc = "Product_Line_Picklist__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  SepCFYAmtc = "Sep_CFY_Amt__c"; 
        public static readonly string  SepCFYPlanAmtc = "Sep_CFY_Plan_Amt__c"; 
        public static readonly string  ShareofWalletc = "Share_of_Wallet__c"; 
        public static readonly string  TotActualAmtCFYc = "Tot_Actual_Amt_CFY__c"; 
        public static readonly string  TotActualAmtPFYc = "Tot_Actual_Amt_PFY__c"; 
        public static readonly string  TotActualAmtYBLc = "Tot_Actual_Amt_YBL__c"; 
        public static readonly string  TotalCYTDAmountc = "Total_CYTD_Amount__c"; 
        public static readonly string  TotalCYTDPlanc = "Total_CYTD_Plan__c"; 
        public static readonly string  TotalPlannedAmountCFYc = "Total_Planned_Amount_CFY__c"; 
        public static readonly string  TotalPYTDAmountc = "Total_PYTD_Amount__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickJCIBrandHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickJCIBrandHistoryField(string s)
        {
            return new PickJCIBrandHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickJCIBrandHistoryField Parse(string text) => text;

        

    }
    public class PickJCIBrandCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickJCIBrandCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickJCIBrandCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickJCIBrandCurrencyIsoCodeConverter))]
    public class PickJCIBrandCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickJCIBrandCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickJCIBrandCurrencyIsoCode(string s)
        {
            return new PickJCIBrandCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickJCIBrandCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickJCIBrandProductLinePicklistConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickJCIBrandProductLinePicklist)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickJCIBrandProductLinePicklist {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickJCIBrandProductLinePicklistConverter))]
    public class PickJCIBrandProductLinePicklist
    {
        public static readonly string  Airfilters = "Air filters"; 
        public static readonly string  BuildingAutomationSystems = "Building Automation Systems"; 
        public static readonly string  ChilledBeams = "Chilled Beams"; 
        public static readonly string  Coils = "Coils"; 
        public static readonly string  Commercialfans = "Commercial fans"; 
        public static readonly string  ComputerRoom = "Computer Room"; 
        public static readonly string  CoolingTower = "Cooling Tower"; 
        public static readonly string  Dampers = "Dampers"; 
        public static readonly string  ElectronicAirCleaners = "Electronic Air Cleaners"; 
        public static readonly string  Humidifiers = "Humidifiers"; 
        public static readonly string  Kitchenexhaust = "Kitchen exhaust"; 
        public static readonly string  Louvers = "Louvers"; 
        public static readonly string  PoolDehumidification = "Pool Dehumidification"; 
        public static readonly string  UnderfloorAirDistribution = "Underfloor Air Distribution"; 
        public static readonly string  VRF = "VRF"; 
        public static readonly string  AirCoils = "Air Coils"; 
        public static readonly string  RefrigerationValves = "Refrigeration Valves"; 
        public static readonly string  ChillerModular = "Chiller - Modular"; 
        public static readonly string  Boilers = "Boilers"; 
        public static readonly string  CommercialSplitUnitUpto50Tons = "Commercial Split Unit (Up to 50 Tons)"; 
        public static readonly string  IndoorAirQuality = "Indoor Air Quality"; 
        public static readonly string  MiniSplitUnit = "Mini-Split Unit"; 
        public static readonly string  UnitVentilators = "Unit Ventilators"; 
        public static readonly string  VFD = "VFD"; 
        public static readonly string  AftermarketMotors = "Aftermarket Motors"; 
        public static readonly string  AHUBaseBlowerCoil = "AHU Base (Blower Coil)"; 
        public static readonly string  AHUCustom = "AHU Custom"; 
        public static readonly string  AHUSemiCustom = "AHU Semi-Custom"; 
        public static readonly string  AHUStandard = "AHU Standard"; 
        public static readonly string  AirCleaners = "Air Cleaners"; 
        public static readonly string  AirFiltrationMonitoring = "Air Filtration Monitoring"; 
        public static readonly string  AirFlowMeasuringStations = "Air Flow Measuring Stations"; 
        public static readonly string  AppliedRoofTopUnit40150 = "Applied Roof Top Unit (40-150)"; 
        public static readonly string  AutomationEnginesSupervisor = "Automation Engines & Supervisor"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Chimney = "Chimney"; 
        public static readonly string  CommercialAccessPanels = "Commercial Access Panels"; 
        public static readonly string  CommercialIndustrialChimney = "Commercial Industrial Chimney"; 
        public static readonly string  CommercialIndustrialVenting = "Commercial Industrial Venting"; 
        public static readonly string  Compressors = "Compressors"; 
        public static readonly string  ControlPanels = "Control Panels"; 
        public static readonly string  ControlsComponentsIO = "Controls Components I/O"; 
        public static readonly string  DuctConnectors = "Duct Connectors"; 
        public static readonly string  Ductboard = "Ductboard"; 
        public static readonly string  DuctlessSplits = "Ductless Splits"; 
        public static readonly string  EnergyRecoveryVentilatorERV = "Energy Recovery Ventilator (ERV)"; 
        public static readonly string  ExhaustFans = "Exhaust Fans"; 
        public static readonly string  FanCoilUnits = "Fan Coil Units"; 
        public static readonly string  FieldControllers = "Field Controllers"; 
        public static readonly string  FilterBoxes = "Filter Boxes"; 
        public static readonly string  FilterDriers = "Filter Driers"; 
        public static readonly string  FireandSecurity = "Fire and Security"; 
        public static readonly string  FlexibleAirDuct = "Flexible Air Duct"; 
        public static readonly string  Gaspipefittings = "Gas pipe/fittings"; 
        public static readonly string  HeatStrips = "Heat Strips"; 
        public static readonly string  IndoorPackageUnitCMLVPAC = "Indoor Package Unit (CML/VPAC)"; 
        public static readonly string  InsulationWrap = "Insulation Wrap"; 
        public static readonly string  MetersandInstruments = "Meters and Instruments"; 
        public static readonly string  PackagedRootTopUnit12525 = "Packaged Root Top Unit (12.5-25)"; 
        public static readonly string  PackagedRootTopUnit3040 = "Packaged Root Top Unit (30-40)"; 
        public static readonly string  PackagedRootTopUnit3125 = "Packaged Root Top Unit (3-12.5)"; 
        public static readonly string  PneumaticComponents = "Pneumatic Components"; 
        public static readonly string  Refrigerants = "Refrigerants"; 
        public static readonly string  ResidentialLightCommercialFans = "Residential / Light Commercial Fans"; 
        public static readonly string  ResidentialAccessPanels = "Residential Access Panels"; 
        public static readonly string  ResidentialAirHandlers = "Residential Air Handlers"; 
        public static readonly string  ResidentialFurnaces = "Residential Furnaces"; 
        public static readonly string  ResidentialPackageProduct = "Residential Package Product"; 
        public static readonly string  ResidentialSplitSystemsAOR = "Residential Split Systems - AOR"; 
        public static readonly string  ResidentialSplitSystemsOTC = "Residential Split Systems - OTC"; 
        public static readonly string  RolledCopperLinesets = "Rolled Copper/Linesets"; 
        public static readonly string  SensorsandTransmitters = "Sensors and Transmitters"; 
        public static readonly string  SheetMetal = "Sheet Metal"; 
        public static readonly string  TerminalUnitsVAV = "Terminal Units (VAV)"; 
        public static readonly string  Thermostats = "Thermostats"; 
        public static readonly string  UnitHeaters = "Unit Heaters"; 
        public static readonly string  UVLights = "UV Lights"; 
        public static readonly string  Valves = "Valves"; 
        public static readonly string  ValvesActuatorsCombo = "Valves & Actuators Combo"; 
        public static readonly string  VariableSpeedDrives = "Variable Speed Drives"; 
        public static readonly string  VentPipe = "Vent Pipe"; 
        public static readonly string  VerticalSelfContainedHeatPumpVSHP = "Vertical Self-Contained Heat Pump (VSHP)"; 
        public static readonly string  WallMountHVACBardetc = "Wall Mount HVAC (Bard etc.)"; 
        public static readonly string  WaterHeaters = "Water Heaters"; 
        public static readonly string  RefrigerationControlsPressure = "Refrigeration Controls - Pressure"; 
        public static readonly string  RefrigerationControlsTemperature = "Refrigeration Controls - Temperature"; 
        public static readonly string  RefrigerationControlsElectronic = "Refrigeration Controls - Electronic"; 
        public static readonly string  GAS = "GAS"; 
        public static readonly string  ResidentialSplitSystems = "Residential Split Systems"; 
        public static readonly string  GrillesRegistersDiffusersGRDs = "Grilles, Registers, Diffusers (GRD's)"; 
        public static readonly string  EconomizersCurbsConcentricsCMLACCY = "Economizers,Curbs,Concentrics,CML ACCY"; 
        public static readonly string  CommercialWaterSourceHeatPumpWSHP = "Commercial Water Source Heat Pump (WSHP)"; 
        public static readonly string  IndoorAirHandlingUnits = "Indoor Air-Handling Units"; 
        public static readonly string  CriticalEnvironmentairdistribution = "Critical Environment air distribution"; 
        public static readonly string  MakeUpAirUnits = "Make Up Air Units"; 
        public static readonly string  ResidentialWaterSourceHeatPump = "Residential Water Source Heat Pump"; 
        public static readonly string  RoofCurbs = "Roof Curbs"; 
        public static readonly string  RootopAccessorices = "Rootop Accessorices"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickJCIBrandProductLinePicklist o)
        {
            return o.Value;
        }

        public static implicit operator PickJCIBrandProductLinePicklist(string s)
        {
            return new PickJCIBrandProductLinePicklist {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickJCIBrandProductLinePicklist Parse(string text) => text;

        

    }
    public class PickJCIBrandInactiveReasonConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickJCIBrandInactiveReason)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickJCIBrandInactiveReason {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickJCIBrandInactiveReasonConverter))]
    public class PickJCIBrandInactiveReason
    {
        public static readonly string  Failuretomeetquota = "Failure to meet quota"; 
        public static readonly string  Failuretoengageinsalesactivities = "Failure to engage in sales activities"; 
        public static readonly string  Violatingagreement = "Violating agreement"; 
        public static readonly string  Inappropriatedatasharing = "Inappropriate data sharing"; 
        public static readonly string  Unethicalorcriminalactivity = "Unethical or criminal activity"; 
        public static readonly string  Superiorrepcameavailable = "Superior rep came available"; 
        public static readonly string  Addedcompetingline = "Added competing line"; 
        public static readonly string  Multiterritoryrepmovedin = "Multi-territory rep moved in"; 
        public static readonly string  DuplicityofJCIproducts = "Duplicity of JCI products"; 
        public static readonly string  LossofKeyEmployees = "Loss of Key Employees"; 
        public static readonly string  Linecardchangesinsufficiency = "Line card changes/insufficiency"; 
        public static readonly string  ChangeofOwnership = "Change of Ownership"; 
        public static readonly string  CustomerdropsJCIbrand = "Customer drops JCI brand"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickJCIBrandInactiveReason o)
        {
            return o.Value;
        }

        public static implicit operator PickJCIBrandInactiveReason(string s)
        {
            return new PickJCIBrandInactiveReason {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickJCIBrandInactiveReason Parse(string text) => text;

        

    }
    public class PickLeadSalutationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadSalutation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadSalutation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadSalutationConverter))]
    public class PickLeadSalutation
    {
        public static readonly string  Mr = "Mr."; 
        public static readonly string  Ms = "Ms."; 
        public static readonly string  Mrs = "Mrs."; 
        public static readonly string  Dr = "Dr."; 
        public static readonly string  Miss = "Miss"; 
        public static readonly string  Father = "Father"; 
        public static readonly string  Honorable = "Honorable"; 
        public static readonly string  Reverend = "Reverend"; 
        public static readonly string  Sir = "Sir"; 
        public static readonly string  M = "M."; 
        public static readonly string  Melle = "Melle"; 
        public static readonly string  Mgr = "Mgr"; 
        public static readonly string  Mme = "Mme"; 
        public static readonly string  Père = "Père"; 
        public static readonly string  Révérend = "Révérend"; 
        public static readonly string  Don = "Don"; 
        public static readonly string  Doña = "Doña"; 
        public static readonly string  Doctor = "Doctor"; 
        public static readonly string  Doctora = "Doctora"; 
        public static readonly string  Profesor = "Profesor"; 
        public static readonly string  Profesora = "Profesora"; 
        public static readonly string  Señor = "Señor"; 
        public static readonly string  Señora = "Señora"; 
        public static readonly string  Señorita = "Señorita"; 
        public static readonly string  Prof = "Prof."; 
        public static readonly string  Lic = "Lic."; 
        public static readonly string  Ing = "Ing."; 
        public static readonly string  Eng = "Eng."; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadSalutation o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadSalutation(string s)
        {
            return new PickLeadSalutation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadSalutation Parse(string text) => text;

        

    }
    public class PickLeadStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadStateCodeConverter))]
    public class PickLeadStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadStateCode(string s)
        {
            return new PickLeadStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadStateCode Parse(string text) => text;

        

    }
    public class PickLeadCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadCountryCodeConverter))]
    public class PickLeadCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadCountryCode(string s)
        {
            return new PickLeadCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadCountryCode Parse(string text) => text;

        

    }
    public class PickLeadLeadSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadLeadSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadLeadSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadLeadSourceConverter))]
    public class PickLeadLeadSource
    {
        public static readonly string _121SecuritySummit = "121 Security Summit"; 
        public static readonly string  AcuityBrands = "Acuity Brands"; 
        public static readonly string  AHR2016 = "AHR 2016"; 
        public static readonly string  Backlog = "Backlog"; 
        public static readonly string  BestGuess = "Best Guess"; 
        public static readonly string  BidClerkcom = "BidClerk.com"; 
        public static readonly string  BranchFederalGrowthInitiative = "Branch Federal Growth Initiative"; 
        public static readonly string  CCIClintonClimateInitiative = "CCI (Clinton Climate Initiative)"; 
        public static readonly string  ChillerTurnkeyRetrofit = "Chiller Turnkey Retrofit"; 
        public static readonly string  Competition = "Competition"; 
        public static readonly string  ConstructionJournal = "Construction Journal"; 
        public static readonly string  ConsultingEngineerAccountRelationship = "Consulting Engineer Account Relationship"; 
        public static readonly string  ContractorAccountRelationship = "Contractor Account Relationship"; 
        public static readonly string  CooperLighting = "Cooper Lighting"; 
        public static readonly string  CorporateClients = "Corporate Clients"; 
        public static readonly string  CoSell = "Co-Sell"; 
        public static readonly string  CREE = "CREE"; 
        public static readonly string  Customer = "Customer"; 
        public static readonly string  DigitalMarketing = "Digital Marketing"; 
        public static readonly string  DigitalMarketingusingLean = "Digital Marketing using Lean"; 
        public static readonly string  DodgeReports = "Dodge Reports"; 
        public static readonly string  EnergySolutions = "Energy Solutions"; 
        public static readonly string  ENGOPSCustomerLead = "ENG/OPS Customer Lead"; 
        public static readonly string  Engineer = "Engineer"; 
        public static readonly string  ExternalReferral = "External Referral"; 
        public static readonly string  FacilityDude = "FacilityDude"; 
        public static readonly string  FLSP = "FLSP"; 
        public static readonly string  FWDodge = "FW Dodge"; 
        public static readonly string  GCWebsite = "GC Website"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  Gexpro = "Gexpro"; 
        public static readonly string  Glenigans = "Glenigan's"; 
        public static readonly string  Graybar = "Graybar"; 
        public static readonly string  GWS = "GWS"; 
        public static readonly string  HealthcareEnvironmentOptimization = "Healthcare Environment Optimization"; 
        public static readonly string  IBM = "IBM"; 
        public static readonly string  InboundCalls = "Inbound - Calls"; 
        public static readonly string  InboundEmail = "Inbound - Email"; 
        public static readonly string  InboundForm = "Inbound - Form"; 
        public static readonly string  InboundTradeShow = "Inbound - Trade Show"; 
        public static readonly string  LATIBTLM = "LAT IBT L&M"; 
        public static readonly string  LATIBTNewPSA = "LAT IBT New PSA"; 
        public static readonly string  LATIBTNewPSAControls = "LAT IBT New PSA Controls"; 
        public static readonly string  LATIBTNewPSARefrigeration = "LAT IBT New PSA Refrigeration"; 
        public static readonly string  LATIBTRetrofitControls = "LAT IBT Retrofit Controls"; 
        public static readonly string  LATIBTRetrofitLTC = "LAT IBT Retrofit LTC"; 
        public static readonly string  LATIBTRetrofitRefrigeration = "LAT IBT Retrofit Refrigeration"; 
        public static readonly string  LATIBTRetrofitSTC = "LAT IBT Retrofit STC"; 
        public static readonly string  LATLMorPrimeRetrofitFrickControlPanelUpgrade = "LAT L&M or Prime Retrofit / Frick Control Panel Upgrade"; 
        public static readonly string  LATNonIBTSTCReplacement = "LAT Non IBT STC Replacement"; 
        public static readonly string  LATOptispeedVSDRetrofitCompetitorChiller = "LAT Optispeed (VSD)Retrofit - Competitor Chiller"; 
        public static readonly string  LATOptispeedVSDRetrofitYorkChiller = "LAT Optispeed (VSD)Retrofit - York Chiller"; 
        public static readonly string  LATOptiviewControlPanelCompetitorChiller = "LAT Optiview Control Panel - Competitor Chiller"; 
        public static readonly string  LATOptiviewControlPanelYorkChiller = "LAT Optiview Control Panel - York Chiller"; 
        public static readonly string  LATPrimeRetrofitACScrewCompressorReplacementExchange = "LAT Prime Retrofit /AC Screw Compressor Replacement/Exchange"; 
        public static readonly string  LATPrimeRetrofitAircooledChillerCoilChange = "LAT Prime Retrofit / Air-cooled Chiller Coil Change"; 
        public static readonly string  LATPrimeRetrofitDXCompressorOverhaulReplacement = "LAT Prime Retrofit / DX Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitFSUpgrade = "LAT Prime Retrofit / F&S Upgrade"; 
        public static readonly string  LATPrimeRetrofitFrickCompressorOverhaulReplacement = "LAT Prime Retrofit / Frick Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitNonIBTLTCReplacement = "LAT Prime Retrofit / Non IBT LTC Replacement"; 
        public static readonly string  LATSabroeCompressorOverhaul = "LAT Sabroe Compressor Overhaul"; 
        public static readonly string  LATUnisabPanelUpgrade = "LAT Unisab Panel Upgrade"; 
        public static readonly string  LATYKMotorMonitoring = "LAT YK Motor Monitoring"; 
        public static readonly string  LATYSScrewCompresorReplacementExchange = "LAT YS Screw Compresor Replacement / Exchange"; 
        public static readonly string  LeadPass = "Lead Pass"; 
        public static readonly string  LeanEnergyAnalysis = "Lean Energy Analysis"; 
        public static readonly string  LEEDFullProject = "LEED - Full Project"; 
        public static readonly string  LEEDPartialProject = "LEED - Partial Project"; 
        public static readonly string  LocalTargeting = "Local Targeting"; 
        public static readonly string  MakeYourBuildingsWork = "Make Your Buildings Work"; 
        public static readonly string  MCEmail = "MC E-mail"; 
        public static readonly string  MCFax = "MC Fax"; 
        public static readonly string  MCPhoneCall = "MC Phone Call"; 
        public static readonly string  MCWebsite = "MC Website"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  MidAtlanticBuildersExchange = "Mid-Atlantic Builders Exchange"; 
        public static readonly string  MSC = "MSC"; 
        public static readonly string  MUMS = "MUMS"; 
        public static readonly string  NationalAccounts = "National Accounts"; 
        public static readonly string  NationalSales = "National Sales"; 
        public static readonly string  NetProspex = "NetProspex"; 
        public static readonly string  NorthAmericanTradeShows = "North American Trade Shows"; 
        public static readonly string  Operations = "Operations"; 
        public static readonly string  OracleEquipment = "Oracle Equipment"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  OtherSource = "Other Source"; 
        public static readonly string  OwnerAccountRelationship = "Owner Account Relationship"; 
        public static readonly string  P2000V5Upgrade = "P2000 V5 Upgrade"; 
        public static readonly string  Partner = "Partner"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  Pastquotelostopportunity = "Past quote /lost opportunity"; 
        public static readonly string  Philips = "Philips"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PipelineJumpstart = "Pipeline Jumpstart"; 
        public static readonly string  PipelineJumpstartusingLean = "Pipeline Jumpstart using Lean"; 
        public static readonly string  ProactiveSales = "Proactive Sales"; 
        public static readonly string  PublicInformationWebTradeShowMedia = "Public Information(Web,Trade Show,Media)"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  RFIRFP = "RFI/RFP"; 
        public static readonly string  Sales = "Sales"; 
        public static readonly string  SalesStaff = "Sales Staff"; 
        public static readonly string  SCCNewPSA = "SCC New PSA"; 
        public static readonly string  SCCPSARenewal = "SCC PSA Renewal"; 
        public static readonly string  SchneiderElectric = "Schneider Electric"; 
        public static readonly string  SchoolDude = "SchoolDude"; 
        public static readonly string  Seminar = "Seminar"; 
        public static readonly string  Service = "Service"; 
        public static readonly string  ServiceGeneratedLead = "Service Generated Lead"; 
        public static readonly string  ServiceMarketingLead = "Service Marketing Lead"; 
        public static readonly string  ServiceMarketingLead5 = "Service Marketing Lead (5)"; 
        public static readonly string  ServiceTelemarketingLead = "Service Telemarketing Lead"; 
        public static readonly string  ServiceTelemarketingLeadJ = "Service Telemarketing Lead (J)"; 
        public static readonly string  SilverBulletPerformanceInfrastructure = "Silver Bullet Performance Infrastructure"; 
        public static readonly string  SolutionsDigitalMarketing = "Solutions Digital Marketing"; 
        public static readonly string  SubContract = "Sub-Contract"; 
        public static readonly string  SystemsControlsHVACIR = "Systems (Controls, HVAC, IR)"; 
        public static readonly string  TechnicalAssistant = "Technical Assistant"; 
        public static readonly string  TMEMail = "TM E-Mail"; 
        public static readonly string  TMFax = "TM Fax"; 
        public static readonly string  TMPhoneCall = "TM Phone Call"; 
        public static readonly string  TMTakeOff = "TM Take-Off"; 
        public static readonly string  TopDownBottomUpTargetList = "Top Down Bottom Up Target List"; 
        public static readonly string  TradeShow = "Trade Show"; 
        public static readonly string  TradeshowLeadPerformanceInfrastructure = "Tradeshow Lead Performance Infrastructure"; 
        public static readonly string  UKAIPServiceoffering = "UK - AIP Service offering"; 
        public static readonly string  UKLeadGeneration = "UK Lead Generation"; 
        public static readonly string  Unsolicited = "Unsolicited"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  Vantage = "Vantage"; 
        public static readonly string  Web = "Web"; 
        public static readonly string  WebCampaign = "Web Campaign"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadLeadSource o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadLeadSource(string s)
        {
            return new PickLeadLeadSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadLeadSource Parse(string text) => text;

        

    }
    public class PickLeadStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadStatusConverter))]
    public class PickLeadStatus
    {
        public static readonly string  Contacted = "Contacted"; 
        public static readonly string  Open = "Open"; 
        public static readonly string  Qualified = "Qualified"; 
        public static readonly string  Unqualified = "Unqualified"; 
        public static readonly string  PendingReview = "Pending Review"; 
        public static readonly string  AttemptingToContact = "Attempting To Contact"; 
        public static readonly string  Nurture = "Nurture"; 
        public static readonly string  NotAFit = "Not A Fit"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadStatus(string s)
        {
            return new PickLeadStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadStatus Parse(string text) => text;

        

    }
    public class PickLeadIndustryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadIndustry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadIndustry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadIndustryConverter))]
    public class PickLeadIndustry
    {
        public static readonly string  Agriculture = "Agriculture"; 
        public static readonly string  Apparel = "Apparel"; 
        public static readonly string  Banking = "Banking"; 
        public static readonly string  Biotechnology = "Biotechnology"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Communications = "Communications"; 
        public static readonly string  Construction = "Construction"; 
        public static readonly string  Consulting = "Consulting"; 
        public static readonly string  Education = "Education"; 
        public static readonly string  Electronics = "Electronics"; 
        public static readonly string  Energy = "Energy"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Entertainment = "Entertainment"; 
        public static readonly string  Environmental = "Environmental"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  FoodBeverage = "Food & Beverage"; 
        public static readonly string  Government = "Government"; 
        public static readonly string  Healthcare = "Healthcare"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Insurance = "Insurance"; 
        public static readonly string  Machinery = "Machinery"; 
        public static readonly string  Manufacturing = "Manufacturing"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  NotForProfit = "Not For Profit"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  Recreation = "Recreation"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  Shipping = "Shipping"; 
        public static readonly string  Technology = "Technology"; 
        public static readonly string  Telecommunications = "Telecommunications"; 
        public static readonly string  Transportation = "Transportation"; 
        public static readonly string  Utilities = "Utilities"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadIndustry o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadIndustry(string s)
        {
            return new PickLeadIndustry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadIndustry Parse(string text) => text;

        

    }
    public class PickLeadRatingConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadRating)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadRating {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadRatingConverter))]
    public class PickLeadRating
    {
        public static readonly string  Hot = "Hot"; 
        public static readonly string  Warm = "Warm"; 
        public static readonly string  Cold = "Cold"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadRating o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadRating(string s)
        {
            return new PickLeadRating {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadRating Parse(string text) => text;

        

    }
    public class PickLeadCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadCurrencyIsoCodeConverter))]
    public class PickLeadCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadCurrencyIsoCode(string s)
        {
            return new PickLeadCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickLeadNACLeadTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadNACLeadType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadNACLeadType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadNACLeadTypeConverter))]
    public class PickLeadNACLeadType
    {
        public static readonly string  NewChannelPartner = "New Channel Partner"; 
        public static readonly string  NewCustomerforaChannelPartner = "New Customer for a Channel Partner"; 
        public static readonly string  NewBrandorProductforaChannelProduct = "New Brand or Product for a Channel Product"; 
        public static readonly string  NewJobOpportunityforaChannelPartner = "New Job Opportunity for a Channel Partner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadNACLeadType o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadNACLeadType(string s)
        {
            return new PickLeadNACLeadType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadNACLeadType Parse(string text) => text;

        

    }
    public class PickLeadPardotRecordTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadPardotRecordType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadPardotRecordType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadPardotRecordTypeConverter))]
    public class PickLeadPardotRecordType
    {
        public static readonly string  SSNA = "SSNA"; 
        public static readonly string  NAC = "NAC"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadPardotRecordType o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadPardotRecordType(string s)
        {
            return new PickLeadPardotRecordType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadPardotRecordType Parse(string text) => text;

        

    }
    public class PickLeadHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadHistoryFieldConverter))]
    public class PickLeadHistoryField
    {
        public static readonly string  AccountVerticalMarketc = "Account_Vertical_Market__c"; 
        public static readonly string  VerticalMarketTypec = "Vertical_Market_Type__c"; 
        public static readonly string  Address = "Address"; 
        public static readonly string  AnnualRevenue = "AnnualRevenue"; 
        public static readonly string  AssignedChannelPartnerc = "Assigned_Channel_Partner__c"; 
        public static readonly string  AssociatedOpportunityc = "Associated_Opportunity__c"; 
        public static readonly string  Branchc = "Branch__c"; 
        public static readonly string  Brandsc = "Brands__c"; 
        public static readonly string  BusinessTypec = "Business_Type__c"; 
        public static readonly string  CallEmailc = "Call_Email__c"; 
        public static readonly string  CBREAccountc = "CBRE_Account__c"; 
        public static readonly string  City = "City"; 
        public static readonly string  Company = "Company"; 
        public static readonly string  CompanyDunsNumber = "CompanyDunsNumber"; 
        public static readonly string  Country = "Country"; 
        public static readonly string  CountryCode = "CountryCode"; 
        public static readonly string  ConstructionPtsCPLinkc = "ConstructionPts__CPLink__c"; 
        public static readonly string  ConstructionPtsCPProjectc = "ConstructionPts__CP_Project__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrentCustomerofJCIc = "Current_Customer_of_JCI__c"; 
        public static readonly string  CustomerTypec = "Customer_Type__c"; 
        public static readonly string  DandbCompany = "DandbCompany"; 
        public static readonly string  Jigsaw = "Jigsaw"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  DistributedDateTimec = "Distributed_Date_Time__c"; 
        public static readonly string  DoNotCall = "DoNotCall"; 
        public static readonly string  ConstructionPtsDUNSc = "ConstructionPts__DUNS__c"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  EmailBouncedDate = "EmailBouncedDate"; 
        public static readonly string  EmailBouncedReason = "EmailBouncedReason"; 
        public static readonly string  HasOptedOutOfEmail = "HasOptedOutOfEmail"; 
        public static readonly string  EstCntrtAmtc = "Est_Cntrt_Amt__c"; 
        public static readonly string  EstConstructionValuec = "Est_Construction_Value__c"; 
        public static readonly string  EstValuec = "Est_Value__c"; 
        public static readonly string  FacilitySizec = "Facility_Size__c"; 
        public static readonly string  Fax = "Fax"; 
        public static readonly string  HasOptedOutOfFax = "HasOptedOutOfFax"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FieldFeedbackc = "Field_Feedback__c"; 
        public static readonly string  FirstName = "FirstName"; 
        public static readonly string  GeocodeAccuracy = "GeocodeAccuracy"; 
        public static readonly string  Geographyc = "Geography__c"; 
        public static readonly string  piutmcampaignc = "pi__utm_campaign__c"; 
        public static readonly string  piutmcontentc = "pi__utm_content__c"; 
        public static readonly string  piutmmediumc = "pi__utm_medium__c"; 
        public static readonly string  piutmsourcec = "pi__utm_source__c"; 
        public static readonly string  piutmtermc = "pi__utm_term__c"; 
        public static readonly string  Industry = "Industry"; 
        public static readonly string  LastName = "LastName"; 
        public static readonly string  Latitude = "Latitude"; 
        public static readonly string  AccountCategoryc = "Account_Category__c"; 
        public static readonly string  leadConverted = "leadConverted"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  leadMerged = "leadMerged"; 
        public static readonly string  LeadNamec = "Lead_Name__c"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  RecordType = "RecordType"; 
        public static readonly string  LeadSource = "LeadSource"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  LeadType1c = "Lead_Type1__c"; 
        public static readonly string  LeadType2c = "Lead_Type2__c"; 
        public static readonly string  LeadType3c = "Lead_Type3__c"; 
        public static readonly string  LeadType4c = "Lead_Type4__c"; 
        public static readonly string  Longitude = "Longitude"; 
        public static readonly string  MobilePhone = "MobilePhone"; 
        public static readonly string  MonthlyAnnualUtilityBillc = "Monthly_Annual_Utility_Bill__c"; 
        public static readonly string  NACLeadTypec = "NAC_Lead_Type__c"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  piNeedsScoreSyncedc = "pi__Needs_Score_Synced__c"; 
        public static readonly string  NumberOfEmployees = "NumberOfEmployees"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  picampaignc = "pi__campaign__c"; 
        public static readonly string  picommentsc = "pi__comments__c"; 
        public static readonly string  piconversiondatec = "pi__conversion_date__c"; 
        public static readonly string  piconversionobjectnamec = "pi__conversion_object_name__c"; 
        public static readonly string  piconversionobjecttypec = "pi__conversion_object_type__c"; 
        public static readonly string  picreateddatec = "pi__created_date__c"; 
        public static readonly string  pifirstactivityc = "pi__first_activity__c"; 
        public static readonly string  pifirsttouchurlc = "pi__first_touch_url__c"; 
        public static readonly string  pifirstsearchtermc = "pi__first_search_term__c"; 
        public static readonly string  pifirstsearchtypec = "pi__first_search_type__c"; 
        public static readonly string  pigradec = "pi__grade__c"; 
        public static readonly string  pipardothardbouncedc = "pi__pardot_hard_bounced__c"; 
        public static readonly string  pilastactivityc = "pi__last_activity__c"; 
        public static readonly string  piPardotLastScoredAtc = "pi__Pardot_Last_Scored_At__c"; 
        public static readonly string  pinotesc = "pi__notes__c"; 
        public static readonly string  PardotRecordTypec = "Pardot_Record_Type__c"; 
        public static readonly string  piscorec = "pi__score__c"; 
        public static readonly string  piurlc = "pi__url__c"; 
        public static readonly string  ParentProgramc = "Parent_Program__c"; 
        public static readonly string  Phone = "Phone"; 
        public static readonly string  ProductCategoriesc = "Product_Categories__c"; 
        public static readonly string  Rating = "Rating"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  RepTypec = "Rep_Type__c"; 
        public static readonly string  SalesManagerc = "Sales_Manager__c"; 
        public static readonly string  SalesNumberc = "Sales_Number__c"; 
        public static readonly string  SalesPersonc = "Sales_Person__c"; 
        public static readonly string  SalesPersonRegionc = "Sales_Person_Region__c"; 
        public static readonly string  SalesTeamEmailNotificationc = "Sales_Team_Email_Notification__c"; 
        public static readonly string  Salutation = "Salutation"; 
        public static readonly string  State = "State"; 
        public static readonly string  StateCode = "StateCode"; 
        public static readonly string  StrategicPriorityAccountc = "Strategic_Priority_Account__c"; 
        public static readonly string  Street = "Street"; 
        public static readonly string  SubCategoryc = "Sub_Category__c"; 
        public static readonly string  SubmitterBranchDistrictc = "Submitter_Branch_District__c"; 
        public static readonly string  SubmitterEmailc = "Submitter_Email__c"; 
        public static readonly string  SubmitterJobTitlec = "Submitter_Job_Title__c"; 
        public static readonly string  SubmitterNamec = "Submitter_Name__c"; 
        public static readonly string  SubmitterPhonec = "Submitter_Phone__c"; 
        public static readonly string  Territoryc = "Territory__c"; 
        public static readonly string  Title = "Title"; 
        public static readonly string  TotalSquareFootagec = "Total_Square_Footage__c"; 
        public static readonly string  IsUnreadByOwner = "IsUnreadByOwner"; 
        public static readonly string  Website = "Website"; 
        public static readonly string  PostalCode = "PostalCode"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadHistoryField(string s)
        {
            return new PickLeadHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadHistoryField Parse(string text) => text;

        

    }
    public class PickMarketIntelligenceCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickMarketIntelligenceCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickMarketIntelligenceCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickMarketIntelligenceCurrencyIsoCodeConverter))]
    public class PickMarketIntelligenceCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickMarketIntelligenceCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickMarketIntelligenceCurrencyIsoCode(string s)
        {
            return new PickMarketIntelligenceCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickMarketIntelligenceCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickMarketMappingHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickMarketMappingHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickMarketMappingHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickMarketMappingHistoryFieldConverter))]
    public class PickMarketMappingHistoryField
    {
        public static readonly string  AppliedSystemsMarketc = "Applied_Systems_Market__c"; 
        public static readonly string  AppliedSystemsRgnc = "Applied_Systems_Rgn__c"; 
        public static readonly string  ControlsProductsMarketc = "Controls_Products_Market__c"; 
        public static readonly string  ControlsProductsRgnc = "Controls_Products_Rgn__c"; 
        public static readonly string  Cntyc = "Cnty__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FIPSCodec = "FIPS_Code__c"; 
        public static readonly string  HartCooleyMarketc = "Hart_Cooley_Market__c"; 
        public static readonly string  HartCooleyRgnc = "Hart_Cooley_Rgn__c"; 
        public static readonly string  HitachiVRFMarketc = "Hitachi_VRF_Market__c"; 
        public static readonly string  HitachiVRFRegionc = "Hitachi_VRF_Region__c"; 
        public static readonly string  KochMarketc = "Koch_Market__c"; 
        public static readonly string  KochRgnc = "Koch_Rgn__c"; 
        public static readonly string  KruegerMarketc = "Krueger_Market__c"; 
        public static readonly string  KruegerRgnc = "Krueger_Rgn__c"; 
        public static readonly string  NAChannelsMarketc = "NA_Channels_Market__c"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  PennBarryMarketc = "PennBarry_Market__c"; 
        public static readonly string  PennBarryRgnc = "PennBarry_Rgn__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  RuskinMarketc = "Ruskin_Market__c"; 
        public static readonly string  RuskinRgnc = "Ruskin_Rgn__c"; 
        public static readonly string  SSNAMarketc = "SSNA_Market__c"; 
        public static readonly string  SSNARgnc = "SSNA_Rgn__c"; 
        public static readonly string  TitusMarketc = "Titus_Market__c"; 
        public static readonly string  TitusRgnc = "Titus_Rgn__c"; 
        public static readonly string  TrionMarketc = "Trion_Market__c"; 
        public static readonly string  TrionRgnc = "Trion_Rgn__c"; 
        public static readonly string  TuttleBaileyMarketc = "Tuttle_Bailey_Market__c"; 
        public static readonly string  TuttleBaileyRgnc = "Tuttle_Bailey_Rgn__c"; 
        public static readonly string  UPGMarketc = "UPG_Market__c"; 
        public static readonly string  UPGRgnc = "UPG_Rgn__c"; 
        public static readonly string  VRFMarketc = "VRF_Market__c"; 
        public static readonly string  VRFRgnc = "VRF_Rgn__c"; 
        public static readonly string  Name = "Name"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickMarketMappingHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickMarketMappingHistoryField(string s)
        {
            return new PickMarketMappingHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickMarketMappingHistoryField Parse(string text) => text;

        

    }
    public class PickMarketMappingCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickMarketMappingCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickMarketMappingCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickMarketMappingCurrencyIsoCodeConverter))]
    public class PickMarketMappingCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickMarketMappingCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickMarketMappingCurrencyIsoCode(string s)
        {
            return new PickMarketMappingCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickMarketMappingCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickMarketCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickMarketCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickMarketCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickMarketCurrencyIsoCodeConverter))]
    public class PickMarketCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickMarketCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickMarketCurrencyIsoCode(string s)
        {
            return new PickMarketCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickMarketCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickMarketRgnConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickMarketRgn)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickMarketRgn {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickMarketRgnConverter))]
    public class PickMarketRgn
    {
        public static readonly string  Central = "Central"; 
        public static readonly string  West = "West"; 
        public static readonly string  Northeast = "Northeast"; 
        public static readonly string  Southeast = "Southeast"; 
        public static readonly string  NA = "N/A"; 
        public static readonly string  International = "International"; 
        public static readonly string  National = "National"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickMarketRgn o)
        {
            return o.Value;
        }

        public static implicit operator PickMarketRgn(string s)
        {
            return new PickMarketRgn {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickMarketRgn Parse(string text) => text;

        

    }
    public class PickOpportunityStageNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityStageName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityStageName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityStageNameConverter))]
    public class PickOpportunityStageName
    {
        public static readonly string  Target = "Target"; 
        public static readonly string  Prospecting = "Prospecting"; 
        public static readonly string  Budget = "Budget"; 
        public static readonly string  InDesign = "In Design"; 
        public static readonly string  Quote = "Quote"; 
        public static readonly string  Negotiation = "Negotiation"; 
        public static readonly string  NeedsAnalysis = "Needs Analysis"; 
        public static readonly string  Closing = "Closing"; 
        public static readonly string  NegotiationReview = "Negotiation/Review"; 
        public static readonly string  Submittal = "Submittal"; 
        public static readonly string  Qualify = "Qualify"; 
        public static readonly string  DiscoverVerify = "Discover/Verify"; 
        public static readonly string  Discover = "Discover"; 
        public static readonly string  Verify = "Verify"; 
        public static readonly string  Present = "Present"; 
        public static readonly string  Close = "Close"; 
        public static readonly string  ClosedWon = "Closed Won"; 
        public static readonly string  ClosedLost = "Closed Lost"; 
        public static readonly string  QuoteSubmittal = "Quote/Submittal"; 
        public static readonly string  FinalReview = "Final Review"; 
        public static readonly string  Qualification = "Qualification"; 
        public static readonly string  ValueProposition = "Value Proposition"; 
        public static readonly string  IdDecisionMakers = "Id. Decision Makers"; 
        public static readonly string  PerceptionAnalysis = "Perception Analysis"; 
        public static readonly string  ProposalPriceQuote = "Proposal/Price Quote"; 
        public static readonly string  OpenWon = "Open Won"; 
        public static readonly string  Won = "Won"; 
        public static readonly string  Unqualified = "Unqualified"; 
        public static readonly string  OnHold = "On Hold"; 
        public static readonly string  NoBid = "No Bid"; 
        public static readonly string  Abandoned = "Abandoned"; 
        public static readonly string  Lost = "Lost"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  New = "New"; 
        public static readonly string  Readytoreview = "Ready to review"; 
        public static readonly string  Open = "Open"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Proposal = "Proposal"; 
        public static readonly string  Manage = "Manage"; 
        public static readonly string  ClosedCancelled = "Closed Cancelled"; 
        public static readonly string  LeadTarget = "Lead/Target"; 
        public static readonly string  ActiveLM = "Active - L&M"; 
        public static readonly string  Didnotbidrespond = "Did not bid/respond"; 
        public static readonly string  Deferred = "Deferred"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityStageName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityStageName(string s)
        {
            return new PickOpportunityStageName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityStageName Parse(string text) => text;

        

    }
    public class PickOpportunityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityTypeConverter))]
    public class PickOpportunityType
    {
        public static readonly string  PlanSpec = "Plan/Spec"; 
        public static readonly string  PlanSpecReplacement = "Plan/Spec Replacement"; 
        public static readonly string  ValueEngineering = "Value Engineering"; 
        public static readonly string  DesignBuild = "Design Build"; 
        public static readonly string  CommercialReplacement = "Commercial Replacement"; 
        public static readonly string  ResidentialReplacement = "Residential Replacement"; 
        public static readonly string  ResidentialNewConstruction = "Residential New Construction"; 
        public static readonly string  ExistingCustomerUpgrade = "Existing Customer - Upgrade"; 
        public static readonly string  ExistingCustomerReplacement = "Existing Customer - Replacement"; 
        public static readonly string  ExistingCustomerDowngrade = "Existing Customer - Downgrade"; 
        public static readonly string  NewCustomer = "New Customer"; 
        public static readonly string  PartsandSupplies = "Parts and Supplies"; 
        public static readonly string  StockingOrder = "Stocking Order"; 
        public static readonly string  ExistingBusiness = "Existing Business"; 
        public static readonly string  NewBusiness = "New Business"; 
        public static readonly string  ExistingShip = "Existing Ship"; 
        public static readonly string  NewShip = "New Ship"; 
        public static readonly string  NewApplication = "New Application"; 
        public static readonly string  ERPDeployment = "ERP Deployment"; 
        public static readonly string  Integration = "Integration"; 
        public static readonly string  Improvement = "Improvement"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityType(string s)
        {
            return new PickOpportunityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityType Parse(string text) => text;

        

    }
    public class PickOpportunityLeadSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityLeadSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityLeadSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityLeadSourceConverter))]
    public class PickOpportunityLeadSource
    {
        public static readonly string _121SecuritySummit = "121 Security Summit"; 
        public static readonly string  AcuityBrands = "Acuity Brands"; 
        public static readonly string  AHR2016 = "AHR 2016"; 
        public static readonly string  Backlog = "Backlog"; 
        public static readonly string  BestGuess = "Best Guess"; 
        public static readonly string  BidClerkcom = "BidClerk.com"; 
        public static readonly string  BranchFederalGrowthInitiative = "Branch Federal Growth Initiative"; 
        public static readonly string  CCIClintonClimateInitiative = "CCI (Clinton Climate Initiative)"; 
        public static readonly string  ChillerTurnkeyRetrofit = "Chiller Turnkey Retrofit"; 
        public static readonly string  Competition = "Competition"; 
        public static readonly string  ConstructionJournal = "Construction Journal"; 
        public static readonly string  ConsultingEngineerAccountRelationship = "Consulting Engineer Account Relationship"; 
        public static readonly string  ContractorAccountRelationship = "Contractor Account Relationship"; 
        public static readonly string  CooperLighting = "Cooper Lighting"; 
        public static readonly string  CorporateClients = "Corporate Clients"; 
        public static readonly string  CoSell = "Co-Sell"; 
        public static readonly string  CREE = "CREE"; 
        public static readonly string  Customer = "Customer"; 
        public static readonly string  DigitalMarketing = "Digital Marketing"; 
        public static readonly string  DigitalMarketingusingLean = "Digital Marketing using Lean"; 
        public static readonly string  DodgeReports = "Dodge Reports"; 
        public static readonly string  EnergySolutions = "Energy Solutions"; 
        public static readonly string  ENGOPSCustomerLead = "ENG/OPS Customer Lead"; 
        public static readonly string  Engineer = "Engineer"; 
        public static readonly string  ExternalReferral = "External Referral"; 
        public static readonly string  FacilityDude = "FacilityDude"; 
        public static readonly string  FLSP = "FLSP"; 
        public static readonly string  FWDodge = "FW Dodge"; 
        public static readonly string  GCWebsite = "GC Website"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  Gexpro = "Gexpro"; 
        public static readonly string  Glenigans = "Glenigan's"; 
        public static readonly string  Graybar = "Graybar"; 
        public static readonly string  GWS = "GWS"; 
        public static readonly string  HealthcareEnvironmentOptimization = "Healthcare Environment Optimization"; 
        public static readonly string  IBM = "IBM"; 
        public static readonly string  InboundCalls = "Inbound - Calls"; 
        public static readonly string  InboundEmail = "Inbound - Email"; 
        public static readonly string  InboundForm = "Inbound - Form"; 
        public static readonly string  InboundTradeShow = "Inbound - Trade Show"; 
        public static readonly string  LATIBTLM = "LAT IBT L&M"; 
        public static readonly string  LATIBTNewPSA = "LAT IBT New PSA"; 
        public static readonly string  LATIBTNewPSAControls = "LAT IBT New PSA Controls"; 
        public static readonly string  LATIBTNewPSARefrigeration = "LAT IBT New PSA Refrigeration"; 
        public static readonly string  LATIBTRetrofitControls = "LAT IBT Retrofit Controls"; 
        public static readonly string  LATIBTRetrofitLTC = "LAT IBT Retrofit LTC"; 
        public static readonly string  LATIBTRetrofitRefrigeration = "LAT IBT Retrofit Refrigeration"; 
        public static readonly string  LATIBTRetrofitSTC = "LAT IBT Retrofit STC"; 
        public static readonly string  LATLMorPrimeRetrofitFrickControlPanelUpgrade = "LAT L&M or Prime Retrofit / Frick Control Panel Upgrade"; 
        public static readonly string  LATNonIBTSTCReplacement = "LAT Non IBT STC Replacement"; 
        public static readonly string  LATOptispeedVSDRetrofitCompetitorChiller = "LAT Optispeed (VSD)Retrofit - Competitor Chiller"; 
        public static readonly string  LATOptispeedVSDRetrofitYorkChiller = "LAT Optispeed (VSD)Retrofit - York Chiller"; 
        public static readonly string  LATOptiviewControlPanelCompetitorChiller = "LAT Optiview Control Panel - Competitor Chiller"; 
        public static readonly string  LATOptiviewControlPanelYorkChiller = "LAT Optiview Control Panel - York Chiller"; 
        public static readonly string  LATPrimeRetrofitACScrewCompressorReplacementExchange = "LAT Prime Retrofit /AC Screw Compressor Replacement/Exchange"; 
        public static readonly string  LATPrimeRetrofitAircooledChillerCoilChange = "LAT Prime Retrofit / Air-cooled Chiller Coil Change"; 
        public static readonly string  LATPrimeRetrofitDXCompressorOverhaulReplacement = "LAT Prime Retrofit / DX Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitFSUpgrade = "LAT Prime Retrofit / F&S Upgrade"; 
        public static readonly string  LATPrimeRetrofitFrickCompressorOverhaulReplacement = "LAT Prime Retrofit / Frick Compressor Overhaul/Replacement"; 
        public static readonly string  LATPrimeRetrofitNonIBTLTCReplacement = "LAT Prime Retrofit / Non IBT LTC Replacement"; 
        public static readonly string  LATSabroeCompressorOverhaul = "LAT Sabroe Compressor Overhaul"; 
        public static readonly string  LATUnisabPanelUpgrade = "LAT Unisab Panel Upgrade"; 
        public static readonly string  LATYKMotorMonitoring = "LAT YK Motor Monitoring"; 
        public static readonly string  LATYSScrewCompresorReplacementExchange = "LAT YS Screw Compresor Replacement / Exchange"; 
        public static readonly string  LeadPass = "Lead Pass"; 
        public static readonly string  LeanEnergyAnalysis = "Lean Energy Analysis"; 
        public static readonly string  LEEDFullProject = "LEED - Full Project"; 
        public static readonly string  LEEDPartialProject = "LEED - Partial Project"; 
        public static readonly string  LocalTargeting = "Local Targeting"; 
        public static readonly string  MakeYourBuildingsWork = "Make Your Buildings Work"; 
        public static readonly string  MCEmail = "MC E-mail"; 
        public static readonly string  MCFax = "MC Fax"; 
        public static readonly string  MCPhoneCall = "MC Phone Call"; 
        public static readonly string  MCWebsite = "MC Website"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  MidAtlanticBuildersExchange = "Mid-Atlantic Builders Exchange"; 
        public static readonly string  MSC = "MSC"; 
        public static readonly string  MUMS = "MUMS"; 
        public static readonly string  NationalAccounts = "National Accounts"; 
        public static readonly string  NationalSales = "National Sales"; 
        public static readonly string  NetProspex = "NetProspex"; 
        public static readonly string  NorthAmericanTradeShows = "North American Trade Shows"; 
        public static readonly string  Operations = "Operations"; 
        public static readonly string  OracleEquipment = "Oracle Equipment"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  OtherSource = "Other Source"; 
        public static readonly string  OwnerAccountRelationship = "Owner Account Relationship"; 
        public static readonly string  P2000V5Upgrade = "P2000 V5 Upgrade"; 
        public static readonly string  Partner = "Partner"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  Pastquotelostopportunity = "Past quote /lost opportunity"; 
        public static readonly string  Philips = "Philips"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PipelineJumpstart = "Pipeline Jumpstart"; 
        public static readonly string  PipelineJumpstartusingLean = "Pipeline Jumpstart using Lean"; 
        public static readonly string  ProactiveSales = "Proactive Sales"; 
        public static readonly string  PublicInformationWebTradeShowMedia = "Public Information(Web,Trade Show,Media)"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  RFIRFP = "RFI/RFP"; 
        public static readonly string  Sales = "Sales"; 
        public static readonly string  SalesStaff = "Sales Staff"; 
        public static readonly string  SCCNewPSA = "SCC New PSA"; 
        public static readonly string  SCCPSARenewal = "SCC PSA Renewal"; 
        public static readonly string  SchneiderElectric = "Schneider Electric"; 
        public static readonly string  SchoolDude = "SchoolDude"; 
        public static readonly string  Seminar = "Seminar"; 
        public static readonly string  Service = "Service"; 
        public static readonly string  ServiceGeneratedLead = "Service Generated Lead"; 
        public static readonly string  ServiceMarketingLead = "Service Marketing Lead"; 
        public static readonly string  ServiceMarketingLead5 = "Service Marketing Lead (5)"; 
        public static readonly string  ServiceTelemarketingLead = "Service Telemarketing Lead"; 
        public static readonly string  ServiceTelemarketingLeadJ = "Service Telemarketing Lead (J)"; 
        public static readonly string  SilverBulletPerformanceInfrastructure = "Silver Bullet Performance Infrastructure"; 
        public static readonly string  SolutionsDigitalMarketing = "Solutions Digital Marketing"; 
        public static readonly string  SubContract = "Sub-Contract"; 
        public static readonly string  SystemsControlsHVACIR = "Systems (Controls, HVAC, IR)"; 
        public static readonly string  TechnicalAssistant = "Technical Assistant"; 
        public static readonly string  TMEMail = "TM E-Mail"; 
        public static readonly string  TMFax = "TM Fax"; 
        public static readonly string  TMPhoneCall = "TM Phone Call"; 
        public static readonly string  TMTakeOff = "TM Take-Off"; 
        public static readonly string  TopDownBottomUpTargetList = "Top Down Bottom Up Target List"; 
        public static readonly string  TradeShow = "Trade Show"; 
        public static readonly string  TradeshowLeadPerformanceInfrastructure = "Tradeshow Lead Performance Infrastructure"; 
        public static readonly string  UKAIPServiceoffering = "UK - AIP Service offering"; 
        public static readonly string  UKLeadGeneration = "UK Lead Generation"; 
        public static readonly string  Unsolicited = "Unsolicited"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  Vantage = "Vantage"; 
        public static readonly string  Web = "Web"; 
        public static readonly string  WebCampaign = "Web Campaign"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityLeadSource o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityLeadSource(string s)
        {
            return new PickOpportunityLeadSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityLeadSource Parse(string text) => text;

        

    }
    public class PickOpportunityForecastCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityForecastCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityForecastCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityForecastCategoryConverter))]
    public class PickOpportunityForecastCategory
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "BestCase"; 
        public static readonly string  Forecast = "Forecast"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityForecastCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityForecastCategory(string s)
        {
            return new PickOpportunityForecastCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityForecastCategory Parse(string text) => text;

        

    }
    public class PickOpportunityForecastCategoryNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityForecastCategoryName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityForecastCategoryName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityForecastCategoryNameConverter))]
    public class PickOpportunityForecastCategoryName
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Potential = "Potential"; 
        public static readonly string  BestCase = "Best Case"; 
        public static readonly string  Commit = "Commit"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityForecastCategoryName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityForecastCategoryName(string s)
        {
            return new PickOpportunityForecastCategoryName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityForecastCategoryName Parse(string text) => text;

        

    }
    public class PickOpportunityCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityCurrencyIsoCodeConverter))]
    public class PickOpportunityCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityCurrencyIsoCode(string s)
        {
            return new PickOpportunityCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickOpportunityDBCompetitorConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityDBCompetitor)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityDBCompetitor {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityDBCompetitorConverter))]
    public class PickOpportunityDBCompetitor
    {
        public static readonly string  CompetitorA = "Competitor A"; 
        public static readonly string  CompetitorB = "Competitor B"; 
        public static readonly string  CompetitorC = "Competitor C"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityDBCompetitor o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityDBCompetitor(string s)
        {
            return new PickOpportunityDBCompetitor {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityDBCompetitor Parse(string text) => text;

        

    }
    public class PickOpportunityLostReasonConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityLostReason)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityLostReason {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityLostReasonConverter))]
    public class PickOpportunityLostReason
    {
        public static readonly string  Price = "Price"; 
        public static readonly string  Product = "Product"; 
        public static readonly string  Competition = "Competition"; 
        public static readonly string  Unknown = "Unknown"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  Quality = "Quality"; 
        public static readonly string  Availability = "Availability"; 
        public static readonly string  Over30days = "Over 30 days"; 
        public static readonly string  Contractornotawardedthejob = "Contractor not awarded the job"; 
        public static readonly string  Relationship = "Relationship"; 
        public static readonly string  LeadTime = "Lead Time"; 
        public static readonly string  SpecItem = "Spec Item"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityLostReason o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityLostReason(string s)
        {
            return new PickOpportunityLostReason {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityLostReason Parse(string text) => text;

        

    }
    public class PickOpportunityProductConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityProduct)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityProduct {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityProductConverter))]
    public class PickOpportunityProduct
    {
        public static readonly string  Callsfor15SEERHPCondensersFirstCofancoils = "Calls for 15 SEER HP Condensers & First Co fan coils"; 
        public static readonly string  Highefficiencypackageheatpump = "High efficiency package heat pump"; 
        public static readonly string  Sidedischargesplitheatpump = "Side discharge split heat pump"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  None = "None"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityProduct o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityProduct(string s)
        {
            return new PickOpportunityProduct {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityProduct Parse(string text) => text;

        

    }
    public class PickOpportunityDesignBasisConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityDesignBasis)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityDesignBasis {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityDesignBasisConverter))]
    public class PickOpportunityDesignBasis
    {
        public static readonly string  Aaon = "Aaon"; 
        public static readonly string  AirMonitor = "Air Monitor"; 
        public static readonly string  Alliance = "Alliance"; 
        public static readonly string  AlliedCommercialbyLennox = "Allied Commercial (by Lennox)"; 
        public static readonly string  Amana = "Amana"; 
        public static readonly string  AmericanStandard = "American Standard"; 
        public static readonly string  Bard = "Bard"; 
        public static readonly string  Bryant = "Bryant"; 
        public static readonly string  Carrier = "Carrier"; 
        public static readonly string  ChillerPlant = "Chiller Plant"; 
        public static readonly string  ClimateMasterWSHP = "Climate Master (WSHP)"; 
        public static readonly string  Daikin = "Daikin"; 
        public static readonly string  DaikinVRF = "Daikin VRF"; 
        public static readonly string  EnergyLab = "Energy Lab"; 
        public static readonly string  FirstCompany = "First Company"; 
        public static readonly string  FloridaHeatPump = "Florida Heat Pump"; 
        public static readonly string  Fujitsu = "Fujitsu"; 
        public static readonly string  FujitsuVRF = "Fujitsu VRF"; 
        public static readonly string  GeneralElectric = "General Electric"; 
        public static readonly string  Gibson = "Gibson"; 
        public static readonly string  Goodman = "Goodman"; 
        public static readonly string  Greenheck = "Greenheck"; 
        public static readonly string  Huntair = "Huntair"; 
        public static readonly string  JohnsonControlsControls = "Johnson Controls - Controls"; 
        public static readonly string  JohnsonControlsEquipment = "Johnson Controls - Equipment"; 
        public static readonly string  JohnsonControlsEquipmentCon = "Johnson Controls - Equipment & Con"; 
        public static readonly string  JohnsonMarcraft = "Johnson - Marcraft"; 
        public static readonly string  Lennox = "Lennox"; 
        public static readonly string  LGDuctless = "LG Ductless"; 
        public static readonly string  Liebert = "Liebert"; 
        public static readonly string  Luxaire = "Luxaire"; 
        public static readonly string  MagicAire = "Magic Aire"; 
        public static readonly string  McQuay = "McQuay"; 
        public static readonly string  Mitsubishi = "Mitsubishi"; 
        public static readonly string  MitsubishiVRF = "Mitsubishi VRF"; 
        public static readonly string  Modine = "Modine"; 
        public static readonly string  NotSpecified = "Not Specified"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  PlasmaAir = "Plasma Air"; 
        public static readonly string  Provent = "Provent"; 
        public static readonly string  Reznor = "Reznor"; 
        public static readonly string  RheemRuud = "Rheem Ruud"; 
        public static readonly string  Samsung = "Samsung"; 
        public static readonly string  SamsungDVMS = "Samsung DVMS"; 
        public static readonly string  Sanyo = "Sanyo"; 
        public static readonly string  Skymark = "Skymark"; 
        public static readonly string  SterilAire = "Steril-Aire"; 
        public static readonly string  Sterling = "Sterling"; 
        public static readonly string  Temtrol = "Temtrol"; 
        public static readonly string  Titus = "Titus"; 
        public static readonly string  Toshiba = "Toshiba"; 
        public static readonly string  Trane = "Trane"; 
        public static readonly string  Unknown = "Unknown"; 
        public static readonly string  WaterFurnace = "Water Furnace"; 
        public static readonly string  YorkESG = "York ESG"; 
        public static readonly string  YorkUPG = "York UPG"; 
        public static readonly string  YorkUPGESGMix = "York UPG/ESG Mix"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityDesignBasis o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityDesignBasis(string s)
        {
            return new PickOpportunityDesignBasis {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityDesignBasis Parse(string text) => text;

        

    }
    public class PickOpportunityEquipmentTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityEquipmentType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityEquipmentType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityEquipmentTypeConverter))]
    public class PickOpportunityEquipmentType
    {
        public static readonly string _100OACoolingHeating = "100% O/A Cooling/ Heating"; 
        public static readonly string  AirCooledChillers = "Air Cooled Chillers"; 
        public static readonly string  AirHandlingUnit = "Air Handling Unit"; 
        public static readonly string  AirHandlingUnitsCustom = "Air Handling Units - Custom"; 
        public static readonly string  AirHandlingUnitsSolution = "Air Handling Units - Solution"; 
        public static readonly string  Boiler = "Boiler"; 
        public static readonly string  CentrifugalChillers = "Centrifugal Chillers"; 
        public static readonly string  CentrifugalChillersYMC2 = "Centrifugal Chillers (YMC2)"; 
        public static readonly string  ChilledWaterEquipment = "Chilled Water Equipment"; 
        public static readonly string  ChillerPlant = "Chiller Plant"; 
        public static readonly string  CommercialResidentialSplits = "Commercial/ Residential Splits"; 
        public static readonly string  CommercialRTUSplitsGas = "Commercial RTU/ Splits - Gas"; 
        public static readonly string  CommercialRTUSplitsHP = "Commercial RTU/ Splits - HP"; 
        public static readonly string  CommercialRTUCoolOnly = "Commercial RTU - Cool Only"; 
        public static readonly string  CommercialRTUGas = "Commercial RTU - Gas"; 
        public static readonly string  CommercialRTUHP = "Commercial RTU - HP"; 
        public static readonly string  CommercialRTUwControlsCool = "Commercial RTU w/  Controls - Cool"; 
        public static readonly string  CommercialRTUwControlsGas = "Commercial RTU w/ Controls - Gas"; 
        public static readonly string  CommercialRTUwControlsHP = "Commercial RTU w/ Controls - HP"; 
        public static readonly string  CommercialSplitsControls = "Commercial Splits + Controls"; 
        public static readonly string  CondensingUnitsCommercial = "Condensing Units - Commercial"; 
        public static readonly string  CondensingUnitsResidential = "Condensing Units - Residential"; 
        public static readonly string  Controls = "Controls"; 
        public static readonly string  DuctlessSplits = "Ductless Splits"; 
        public static readonly string  EnergyRecoveryUnit = "Energy Recovery Unit"; 
        public static readonly string  FanCoilsCommercial = "Fan Coils - Commercial"; 
        public static readonly string  FanCoilsResidential = "Fan Coils - Residential"; 
        public static readonly string  Furnace = "Furnace"; 
        public static readonly string  HeatPumpVRF = "Heat Pump VRF"; 
        public static readonly string  HeatPumpVRFWaterCooled = "Heat Pump VRF Water Cooled"; 
        public static readonly string  HeatRecoverVRFWaterCooled = "Heat Recover VRF Water Cooled"; 
        public static readonly string  HeatRecoveryVRF = "Heat Recovery VRF"; 
        public static readonly string  Packaged25100ton = "Packaged 25-100 ton"; 
        public static readonly string  PackagedChampion = "Packaged Champion"; 
        public static readonly string  PackagedLargeSunline = "Packaged Large Sunline"; 
        public static readonly string  PackagedPredator = "Packaged Predator"; 
        public static readonly string  PackagedPrestige = "Packaged Prestige"; 
        public static readonly string  PackagedSmallSunline = "Packaged Small Sunline"; 
        public static readonly string  ResidentialPackage = "Residential Package"; 
        public static readonly string  ResidentialSplitGas = "Residential Split - Gas"; 
        public static readonly string  ResidentialSplitGasHP = "Residential Split - Gas/ HP"; 
        public static readonly string  ResidentialSplitHP = "Residential Split - HP"; 
        public static readonly string  ResidentialSplitsHWHeat = "Residential Splits - HW Heat"; 
        public static readonly string  Split1520ton = "Split 15 & 20 ton"; 
        public static readonly string  Split15ton = "Split 1-5 ton"; 
        public static readonly string  Split2550ton = "Split 25-50 ton"; 
        public static readonly string  Split75125ton = "Split 7.5-12.5 ton"; 
        public static readonly string  UVCLights = "UVC Lights"; 
        public static readonly string  VAVBoxesOnly = "VAV Boxes Only"; 
        public static readonly string  WallMountedHeatPump = "Wall Mounted Heat Pump"; 
        public static readonly string  WaterSourceHeatPumps = "Water Source Heat Pumps"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityEquipmentType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityEquipmentType(string s)
        {
            return new PickOpportunityEquipmentType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityEquipmentType Parse(string text) => text;

        

    }
    public class PickOpportunityApprovalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityApprovalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityApprovalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityApprovalStatusConverter))]
    public class PickOpportunityApprovalStatus
    {
        public static readonly string  Submitted = "Submitted"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Approved = "Approved"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityApprovalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityApprovalStatus(string s)
        {
            return new PickOpportunityApprovalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityApprovalStatus Parse(string text) => text;

        

    }
    public class PickOpportunityNACLeadTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityNACLeadType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityNACLeadType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityNACLeadTypeConverter))]
    public class PickOpportunityNACLeadType
    {
        public static readonly string  NewChannelPartner = "New Channel Partner"; 
        public static readonly string  NewCustomerforaChannelPartner = "New Customer for a Channel Partner"; 
        public static readonly string  NewBrandorProductforaChannelPartner = "New Brand or Product for a Channel Partner"; 
        public static readonly string  NewJobOpportunityforaChannelPartner = "New Job Opportunity for a Channel Partner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityNACLeadType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityNACLeadType(string s)
        {
            return new PickOpportunityNACLeadType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityNACLeadType Parse(string text) => text;

        

    }
    public class PickOpportunityFieldHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityFieldHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityFieldHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityFieldHistoryFieldConverter))]
    public class PickOpportunityFieldHistoryField
    {
        public static readonly string  PctOfCostToDiverseSuppliersc = "Pct_Of_Cost_To_Diverse_Suppliers__c"; 
        public static readonly string  X18DigitLeadIDc = "X18_Digit_Lead_ID__c"; 
        public static readonly string  AbandonedDefferedDatec = "Abandoned_Deffered_Date__c"; 
        public static readonly string  AccountVerticalMktc = "Account_Vertical_Mkt__c"; 
        public static readonly string  Account = "Account"; 
        public static readonly string  ActionPlanc = "Action_Plan__c"; 
        public static readonly string  LeadAddress1c = "Lead_Address1__c"; 
        public static readonly string  Address2c = "Address2__c"; 
        public static readonly string  AgentCostc = "Agent_Cost__c"; 
        public static readonly string  AgentMarginc = "Agent_Margin__c"; 
        public static readonly string  AllowOpportunityClosec = "Allow_Opportunity_Close__c"; 
        public static readonly string  Isaltprocurevehiclec = "Is_alt_procure_vehicle__c"; 
        public static readonly string  Amount = "Amount"; 
        public static readonly string  AmountExpectedtoRevenueinCFYc = "Amount_Expected_to_Revenue_in_CFY__c"; 
        public static readonly string  Amt500Kc = "Amt_500K__c"; 
        public static readonly string  ApprovalStatusc = "Approval_Status__c"; 
        public static readonly string  Architecttxtc = "Architect_txt__c"; 
        public static readonly string  AssociatedOpportunityc = "Associated_Opportunity__c"; 
        public static readonly string  AssociatedtoTASOpportunityc = "Associated_to_TAS_Opportunity__c"; 
        public static readonly string  AutocreateRenewalc = "Auto_create_Renewal__c"; 
        public static readonly string  AwardedToc = "Awarded_To__c"; 
        public static readonly string  BaselineGrossMarginc = "Baseline_Gross_Margin__c"; 
        public static readonly string  BidDatec = "Bid_Date__c"; 
        public static readonly string  BidProposec = "Bid_Propose__c"; 
        public static readonly string  BiddingReportStatusc = "Bidding_Report_Status__c"; 
        public static readonly string  BidTimec = "Bid_Time__c"; 
        public static readonly string  BidTypec = "Bid_Type__c"; 
        public static readonly string  BlueRedc = "Blue_Red__c"; 
        public static readonly string  BlueRedOverridec = "Blue_Red_Override__c"; 
        public static readonly string  BODc = "BOD__c"; 
        public static readonly string  BODDescriptionc = "BOD_Description__c"; 
        public static readonly string  IsBODPSAc = "Is_BOD_PSA__c"; 
        public static readonly string  BODStatusc = "BOD_Status__c"; 
        public static readonly string  BranchCodec = "Branch_Code__c"; 
        public static readonly string  Brandc = "Brand__c"; 
        public static readonly string  BudgetedAmountc = "Budgeted_Amount__c"; 
        public static readonly string  BuildingUseDescriptionENc = "Building_Use_Description_EN__c"; 
        public static readonly string  BuildingUsec = "Building_Use__c"; 
        public static readonly string  BusinessCategoryc = "Business_Category__c"; 
        public static readonly string  BusinessUnitBUc = "Business_Unit_BU__c"; 
        public static readonly string  BuyPricec = "Buy_Price__c"; 
        public static readonly string  Campaignc = "Campaign__c"; 
        public static readonly string  CBREc = "CBRE__c"; 
        public static readonly string  CorporateInfluencec = "Corporate_Influence__c"; 
        public static readonly string  CBREBusinessLineInfluencec = "CBRE_Business_Line_Influence__c"; 
        public static readonly string  CBSBackPopulatedc = "CBS_Back_Populated__c"; 
        public static readonly string  CBSMasterContractc = "CBS_Master_Contract__c"; 
        public static readonly string  IsCBSPostedSuccessfullyc = "Is_CBS_Posted_Successfully__c"; 
        public static readonly string  IsCentralplantsolutionc = "Is_Central_plant_solution__c"; 
        public static readonly string  ChangeOrderc = "Change_Order__c"; 
        public static readonly string  ChangeOrderNumberc = "Change_Order_Number__c"; 
        public static readonly string  ChangeOrderReasonc = "Change_Order_Reason__c"; 
        public static readonly string  LeadCityc = "Lead_City__c"; 
        public static readonly string  ClonedFromOpportunityc = "Cloned_From_Opportunity__c"; 
        public static readonly string  CloseDate = "CloseDate"; 
        public static readonly string  ClosedGrossProfitc = "Closed_Gross_Profit__c"; 
        public static readonly string  CloseDatec = "Close_Date__c"; 
        public static readonly string  ClosedTotCostc = "Closed_Tot_Cost__c"; 
        public static readonly string  ClosedWonupdatedbytriggerc = "Closed_Won_updated_by_trigger__c"; 
        public static readonly string  CloseMarginPctc = "Close_Margin_Pct__c"; 
        public static readonly string  Commentc = "Comment__c"; 
        public static readonly string  CommercialPackageAmountc = "Commercial_Package_Amount__c"; 
        public static readonly string  CommercialSplitAmountc = "Commercial_Split_Amount__c"; 
        public static readonly string  CompSourceCheckc = "Comp_Source_Check__c"; 
        public static readonly string  ConstructionTermc = "Construction_Term__c"; 
        public static readonly string  ConsultingEngineerc = "Consulting_Engineer__c"; 
        public static readonly string  Contactc = "Contact__c"; 
        public static readonly string  ContactNACc = "Contact_NAC__c"; 
        public static readonly string  Contact2c = "Contact2__c"; 
        public static readonly string  Contact3c = "Contact3__c"; 
        public static readonly string  Contact4c = "Contact4__c"; 
        public static readonly string  Continentc = "Continent__c"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  ContractDurationc = "Contract_Duration__c"; 
        public static readonly string  ContractEndDatec = "Contract_End_Date__c"; 
        public static readonly string  IsDiverseParticipationInCntrc = "Is_Diverse_Participation_In_Cntr__c"; 
        public static readonly string  IsWirelessOrBWSIInCntrc = "Is_Wireless_Or_BWSI_In_Cntr__c"; 
        public static readonly string  ContractingVehiclec = "Contracting_Vehicle__c"; 
        public static readonly string  CntrNbrc = "Cntr_Nbr__c"; 
        public static readonly string  ContractNumberc = "Contract_Number__c"; 
        public static readonly string  Contractorc = "Contractor__c"; 
        public static readonly string  ContractorFieldc = "Contractor_Field__c"; 
        public static readonly string  ContractStartDatec = "Contract_Start_Date__c"; 
        public static readonly string  ContractSubTypec = "Contract_Sub_Type__c"; 
        public static readonly string  CntrTypec = "Cntr_Type__c"; 
        public static readonly string  ContractTypec = "Contract_Type__c"; 
        public static readonly string  ContractTypeLAc = "Contract_Type_LA__c"; 
        public static readonly string  ContractTypeMEc = "Contract_Type_ME__c"; 
        public static readonly string  CorporateAccountc = "Corporate_Account__c"; 
        public static readonly string  Costc = "Cost__c"; 
        public static readonly string  Countryc = "Country__c"; 
        public static readonly string  LACountryc = "LA_Country__c"; 
        public static readonly string  LeadCountryc = "Lead_Country__c"; 
        public static readonly string  LeadCountyc = "Lead_County__c"; 
        public static readonly string  ConstructionPtsCPProjectc = "ConstructionPts__CP_Project__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CreatedByIdentifierc = "Created_By_Identifier__c"; 
        public static readonly string  opportunityCreatedFromLead = "opportunityCreatedFromLead"; 
        public static readonly string  CustomerPOc = "Customer_PO__c"; 
        public static readonly string  CustomerPODatec = "Customer_PO_Date__c"; 
        public static readonly string  DBCompetitorc = "DB_Competitor__c"; 
        public static readonly string  DBCompetitor2c = "DB_Competitor2__c"; 
        public static readonly string  DMAPPDealmakerOpportunityc = "DMAPP__Dealmaker_Opportunity__c"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  DesignatedContractor2c = "Designated_Contractor_2__c"; 
        public static readonly string  DesignBasisc = "Design_Basis__c"; 
        public static readonly string  DesignerCtyc = "Designer_Cty__c"; 
        public static readonly string  DesignerIDc = "Designer_ID__c"; 
        public static readonly string  DiscoverDatec = "Discover_Date__c"; 
        public static readonly string  DiscoverPhasec = "Discover_Phase__c"; 
        public static readonly string  Districtc = "District__c"; 
        public static readonly string  DivisionLAc = "Division_LA__c"; 
        public static readonly string  DOAProcessc = "DOA_Process__c"; 
        public static readonly string  DOAStatusc = "DOA_Status__c"; 
        public static readonly string  DocumentLocationc = "Document_Location__c"; 
        public static readonly string  DocumentURLc = "Document_URL__c"; 
        public static readonly string  DoNotIncludePlanc = "Do_Not_Include_Plan__c"; 
        public static readonly string  DownPaymentAmountc = "Down_Payment_Amount__c"; 
        public static readonly string  EMailc = "E_Mail__c"; 
        public static readonly string  Engineerc = "Engineer__c"; 
        public static readonly string  Engineertxtc = "Engineer_txt__c"; 
        public static readonly string  EngineerFieldc = "Engineer_Field__c"; 
        public static readonly string  IsePSAOpportunityc = "Is_ePSA_Opportunity__c"; 
        public static readonly string  IsEquipmentCntrPSALeadc = "Is_Equipment_Cntr_PSA_Lead__c"; 
        public static readonly string  EquipmentProductAssociatedc = "Equipment_Product_Associated__c"; 
        public static readonly string  EquipmentTypec = "Equipment_Type__c"; 
        public static readonly string  NxGenErrorc = "NxGen_Error__c"; 
        public static readonly string  EstMarginc = "Est_Margin__c"; 
        public static readonly string  EstConstructionValc = "Est_Construction_Val__c"; 
        public static readonly string  EstControlValc = "Est_Control_Val__c"; 
        public static readonly string  EstimatedAmountControlsc = "Estimated_Amount_Controls__c"; 
        public static readonly string  EstimatedAmountEquipmentc = "Estimated_Amount_Equipment__c"; 
        public static readonly string  EstimatedAmountFirec = "Estimated_Amount_Fire__c"; 
        public static readonly string  EstimatedAmountFireSecurityc = "Estimated_Amount_Fire_Security__c"; 
        public static readonly string  EstimatedAmountPSAc = "Estimated_Amount_PSA__c"; 
        public static readonly string  EstimatedAmountSecurityc = "Estimated_Amount_Security__c"; 
        public static readonly string  EstimatedAmountTotalc = "Estimated_Amount_Total__c"; 
        public static readonly string  EstimatedCntrAmtc = "Estimated_Cntr_Amt__c"; 
        public static readonly string  EstimatedMarginPctc = "Estimated_Margin_Pct__c"; 
        public static readonly string  EstShipDtc = "Est_Ship_Dt__c"; 
        public static readonly string  EstimatedValTypec = "Estimated_Val_Type__c"; 
        public static readonly string  EUOrgIDc = "EU_Org_ID__c"; 
        public static readonly string  ExecutingBranchc = "Executing_Branch__c"; 
        public static readonly string  ExternalIdc = "External_Id__c"; 
        public static readonly string  FacilityCategoryc = "Facility_Category__c"; 
        public static readonly string  FacilityOwnerc = "Facility_Owner__c"; 
        public static readonly string  FacilitySubTypec = "Facility_Sub_Type__c"; 
        public static readonly string  FacilityTypec = "Facility_Type__c"; 
        public static readonly string  FacilityTypeeuc = "Facility_Type_eu__c"; 
        public static readonly string  FactoredMarginc = "Factored_Margin__c"; 
        public static readonly string  factoredvolumec = "factored_volume__c"; 
        public static readonly string  FactoryReleaseDatec = "Factory_Release_Date__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FinalAmountc = "Final_Amount__c"; 
        public static readonly string  FinanceSystemc = "Finance_System__c"; 
        public static readonly string  FinancialSystemc = "Financial_System__c"; 
        public static readonly string  Financierc = "Financier__c"; 
        public static readonly string  FinancierTypec = "Financier_Type__c"; 
        public static readonly string  FinancingTypec = "Financing_Type__c"; 
        public static readonly string  FirstNamec = "First_Name__c"; 
        public static readonly string  FloorAreainsqmeterc = "Floor_Area_in_sq_meter__c"; 
        public static readonly string  Followupc = "Follow_up__c"; 
        public static readonly string  ForecastCategoryName = "ForecastCategoryName"; 
        public static readonly string  ForecastMutedc = "Forecast_Muted__c"; 
        public static readonly string  CGBidDtc = "CG_Bid_Dt__c"; 
        public static readonly string  GeneralContractorc = "General_Contractor__c"; 
        public static readonly string  GeneralContractortxtc = "General_Contractor_txt__c"; 
        public static readonly string  Geographyc = "Geography__c"; 
        public static readonly string  GFBCLobbyistc = "GFBC_Lobbyist__c"; 
        public static readonly string  GlobalIDc = "GlobalID__c"; 
        public static readonly string  GlobalLOBc = "Global_LOB__c"; 
        public static readonly string  GPOAcknowledgementc = "GPO_Acknowledgement__c"; 
        public static readonly string  GreenBuildCertfprsudqualphasec = "Green_Build_Certf_prsud_qual_phase__c"; 
        public static readonly string  GreenBldgCertPursdatpresentpropsdc = "Green_Bldg_Cert_Pursd_at_present_propsd__c"; 
        public static readonly string  GreenBuildingCertpursudatClosec = "Green_Building_Cert_pursud_at_Close__c"; 
        public static readonly string  GreenBuildingLEEDCertificationc = "Green_Building_LEED_Certification__c"; 
        public static readonly string  GrossMarginAmountc = "Gross_Margin_Amount__c"; 
        public static readonly string  GrossMarginPercentc = "Gross_Margin_Percent__c"; 
        public static readonly string  HighPriorityc = "High_Priority__c"; 
        public static readonly string  IdeaQuestRelationshipc = "IdeaQuest_Relationship__c"; 
        public static readonly string  IMOc = "IMO__c"; 
        public static readonly string  ImportBatchIDc = "Import_Batch_ID__c"; 
        public static readonly string  LeadImportDatec = "Lead_Import_Date__c"; 
        public static readonly string  InForecastc = "In_Forecast__c"; 
        public static readonly string  InterestRtc = "Interest_Rt__c"; 
        public static readonly string  InvoicedPricec = "Invoiced_Price__c"; 
        public static readonly string  IPAc = "IPA__c"; 
        public static readonly string  IPAQuoteNumberc = "IPA_Quote_Number__c"; 
        public static readonly string  IscalaCompanyCodec = "Iscala_Company_Code__c"; 
        public static readonly string  IsCustMechanicalContractorc = "Is_Cust_Mechanical_Contractor__c"; 
        public static readonly string  IsinLegalReviewc = "Is_in_Legal_Review__c"; 
        public static readonly string  IsMCInstallingc = "Is_MC_Installing__c"; 
        public static readonly string  IsOriginalRecordc = "Is_Original_Record__c"; 
        public static readonly string  IsRejectedc = "Is_Rejected__c"; 
        public static readonly string  IsBWSIortechFIMc = "Is_BWSI_or_tech_FIM__c"; 
        public static readonly string  Istheredemandresponsec = "Is_there_demand_response__c"; 
        public static readonly string  IsthereLEEDcertrequiredc = "Is_there_LEED_cert_required__c"; 
        public static readonly string  IsRenewableEnergyComponentc = "Is_Renewable_Energy_Component__c"; 
        public static readonly string  IsthisOpportunityaMajorProjectc = "Is_this_Opportunity_a_Major_Project__c"; 
        public static readonly string  JCIBasisofDesignBODPresentc = "JCI_Basis_of_Design_BOD_Present__c"; 
        public static readonly string  JCIHOFVNetworkEffectc = "JCIHOFV_Network_Effect__c"; 
        public static readonly string  LAAmountUSDc = "LA_Amount_USD__c"; 
        public static readonly string  LastNamec = "Last_Name__c"; 
        public static readonly string  LeadAmountControlsc = "Lead_Amount_Controls__c"; 
        public static readonly string  LeadBookedDatec = "Lead_Booked_Date__c"; 
        public static readonly string  LeadCommentsc = "Lead_Comments__c"; 
        public static readonly string  LeadCustomerTypec = "Lead_Customer_Type__c"; 
        public static readonly string  LeadDesignerc = "Lead_Designer__c"; 
        public static readonly string  LeadGeneralContractorc = "Lead_GeneralContractor__c"; 
        public static readonly string  LeadIDc = "Lead_ID__c"; 
        public static readonly string  LeadOrigContractNumberc = "Lead_Orig_Contract_Number__c"; 
        public static readonly string  LeadOriginalBookedAmtc = "Lead_Original_Booked_Amt__c"; 
        public static readonly string  LeadOwnerc = "Lead_Owner__c"; 
        public static readonly string  LeadSourcec = "Lead_Source__c"; 
        public static readonly string  LeadSource = "LeadSource"; 
        public static readonly string  LeadStrategicPriorityAccountc = "Lead_Strategic_Priority_Account__c"; 
        public static readonly string  NACLeadTypec = "NAC_Lead_Type__c"; 
        public static readonly string  LeadWorkSiteCountryc = "Lead_Work_Site_Country__c"; 
        public static readonly string  WasLEANEnergyAnalysisc = "Was_LEAN_Energy_Analysis__c"; 
        public static readonly string  LegacyIDc = "Legacy_ID__c"; 
        public static readonly string  LMSIDc = "LMS_ID__c"; 
        public static readonly string  LMSPSAContractNumberc = "LMS_PSA_Contract_Number__c"; 
        public static readonly string  LMSRevisionc = "LMS_Revision__c"; 
        public static readonly string  LOBAmountCommercialc = "LOB_Amount_Commercial__c"; 
        public static readonly string  LOBAMTControlsc = "LOB_AMT_Controls__c"; 
        public static readonly string  LOBAmountEquipmentc = "LOB_Amount_Equipment__c"; 
        public static readonly string  LOBAmountMechanicalServicec = "LOB_Amount_Mechanical_Service__c"; 
        public static readonly string  LOBAmtNoProdCodec = "LOB_Amt_No_Prod_Code__c"; 
        public static readonly string  LOBAmountSecurityFirec = "LOB_Amount_Security_Fire__c"; 
        public static readonly string  LOBAmountSolutionsc = "LOB_Amount_Solutions__c"; 
        public static readonly string  Lobbyistorconsultantengagedc = "Lobbyist_or_consultant_engaged__c"; 
        public static readonly string  LOBGrossProfitCommercialc = "LOB_Gross_Profit_Commercial__c"; 
        public static readonly string  LOBGPControlsc = "LOB_GP_Controls__c"; 
        public static readonly string  LOBGrossProfitEquipmentc = "LOB_Gross_Profit_Equipment__c"; 
        public static readonly string  LOBGrossProfitMechanicalServic = "LOB_Gross_Profit_Mechanical_Servi__c"; 
        public static readonly string  LOBGrossProfitNoProductCodec = "LOB_Gross_Profit_No_Product_Code__c"; 
        public static readonly string  LOBGrossProfitSecurityFirec = "LOB_Gross_Profit_Security_Fire__c"; 
        public static readonly string  LOBGrossProfitSolutionsc = "LOB_Gross_Profit_Solutions__c"; 
        public static readonly string  LocARnumc = "Loc_AR_num__c"; 
        public static readonly string  Locationc = "Location__c"; 
        public static readonly string  LostReasonc = "Lost_Reason__c"; 
        public static readonly string  LOSTTOc = "LOST_TO__c"; 
        public static readonly string  MajorProjectOverridec = "Major_Project_Override__c"; 
        public static readonly string  Manageremailc = "Manager_email__c"; 
        public static readonly string  LeadMgrGlobalidcc = "Lead_MgrGlobalid_c__c"; 
        public static readonly string  ManagerSecuredGMPlanc = "Manager_Secured_GM_Plan__c"; 
        public static readonly string  Marketc = "Market__c"; 
        public static readonly string  MarketingInfluencec = "Marketing_Influence__c"; 
        public static readonly string  MEAMarketSegmentc = "MEA_Market_Segment__c"; 
        public static readonly string  MarketTypec = "Market_Type__c"; 
        public static readonly string  MarkforDeletionc = "Mark_for_Deletion__c"; 
        public static readonly string  MessagesfromCBSc = "Messages_from_CBS__c"; 
        public static readonly string  MinimumGrossMarginc = "Minimum_Gross_Margin__c"; 
        public static readonly string  MultipleLOBsc = "Multiple_LOBs__c"; 
        public static readonly string  MustWinBranchc = "Must_Win_Branch__c"; 
        public static readonly string  MustWinRegionc = "Must_Win_Region__c"; 
        public static readonly string  NextStep = "NextStep"; 
        public static readonly string  EUNonSalesParticipantc = "EU_Non_Sales_Participant__c"; 
        public static readonly string  NotificationSentc = "Notification_Sent__c"; 
        public static readonly string  NumberofControlsitemsc = "Number_of_Controls_items__c"; 
        public static readonly string  Changesc = "Changes__c"; 
        public static readonly string  NumberofShipsc = "Number_of_Ships__c"; 
        public static readonly string  NumberofUsersc = "Number_of_Users__c"; 
        public static readonly string  ChangeOrderOfAgreementc = "Change_Order_Of_Agreement__c"; 
        public static readonly string  NxGenCR252c = "NxGen_CR_252__c"; 
        public static readonly string  NxGenEstimateIDc = "NxGen_Estimate_ID__c"; 
        public static readonly string  NxGenEstimateNamec = "NxGen_Estimate_Name__c"; 
        public static readonly string  NxGenOpportunityAmountc = "NxGen_Opportunity_Amount__c"; 
        public static readonly string  NxGenOpportunityStatusc = "NxGen_Opportunity_Status__c"; 
        public static readonly string  OpenForCostc = "Open_For_Cost__c"; 
        public static readonly string  OperatingTermc = "Operating_Term__c"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  OpportunityGradec = "Opportunity_Grade__c"; 
        public static readonly string  WasinresponsetoRFIRFQRFPc = "Was_in_response_to_RFI_RFQ_RFP__c"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  RecordType = "RecordType"; 
        public static readonly string  OpportunityStageHistoryc = "Opportunity_Stage_History__c"; 
        public static readonly string  OpportunityStrategyc = "Opportunity_Strategy__c"; 
        public static readonly string  OpportunityTypec = "Opportunity_Type__c"; 
        public static readonly string  OppStartc = "Opp_Start__c"; 
        public static readonly string  Opptycommericalrealestateflagc = "Oppty_commerical_realestate_flag__c"; 
        public static readonly string  OptyBranchManagerc = "Opty_Branch_Manager__c"; 
        public static readonly string  OptyCountryc = "Opty_Country__c"; 
        public static readonly string  SiteCityc = "Site_City__c"; 
        public static readonly string  SiteCountryc = "Site_Country__c"; 
        public static readonly string  SiteStateProvincec = "Site_State_Province__c"; 
        public static readonly string  SiteStreetc = "Site_Street__c"; 
        public static readonly string  SiteZipPostalCodec = "Site_Zip_Postal_Code__c"; 
        public static readonly string  Orderc = "Order__c"; 
        public static readonly string  OriginalImportDatec = "Original_Import_Date__c"; 
        public static readonly string  OriginalContractorsc = "Original_Contractors__c"; 
        public static readonly string  OriginalEquipmentCntrAmtc = "Original_Equipment_Cntr_Amt__c"; 
        public static readonly string  OriginalEquipmentCntrNbrc = "Original_Equipment_Cntr_Nbr__c"; 
        public static readonly string  OriginalOpportunityc = "Original_Opportunity__c"; 
        public static readonly string  OriginalReportDatec = "Original_Report_Date__c"; 
        public static readonly string  OriginatingRequestorc = "Originating_Requestor__c"; 
        public static readonly string  OtherContractTypeLAc = "Other_Contract_Type_LA__c"; 
        public static readonly string  OtherFinancingc = "Other_Financing__c"; 
        public static readonly string  OtherLeadSourceLAc = "Other_Lead_Source_LA__c"; 
        public static readonly string  OtherReasonLostc = "Other_Reason_Lost__c"; 
        public static readonly string  OtherWinLossReasonLAc = "Other_Win_Loss_Reason_LA__c"; 
        public static readonly string  OverallFinancingTermc = "Overall_Financing_Term__c"; 
        public static readonly string  OverrideExecutingBranchc = "Override_Executing_Branch__c"; 
        public static readonly string  Ownerc = "Owner__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  OwnerClassc = "Owner_Class__c"; 
        public static readonly string  PONumberc = "P_O_Number__c"; 
        public static readonly string  P3Flagc = "P3_Flag__c"; 
        public static readonly string  PardotLeadTypec = "Pardot_Lead_Type__c"; 
        public static readonly string  NACParentProgramc = "NAC_Parent_Program__c"; 
        public static readonly string  ParticipantBillToc = "Participant_BillTo__c"; 
        public static readonly string  ParticipantBookingOwnerBillToc = "Participant_Booking_Owner_BillTo__c"; 
        public static readonly string  ParticipantContractWithc = "Participant_ContractWith__c"; 
        public static readonly string  Partofmastercontractc = "Part_of_master_contract__c"; 
        public static readonly string  KNDYCPQPaymentTermc = "KNDYCPQ__Payment_Term__c"; 
        public static readonly string  PBprocessedc = "PB_processed__c"; 
        public static readonly string  PDAc = "PDA__c"; 
        public static readonly string  PDAAmtc = "PDA_Amt__c"; 
        public static readonly string  PlannedCloseDatec = "Planned_Close_Date__c"; 
        public static readonly string  PlannedInvoiceDatec = "Planned_Invoice_Date__c"; 
        public static readonly string  LeadPostalCodec = "Lead_Postal_Code__c"; 
        public static readonly string  PresentDatec = "Present_Date__c"; 
        public static readonly string  PreviousOwnerc = "Previous_Owner__c"; 
        public static readonly string  PreviousPSAContractc = "Previous_PSA_Contract__c"; 
        public static readonly string  PriceAdjustmentIPAVRFONLYc = "Price_Adjustment_IPA_VRF_ONLY__c"; 
        public static readonly string  PriceLostc = "Price_Lost__c"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  PrimaryLOBc = "Primary_LOB__c"; 
        public static readonly string  PrimaryLOBLAc = "Primary_LOB_LA__c"; 
        public static readonly string  PrimaryLocationc = "Primary_Location__c"; 
        public static readonly string  IfPrimisethrOwnrorJCIslctfrmlstc = "If_Prim_is_ethr_Ownr_or_JCI_slct_frm_lst__c"; 
        public static readonly string  Priorityc = "Priority__c"; 
        public static readonly string  IsPrivate = "IsPrivate"; 
        public static readonly string  Probability = "Probability"; 
        public static readonly string  SSNAProbabilityc = "SSNA_Probability__c"; 
        public static readonly string  processedc = "processed__c"; 
        public static readonly string  NACProductc = "NAC_Product__c"; 
        public static readonly string  Productc = "Product__c"; 
        public static readonly string  ProductDescriptionc = "Product_Description__c"; 
        public static readonly string  ProductGroupingsc = "Product_Groupings__c"; 
        public static readonly string  Profitc = "Profit__c"; 
        public static readonly string  ProjectBidCloseDatec = "Project_Bid_Close_Date__c"; 
        public static readonly string  ProjectDeliveryDatec = "Project_Delivery_Date__c"; 
        public static readonly string  ProjectEndc = "Project_End__c"; 
        public static readonly string  ProjectEndDatec = "Project_End_Date__c"; 
        public static readonly string  ProjectExWorksDatec = "Project_Ex_Works_Date__c"; 
        public static readonly string  ProjectFollowUpDatec = "Project_Follow_Up_Date__c"; 
        public static readonly string  ProjectNamec = "Project_Name__c"; 
        public static readonly string  ProjectNotesc = "Project_Notes__c"; 
        public static readonly string  ProjectNumberc = "Project_Number__c"; 
        public static readonly string  ProjectOrderDatec = "Project_Order_Date__c"; 
        public static readonly string  ProjectSizec = "Project_Size__c"; 
        public static readonly string  ProjectStagec = "Project_Stage__c"; 
        public static readonly string  ProjectStartc = "Project_Start__c"; 
        public static readonly string  ProjectStartDatec = "Project_Start_Date__c"; 
        public static readonly string  ProjectTonnageAmountVRFONLYc = "Project_Tonnage_Amount_VRF_ONLY__c"; 
        public static readonly string  ProposedPricec = "Proposed_Price__c"; 
        public static readonly string  Proprietarinessofthejobc = "Proprietariness_of_the_job__c"; 
        public static readonly string  PSAMultiYearc = "PSA_Multi_Year__c"; 
        public static readonly string  PSAOriginalContractAmountc = "PSAOriginalContractAmount__c"; 
        public static readonly string  PublicOpportunityc = "Public_Opportunity__c"; 
        public static readonly string  QualifiedSalesc = "Qualified_Sales__c"; 
        public static readonly string  QualifyDatec = "Qualify_Date__c"; 
        public static readonly string  QualifyPhasec = "Qualify_Phase__c"; 
        public static readonly string  QualifyPhaseActualCompletionDatec = "Qualify_Phase_Actual_Completion_Date__c"; 
        public static readonly string  TotalOpportunityQuantity = "TotalOpportunityQuantity"; 
        public static readonly string  ProjectNumbereuc = "Project_Number_eu__c"; 
        public static readonly string  QuoteDatec = "Quote_Date__c"; 
        public static readonly string  QuoteIDc = "Quote_ID__c"; 
        public static readonly string  QuoteSubmittalDatec = "QuoteSubmittalDate__c"; 
        public static readonly string  QuoteTestSubmittalc = "QuoteTestSubmittal__c"; 
        public static readonly string  RCOLeadTypec = "RCO_Lead_Type__c"; 
        public static readonly string  ReasonforDeletionc = "Reason_for_Deletion__c"; 
        public static readonly string  ReasonforNotUsingRecommendedGrossMc = "Reason_for_Not_Using_Recommended_Gross_M__c"; 
        public static readonly string  ReasonofDisengagec = "Reason_of_Disengage__c"; 
        public static readonly string  RecommendedGrossMarginc = "Recommended_Gross_Margin__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  RefProjectnumc = "Ref_Project_num__c"; 
        public static readonly string  Refrigerationonlyc = "Refrigeration_only__c"; 
        public static readonly string  Regionc = "Region__c"; 
        public static readonly string  RegionForSharingRulec = "Region_For_Sharing_Rule__c"; 
        public static readonly string  RgnRollupc = "Rgn_Rollup__c"; 
        public static readonly string  RelatedOpportunityc = "Related_Opportunity__c"; 
        public static readonly string  ReleaseDtc = "Release_Dt__c"; 
        public static readonly string  RenewalOpportunityc = "Renewal_Opportunity__c"; 
        public static readonly string  RenewalOwnerc = "Renewal_Owner__c"; 
        public static readonly string  ReportDatec = "Report_Date__c"; 
        public static readonly string  RepTypec = "Rep_Type__c"; 
        public static readonly string  RequirementTypec = "Requirement_Type__c"; 
        public static readonly string  ReserveCntrNumberc = "Reserve_Cntr_Number__c"; 
        public static readonly string  ResidentialPackageAmountc = "Residential_Package_Amount__c"; 
        public static readonly string  RevAnnualExpDatec = "Rev_Annual_Exp_Date__c"; 
        public static readonly string  Revisionc = "Revision__c"; 
        public static readonly string  RunValidationRulec = "Run_Validation_Rule__c"; 
        public static readonly string  SalesManagerc = "Sales_Manager__c"; 
        public static readonly string  SalesObjectivec = "Sales_Objective__c"; 
        public static readonly string  SalesOrderProjectContractnumberrefc = "Sales_Order_Project_Contract_number_ref__c"; 
        public static readonly string  SalesOrderReferencec = "Sales_Order_Reference__c"; 
        public static readonly string  SalesOrgc = "Sales_Org__c"; 
        public static readonly string  SalesOrgOverridec = "Sales_Org_Override__c"; 
        public static readonly string  SalesProcessStartc = "Sales_Process_Start__c"; 
        public static readonly string  SalesRankc = "Sales_Rank__c"; 
        public static readonly string  IsSalesTeamEmailNotificationc = "Is_Sales_Team_Email_Notification__c"; 
        public static readonly string  SAPBrandc = "SAP_Brand__c"; 
        public static readonly string  secondreasonlossc = "second_reason_loss__c"; 
        public static readonly string  SenttoNxGenc = "Sent_to_NxGen__c"; 
        public static readonly string  ProductOfferingc = "Product_Offering__c"; 
        public static readonly string  KNDYCPQShippingMethodc = "KNDYCPQ__ShippingMethod__c"; 
        public static readonly string  sitetypeoverridec = "site_type_override__c"; 
        public static readonly string  SMISACCOUNTNBRc = "SMIS_ACCOUNT_NBR__c"; 
        public static readonly string  SMISOpportunityIDc = "SMIS_Opportunity_ID__c"; 
        public static readonly string  Stamp1c = "Stamp1__c"; 
        public static readonly string  SMISSTAMP2c = "SMIS_STAMP2__c"; 
        public static readonly string  SourceIDc = "Source_ID__c"; 
        public static readonly string  SpecialEnvrc = "Special_Envr__c"; 
        public static readonly string  SpecificOfferingc = "Specific_Offering__c"; 
        public static readonly string  SPRequestLOBc = "SP_Request_LOB__c"; 
        public static readonly string  TASCompletedc = "TAS_Completed__c"; 
        public static readonly string  StageName = "StageName"; 
        public static readonly string  StageDateConstructc = "Stage_Date_Construct__c"; 
        public static readonly string  StageDateStartc = "Stage_Date_Start__c"; 
        public static readonly string  LeadStateProvc = "Lead_State_Prov__c"; 
        public static readonly string  Statuseuc = "Status_eu__c"; 
        public static readonly string  NACStrategicInitiativec = "NAC_Strategic_Initiative__c"; 
        public static readonly string  StrategicInitiativesc = "Strategic_Initiatives__c"; 
        public static readonly string  StreetRateDiscountRequestedc = "Street_Rate_Discount_Requested__c"; 
        public static readonly string  Isstructuredaltfinc = "Is_structured_alt_fin__c"; 
        public static readonly string  SubLOBc = "Sub_LOB__c"; 
        public static readonly string  SubLOBLAc = "Sub_LOB_LA__c"; 
        public static readonly string  SubmitterBranchDistrictc = "Submitter_Branch_District__c"; 
        public static readonly string  SubmitterEmailc = "Submitter_Email__c"; 
        public static readonly string  SubmitterJobTitlec = "Submitter_Job_Title__c"; 
        public static readonly string  SubmitterNamec = "Submitter_Name__c"; 
        public static readonly string  SubmitterPhonec = "Submitter_Phone__c"; 
        public static readonly string  LASubRegionc = "LA_Sub_Region__c"; 
        public static readonly string  SubRegioneuc = "Sub_Region_eu__c"; 
        public static readonly string  SubStagec = "Sub_Stage__c"; 
        public static readonly string  SubTypec = "Sub_Type__c"; 
        public static readonly string  MustWinc = "Must_Win__c"; 
        public static readonly string  KNDYCPQSyncedQuotec = "KNDYCPQ__SyncedQuote__c"; 
        public static readonly string  SyncedQuote = "SyncedQuote"; 
        public static readonly string  SystemGeneratedc = "System_Generated__c"; 
        public static readonly string  TargetGPc = "Target_GP__c"; 
        public static readonly string  TargetGrossMarginc = "Target_Gross_Margin__c"; 
        public static readonly string  TargetMarginc = "Target_Margin__c"; 
        public static readonly string  TargetPricec = "Target_Price__c"; 
        public static readonly string  TASDtc = "TAS_Dt__c"; 
        public static readonly string  TASStatusc = "TAS_Status__c"; 
        public static readonly string  TemporaryOwnerc = "Temporary_Owner__c"; 
        public static readonly string  TenderDatec = "Tender_Date__c"; 
        public static readonly string  BranchTerritoryc = "Branch_Territory__c"; 
        public static readonly string  tesc = "tes__c"; 
        public static readonly string  ThirdPartyAmountc = "Third_Party_Amount__c"; 
        public static readonly string  TierCdc = "Tier_Cd__c"; 
        public static readonly string  TotalAmtc = "Total_Amt__c"; 
        public static readonly string  TotalGPSDesignHoursc = "Total_GPS_Design_Hours__c"; 
        public static readonly string  TotalPctc = "Total_Pct__c"; 
        public static readonly string  TotalProjectEngineeringHoursAutc = "Total_Project_Engineering_Hours_Aut__c"; 
        public static readonly string  TotalProjectEngineeringhoursRefc = "Total_Project_Engineering_hours_Ref__c"; 
        public static readonly string  TotalProjectEngineeringhoursHVACc = "Total_Project_Engineering_hours_HVAC__c"; 
        public static readonly string  TotalProjectManagementHoursc = "Total_Project_Management_Hours__c"; 
        public static readonly string  TotalSquareFootagec = "Total_Square_Footage__c"; 
        public static readonly string  TraditionalSiemensTraneetcc = "Traditional_Siemens_Trane_etc__c"; 
        public static readonly string  TransferedtoExecutionc = "Transfered_to_Execution__c"; 
        public static readonly string  Type = "Type"; 
        public static readonly string  TYPE15c = "TYPE1_5__c"; 
        public static readonly string  Typeof3rdPartyFundingc = "Type_of_3rd_Party_Funding__c"; 
        public static readonly string  Typeofnegotiationopptyeuc = "Type_of_negotiation_oppty_eu__c"; 
        public static readonly string  Userc = "User__c"; 
        public static readonly string  UserDefined1c = "User_Defined_1__c"; 
        public static readonly string  UserDefined2c = "User_Defined_2__c"; 
        public static readonly string  UserDefined3c = "User_Defined_3__c"; 
        public static readonly string  UserDefined4c = "User_Defined_4__c"; 
        public static readonly string  UserField10c = "User_Field_10__c"; 
        public static readonly string  USTQuotePricec = "UST_Quote_Price__c"; 
        public static readonly string  ValidateOpportunitywithCBSc = "Validate_Opportunity_with_CBS__c"; 
        public static readonly string  VerifyDatec = "Verify_Date__c"; 
        public static readonly string  VerifyPhasec = "Verify_Phase__c"; 
        public static readonly string  VMc = "VM__c"; 
        public static readonly string  VerticalMarketTypec = "Vertical_Market_Type__c"; 
        public static readonly string  VesselNamec = "Vessel_Name__c"; 
        public static readonly string  IsVRFc = "Is_VRF__c"; 
        public static readonly string  VRFAmtc = "VRF_Amt__c"; 
        public static readonly string  VRFRSMc = "VRF_RSM__c"; 
        public static readonly string  VRFTypeVRFONLYc = "VRF_Type_VRF_ONLY__c"; 
        public static readonly string  VRFWonVRFONLYc = "VRF_Won_VRF_ONLY__c"; 
        public static readonly string  WasDiverseSupplierAskedForc = "Was_Diverse_Supplier_Asked_For__c"; 
        public static readonly string  WasBayMktforceusedc = "Was_BayMktforce_used__c"; 
        public static readonly string  Iswatermetertreatmentstlightingc = "Is_water_meter_treatment_st_lighting__c"; 
        public static readonly string  WillDRbeinSolutionsbundlec = "Will_DR_be_in_Solutions_bundle__c"; 
        public static readonly string  WinLossReasonc = "Win_Loss_Reason__c"; 
        public static readonly string  WonLostReasonc = "Won_Lost_Reason__c"; 
        public static readonly string  WonLostReasonDetailc = "Won_Lost_Reason_Detail__c"; 
        public static readonly string  WorkTypec = "Work_Type__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityFieldHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityFieldHistoryField(string s)
        {
            return new PickOpportunityFieldHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityFieldHistoryField Parse(string text) => text;

        

    }
    public class PickOpportunityHistoryStageNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityHistoryStageName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityHistoryStageName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityHistoryStageNameConverter))]
    public class PickOpportunityHistoryStageName
    {
        public static readonly string  Target = "Target"; 
        public static readonly string  Prospecting = "Prospecting"; 
        public static readonly string  Budget = "Budget"; 
        public static readonly string  InDesign = "In Design"; 
        public static readonly string  Quote = "Quote"; 
        public static readonly string  Negotiation = "Negotiation"; 
        public static readonly string  NeedsAnalysis = "Needs Analysis"; 
        public static readonly string  Closing = "Closing"; 
        public static readonly string  NegotiationReview = "Negotiation/Review"; 
        public static readonly string  Submittal = "Submittal"; 
        public static readonly string  Qualify = "Qualify"; 
        public static readonly string  DiscoverVerify = "Discover/Verify"; 
        public static readonly string  Discover = "Discover"; 
        public static readonly string  Verify = "Verify"; 
        public static readonly string  Present = "Present"; 
        public static readonly string  Close = "Close"; 
        public static readonly string  ClosedWon = "Closed Won"; 
        public static readonly string  ClosedLost = "Closed Lost"; 
        public static readonly string  QuoteSubmittal = "Quote/Submittal"; 
        public static readonly string  FinalReview = "Final Review"; 
        public static readonly string  Qualification = "Qualification"; 
        public static readonly string  ValueProposition = "Value Proposition"; 
        public static readonly string  IdDecisionMakers = "Id. Decision Makers"; 
        public static readonly string  PerceptionAnalysis = "Perception Analysis"; 
        public static readonly string  ProposalPriceQuote = "Proposal/Price Quote"; 
        public static readonly string  OpenWon = "Open Won"; 
        public static readonly string  Won = "Won"; 
        public static readonly string  Unqualified = "Unqualified"; 
        public static readonly string  OnHold = "On Hold"; 
        public static readonly string  NoBid = "No Bid"; 
        public static readonly string  Abandoned = "Abandoned"; 
        public static readonly string  Lost = "Lost"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  New = "New"; 
        public static readonly string  Readytoreview = "Ready to review"; 
        public static readonly string  Open = "Open"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Proposal = "Proposal"; 
        public static readonly string  Manage = "Manage"; 
        public static readonly string  ClosedCancelled = "Closed Cancelled"; 
        public static readonly string  LeadTarget = "Lead/Target"; 
        public static readonly string  ActiveLM = "Active - L&M"; 
        public static readonly string  Didnotbidrespond = "Did not bid/respond"; 
        public static readonly string  Deferred = "Deferred"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityHistoryStageName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityHistoryStageName(string s)
        {
            return new PickOpportunityHistoryStageName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityHistoryStageName Parse(string text) => text;

        

    }
    public class PickOpportunityHistoryForecastCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityHistoryForecastCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityHistoryForecastCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityHistoryForecastCategoryConverter))]
    public class PickOpportunityHistoryForecastCategory
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "BestCase"; 
        public static readonly string  Forecast = "Forecast"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityHistoryForecastCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityHistoryForecastCategory(string s)
        {
            return new PickOpportunityHistoryForecastCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityHistoryForecastCategory Parse(string text) => text;

        

    }
    public class PickOpportunityHistoryCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityHistoryCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityHistoryCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityHistoryCurrencyIsoCodeConverter))]
    public class PickOpportunityHistoryCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityHistoryCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityHistoryCurrencyIsoCode(string s)
        {
            return new PickOpportunityHistoryCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityHistoryCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickOpportunityLineItemCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityLineItemCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityLineItemCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityLineItemCurrencyIsoCodeConverter))]
    public class PickOpportunityLineItemCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityLineItemCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityLineItemCurrencyIsoCode(string s)
        {
            return new PickOpportunityLineItemCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityLineItemCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickOpportunityPhaseCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityPhaseCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityPhaseCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityPhaseCurrencyIsoCodeConverter))]
    public class PickOpportunityPhaseCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityPhaseCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityPhaseCurrencyIsoCode(string s)
        {
            return new PickOpportunityPhaseCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityPhaseCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickOpportunitySplitCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunitySplitCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunitySplitCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunitySplitCurrencyIsoCodeConverter))]
    public class PickOpportunitySplitCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunitySplitCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunitySplitCurrencyIsoCode(string s)
        {
            return new PickOpportunitySplitCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunitySplitCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickOpportunityStatusCodesCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityStatusCodesCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityStatusCodesCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityStatusCodesCurrencyIsoCodeConverter))]
    public class PickOpportunityStatusCodesCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityStatusCodesCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityStatusCodesCurrencyIsoCode(string s)
        {
            return new PickOpportunityStatusCodesCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityStatusCodesCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickOpportunityStagesCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityStagesCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityStagesCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityStagesCurrencyIsoCodeConverter))]
    public class PickOpportunityStagesCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityStagesCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityStagesCurrencyIsoCode(string s)
        {
            return new PickOpportunityStagesCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityStagesCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickProduct2FamilyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2Family)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2Family {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2FamilyConverter))]
    public class PickProduct2Family
    {
        public static readonly string  None = "None"; 
        public static readonly string  BAS = "BAS"; 
        public static readonly string  FS = "F&S"; 
        public static readonly string  GAS = "GAS"; 
        public static readonly string  HVAC = "HVAC"; 
        public static readonly string  REFRIG = "REFRIG"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  JCIBAS = "JCI BAS"; 
        public static readonly string  AccessControlOtherProducts = "Access Control - Other Products"; 
        public static readonly string  AHU = "AHU"; 
        public static readonly string  AirCooledCondenser = "Air Cooled Condenser"; 
        public static readonly string  AirCooledCondensingUnit = "Air Cooled Condensing Unit"; 
        public static readonly string  AirCooledRecipChiller = "Air Cooled Recip Chiller"; 
        public static readonly string  AirCooledScrollChiller = "Air Cooled Scroll Chiller"; 
        public static readonly string  AirCooledScrollHeatPump = "Air Cooled Scroll Heat Pump"; 
        public static readonly string  AirCooledVSDScrewChiller = "Air Cooled VSD Screw Chiller"; 
        public static readonly string  Avayavoicedatavideonetworkeqpmnt = "Avaya voice, data, video network eqpmnt"; 
        public static readonly string  BASJCILegacySystem = "BAS - JCI Legacy System"; 
        public static readonly string  BASMetasysWirelessSensingNetwork = "BAS - Metasys Wireless Sensing/Network"; 
        public static readonly string  BASCustomIntegrationDevelopment = "BAS -Custom Integration & Development"; 
        public static readonly string  BASSubcontracted = "BAS Subcontracted"; 
        public static readonly string  BASHlthcareEnvrnmntOptimizationHEO = "BAS-Hlthcare Envrnmnt Optimization (HEO)"; 
        public static readonly string  BuildingWideSystemsIntegrationByJCI = "Building Wide Systems Integration-By JCI"; 
        public static readonly string  BuildingWideSystemsIntegrationCisco = "Building Wide Systems Integration-Cisco"; 
        public static readonly string  Cascadeunits = "Cascade units"; 
        public static readonly string  CCTVVideoManagementJCIProduct = "CCTV & Video Management - JCI Product"; 
        public static readonly string  CCTVVideoManagementOtherProduct = "CCTV & Video Management - Other Product"; 
        public static readonly string  CCU = "CCU"; 
        public static readonly string  ChillerPlantOptimization = "Chiller Plant Optimization"; 
        public static readonly string  CiscoEnergyManagementCEM = "Cisco Energy Management (CEM)"; 
        public static readonly string  CiscoProductsServices = "Cisco Products & Services"; 
        public static readonly string  CommercialRefrigerationPENNProducts = "Commercial Refrigeration (PENN Products)"; 
        public static readonly string  Condensers = "Condensers"; 
        public static readonly string  ConnectedChillers = "Connected Chillers"; 
        public static readonly string  DataCentersSolutions = "Data Centers Solutions"; 
        public static readonly string  Electricalandcontrolpanels = "Electrical and control panels"; 
        public static readonly string  EnterpriseSecuritySolutions = "Enterprise Security Solutions"; 
        public static readonly string  Evaporators = "Evaporators"; 
        public static readonly string  FCU = "FCU"; 
        public static readonly string  HPProductsServices = "HP Products & Services"; 
        public static readonly string  Industrialchillers = "Industrial chillers"; 
        public static readonly string  Installation = "Installation"; 
        public static readonly string  IRCentrifugalCompressor = "IR Centrifugal Compressor"; 
        public static readonly string  IRHeatPumps = "IR Heat Pumps"; 
        public static readonly string  IRReciprocatingcompressors = "IR Reciprocating compressors"; 
        public static readonly string  IRScrewcompressors = "IR Screw compressors"; 
        public static readonly string  JCIAccessControlSystems = "JCI- Access Control Systems"; 
        public static readonly string  JCIFireAlarmSystems = "JCI Fire Alarm Systems"; 
        public static readonly string  JCIGuestRoomManagementSystem = "JCI- Guest Room Management System"; 
        public static readonly string  JCIVSD = "JCI VSD"; 
        public static readonly string  JCISecuritySystems = "JCI-Security Systems"; 
        public static readonly string  LargeTonnageChiller = "Large Tonnage Chiller"; 
        public static readonly string  MEDorEDARTJCIMntcMgmtSWEFIRM = "MED or EDART/JCI Mntc Mgmt SW (EFIRM)"; 
        public static readonly string  MetasysEnergyOptimization = "Metasys Energy Optimization"; 
        public static readonly string  MetasysValidatedEnvironmentMVE = "Metasys Validated Environment (MVE)"; 
        public static readonly string  NonJCIFireAlarmSystems = "Non-JCI Fire Alarm Systems"; 
        public static readonly string  NonJCILowVoltageBuildingSystems = "Non-JCI Low Voltage Building Systems"; 
        public static readonly string  NonJCISecuritySystems = "Non-JCI Security Systems"; 
        public static readonly string  Others = "Others"; 
        public static readonly string  PAC = "PAC"; 
        public static readonly string  PhysicalSecuritySystemsOther = "Physical Security Systems - Other"; 
        public static readonly string  RAC = "RAC"; 
        public static readonly string  Refrigerantbrinevalvescontrols = "Refrigerant & brine valves & controls"; 
        public static readonly string  Refrigerantandbrinepumps = "Refrigerant and brine pumps"; 
        public static readonly string  Refrigerantvessels = "Refrigerant vessels"; 
        public static readonly string  UtilityMeteringSystems = "Utility Metering Systems"; 
        public static readonly string  VAV = "VAV"; 
        public static readonly string  VRF = "VRF"; 
        public static readonly string  WaterCooledScrewChiller = "Water Cooled Screw Chiller"; 
        public static readonly string  WaterCooledScrollChiller = "Water Cooled Scroll Chiller"; 
        public static readonly string  WaterCooledScrollChllrwRemoteCndsr = "Water Cooled Scroll Chllr w/Remote Cndsr"; 
        public static readonly string  WatercooledScrollCondenserlessChllr = "Water cooled Scroll Condenserless Chllr"; 
        public static readonly string  WaterCooledVSDScrewChiller = "Water Cooled VSD Screw Chiller"; 
        public static readonly string  Laptop = "Laptop"; 
        public static readonly string  AirCooledScrewVSDFreecoolingChiller = "Air Cooled Screw VSD (Free cooling) Chiller"; 
        public static readonly string  LargeSplit = "Large Split"; 
        public static readonly string  CCUYCP = "CCU YC-P"; 
        public static readonly string  AirHandlingUnits = "Air Handling Units"; 
        public static readonly string  YLPB = "YLPB"; 
        public static readonly string  AirCooledScrewChiller = "Air Cooled Screw Chiller"; 
        public static readonly string  IndustrialPump = "Industrial Pump"; 
        public static readonly string  Compressor = "Compressor"; 
        public static readonly string  PlateHeatExchanger = "Plate Heat Exchanger"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2Family o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2Family(string s)
        {
            return new PickProduct2Family {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2Family Parse(string text) => text;

        

    }
    public class PickProduct2CurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2CurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2CurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2CurrencyIsoCodeConverter))]
    public class PickProduct2CurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2CurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2CurrencyIsoCode(string s)
        {
            return new PickProduct2CurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2CurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickProduct2BusUnitConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2BusUnit)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2BusUnit {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2BusUnitConverter))]
    public class PickProduct2BusUnit
    {
        public static readonly string  Controls = "Controls"; 
        public static readonly string  UPG = "UPG"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2BusUnit o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2BusUnit(string s)
        {
            return new PickProduct2BusUnit {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2BusUnit Parse(string text) => text;

        

    }
    public class PickProduct2ProductLineConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2ProductLine)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2ProductLine {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2ProductLineConverter))]
    public class PickProduct2ProductLine
    {
        public static readonly string  AutomationEnginesSuperviso = "Automation Engines & Superviso"; 
        public static readonly string  ControlPanels = "Control Panels"; 
        public static readonly string  FieldControllers = "Field Controllers"; 
        public static readonly string  LegacyControllers = "Legacy Controllers"; 
        public static readonly string  Software = "Software"; 
        public static readonly string  FireandSecurity = "Fire and Security"; 
        public static readonly string  GAS = "GAS"; 
        public static readonly string  Actuators = "Actuators"; 
        public static readonly string  DampersandAFMS = "Dampers and AFMS"; 
        public static readonly string  Pneumatic = "Pneumatic"; 
        public static readonly string  SensorsStats = "Sensors & Stats"; 
        public static readonly string  ValvesActuators = "Valves & Actuators"; 
        public static readonly string  VariableSpeedDrives = "Variable Speed Drives"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  ElectroMechanicalPressure = "Electro-Mechanical - Pressure"; 
        public static readonly string  ElectroMechanicalTemperature = "Electro-Mechanical - Temperature"; 
        public static readonly string  Electronic = "Electronic"; 
        public static readonly string  RefrigerationValves = "Refrigeration Valves"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2ProductLine o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2ProductLine(string s)
        {
            return new PickProduct2ProductLine {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2ProductLine Parse(string text) => text;

        

    }
    public class PickProduct2ProductMiniSeriesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2ProductMiniSeries)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2ProductMiniSeries {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2ProductMiniSeriesConverter))]
    public class PickProduct2ProductMiniSeries
    {
        public static readonly string  VMAControllers = "VMA Controllers"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2ProductMiniSeries o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2ProductMiniSeries(string s)
        {
            return new PickProduct2ProductMiniSeries {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2ProductMiniSeries Parse(string text) => text;

        

    }
    public class PickProduct2ProductSeriesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2ProductSeries)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2ProductSeries {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2ProductSeriesConverter))]
    public class PickProduct2ProductSeries
    {
        public static readonly string _01050617 = "01050617"; 
        public static readonly string  MetasysFECFamily = "Metasys FEC Family"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2ProductSeries o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2ProductSeries(string s)
        {
            return new PickProduct2ProductSeries {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2ProductSeries Parse(string text) => text;

        

    }
    public class PickProduct2ProductTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2ProductType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2ProductType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2ProductTypeConverter))]
    public class PickProduct2ProductType
    {
        public static readonly string  Res = "Res"; 
        public static readonly string  BAS = "BAS"; 
        public static readonly string  FLTRFilter = "FLTR - Filter"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2ProductType o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2ProductType(string s)
        {
            return new PickProduct2ProductType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2ProductType Parse(string text) => text;

        

    }
    public class PickProduct2MarketShareCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2MarketShareCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2MarketShareCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2MarketShareCategoryConverter))]
    public class PickProduct2MarketShareCategory
    {
        public static readonly string  AHU = "AHU"; 
        public static readonly string  AHUCustom = "AHU - Custom"; 
        public static readonly string  Filters = "Filters"; 
        public static readonly string  HVACComponents = "HVAC Components"; 
        public static readonly string  RTU = "RTU"; 
        public static readonly string  BuildingAutomationSystems = "Building Automation Systems"; 
        public static readonly string  ChilledBeams = "Chilled Beams"; 
        public static readonly string  Chillers = "Chillers"; 
        public static readonly string  ChillersModular = "Chillers - Modular"; 
        public static readonly string  Hearth = "Hearth"; 
        public static readonly string  Coils = "Coils"; 
        public static readonly string  AccessPanels = "Access Panels"; 
        public static readonly string  Fans = "Fans"; 
        public static readonly string  Vent = "Vent"; 
        public static readonly string  WSHP = "WSHP"; 
        public static readonly string  FlexDuct = "Flex / Duct"; 
        public static readonly string  RTUAccessories = "RTU Accessories"; 
        public static readonly string  ERV = "ERV"; 
        public static readonly string  FCU = "FCU"; 
        public static readonly string  Security = "Security"; 
        public static readonly string  GRDs = "GRD's"; 
        public static readonly string  Louvers = "Louvers"; 
        public static readonly string  RefrigerationControls = "Refrigeration Controls"; 
        public static readonly string  ResidentialAHU = "Residential AHU"; 
        public static readonly string  ResidentialFurnaces = "Residential Furnaces"; 
        public static readonly string  ResidentialRTU = "Residential RTU"; 
        public static readonly string  ResidentialWSHP = "Residential WSHP"; 
        public static readonly string  VAV = "VAV"; 
        public static readonly string  TStats = "T-Stats"; 
        public static readonly string  UnderfloorAirDistribution = "Underfloor Air Distribution"; 
        public static readonly string  Drives = "Drives"; 
        public static readonly string  VRF = "VRF"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2MarketShareCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2MarketShareCategory(string s)
        {
            return new PickProduct2MarketShareCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2MarketShareCategory Parse(string text) => text;

        

    }
    public class PickProduct2SMEUItemTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2SMEUItemType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2SMEUItemType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2SMEUItemTypeConverter))]
    public class PickProduct2SMEUItemType
    {
        public static readonly string  Labor = "Labor"; 
        public static readonly string  Expense = "Expense"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2SMEUItemType o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2SMEUItemType(string s)
        {
            return new PickProduct2SMEUItemType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2SMEUItemType Parse(string text) => text;

        

    }
    public class PickProductLineHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProductLineHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProductLineHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProductLineHistoryFieldConverter))]
    public class PickProductLineHistoryField
    {
        public static readonly string  Acctc = "Acct__c"; 
        public static readonly string  IsActivec = "Is_Active__c"; 
        public static readonly string  AprCFYpctPlanAmtc = "Apr_CFY_pct_Plan_Amt__c"; 
        public static readonly string  AprCFYPctPlanCostc = "Apr_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  AprCFYpctPlanQtyc = "Apr_CFY_pct_Plan_Qty__c"; 
        public static readonly string  AprCFYAmtc = "Apr_CFY_Amt__c"; 
        public static readonly string  AprCFYCostc = "Apr_CFY_Cost__c"; 
        public static readonly string  AprCFYPlanAmtc = "Apr_CFY_Plan_Amt__c"; 
        public static readonly string  AprCFYPlanCostc = "Apr_CFY_Plan_Cost__c"; 
        public static readonly string  AprCFYPlanQtyc = "Apr_CFY_Plan_Qty__c"; 
        public static readonly string  AprCFYQtyc = "Apr_CFY_Qty__c"; 
        public static readonly string  AprPFYAmtc = "Apr_PFY_Amt__c"; 
        public static readonly string  AprPFYCostc = "Apr_PFY_Cost__c"; 
        public static readonly string  AprPFYQtyc = "Apr_PFY_Qty__c"; 
        public static readonly string  AprYBLAmtc = "Apr_YBL_Amt__c"; 
        public static readonly string  AprYBLCostc = "Apr_YBL_Cost__c"; 
        public static readonly string  AprYBLQtyc = "Apr_YBL_Qty__c"; 
        public static readonly string  AugCFYpctPlanAmtc = "Aug_CFY_pct_Plan_Amt__c"; 
        public static readonly string  AugCFYPctPlanCostc = "Aug_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  AugCFYpctPlanQtyc = "Aug_CFY_pct_Plan_Qty__c"; 
        public static readonly string  AugCFYAmtc = "Aug_CFY_Amt__c"; 
        public static readonly string  AugCFYCostc = "Aug_CFY_Cost__c"; 
        public static readonly string  AugCFYPlanAmtc = "Aug_CFY_Plan_Amt__c"; 
        public static readonly string  AugCFYPlanCostc = "Aug_CFY_Plan_Cost__c"; 
        public static readonly string  AugCFYPlanQtyc = "Aug_CFY_Plan_Qty__c"; 
        public static readonly string  AugCFYQtyc = "Aug_CFY_Qty__c"; 
        public static readonly string  AugPFYAmtc = "Aug_PFY_Amt__c"; 
        public static readonly string  AugPFYCostc = "Aug_PFY_Cost__c"; 
        public static readonly string  AugPFYQtyc = "Aug_PFY_Qty__c"; 
        public static readonly string  AugYBLAmtc = "Aug_YBL_Amt__c"; 
        public static readonly string  AugYBLCostc = "Aug_YBL_Cost__c"; 
        public static readonly string  AugYBLQtyc = "Aug_YBL_Qty__c"; 
        public static readonly string  ChannelLineCardc = "Channel_Line_Card__c"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  DecCFYpctPlanAmtc = "Dec_CFY_pct_Plan_Amt__c"; 
        public static readonly string  DecCFYPctPlanCostc = "Dec_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  DecCFYpctPlanQtyc = "Dec_CFY_pct_Plan_Qty__c"; 
        public static readonly string  DecCFYAmtc = "Dec_CFY_Amt__c"; 
        public static readonly string  DecCFYCostc = "Dec_CFY_Cost__c"; 
        public static readonly string  DecCFYPlanAmtc = "Dec_CFY_Plan_Amt__c"; 
        public static readonly string  DecCFYPlanCostc = "Dec_CFY_Plan_Cost__c"; 
        public static readonly string  DecCFYPlanQtyc = "Dec_CFY_Plan_Qty__c"; 
        public static readonly string  DecCFYQtyc = "Dec_CFY_Qty__c"; 
        public static readonly string  DecPFYAmtc = "Dec_PFY_Amt__c"; 
        public static readonly string  DecPFYCostc = "Dec_PFY_Cost__c"; 
        public static readonly string  DecPFYQtyc = "Dec_PFY_Qty__c"; 
        public static readonly string  DecYBLAmtc = "Dec_YBL_Amt__c"; 
        public static readonly string  DecYBLCostc = "Dec_YBL_Cost__c"; 
        public static readonly string  DecYBLQtyc = "Dec_YBL_Qty__c"; 
        public static readonly string  EndDtc = "End_Dt__c"; 
        public static readonly string  FebCFYpctPlanAmtc = "Feb_CFY_pct_Plan_Amt__c"; 
        public static readonly string  FebCFYPctPlanCostc = "Feb_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  FebCFYpctPlanQtyc = "Feb_CFY_pct_Plan_Qty__c"; 
        public static readonly string  FebCFYAmtc = "Feb_CFY_Amt__c"; 
        public static readonly string  FebCFYCostc = "Feb_CFY_Cost__c"; 
        public static readonly string  FebCFYPlanAmtc = "Feb_CFY_Plan_Amt__c"; 
        public static readonly string  FebCFYPlanCostc = "Feb_CFY_Plan_Cost__c"; 
        public static readonly string  FebCFYPlanQtyc = "Feb_CFY_Plan_Qty__c"; 
        public static readonly string  FebCFYQtyc = "Feb_CFY_Qty__c"; 
        public static readonly string  FebPFYAmtc = "Feb_PFY_Amt__c"; 
        public static readonly string  FebPFYCostc = "Feb_PFY_Cost__c"; 
        public static readonly string  FebPFYQtyc = "Feb_PFY_Qty__c"; 
        public static readonly string  FebYBLAmtc = "Feb_YBL_Amt__c"; 
        public static readonly string  FebYBLCostc = "Feb_YBL_Cost__c"; 
        public static readonly string  FebYBLQtyc = "Feb_YBL_Qty__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  InactiveReasonc = "Inactive_Reason__c"; 
        public static readonly string  JanCFYpctPlanAmtc = "Jan_CFY_pct_Plan_Amt__c"; 
        public static readonly string  JanCFYPctPlanCostc = "Jan_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  JanCFYpctPlanQtyc = "Jan_CFY_pct_Plan_Qty__c"; 
        public static readonly string  JanCFYAmtc = "Jan_CFY_Amt__c"; 
        public static readonly string  JanCFYCostc = "Jan_CFY_Cost__c"; 
        public static readonly string  JanCFYPlanAmtc = "Jan_CFY_Plan_Amt__c"; 
        public static readonly string  JanCFYPlanCostc = "Jan_CFY_Plan_Cost__c"; 
        public static readonly string  JanCFYPlanQtyc = "Jan_CFY_Plan_Qty__c"; 
        public static readonly string  JanCFYQtyc = "Jan_CFY_Qty__c"; 
        public static readonly string  JanPFYAmtc = "Jan_PFY_Amt__c"; 
        public static readonly string  JanPFYCostc = "Jan_PFY_Cost__c"; 
        public static readonly string  JanPFYQtyc = "Jan_PFY_Qty__c"; 
        public static readonly string  JanYBLAmtc = "Jan_YBL_Amt__c"; 
        public static readonly string  JanYBLCostc = "Jan_YBL_Cost__c"; 
        public static readonly string  JanYBLQtyc = "Jan_YBL_Qty__c"; 
        public static readonly string  JCIBrandc = "JCI_Brand__c"; 
        public static readonly string  JulCFYpctPlanAmtc = "Jul_CFY_pct_Plan_Amt__c"; 
        public static readonly string  JulCFYPctPlanCostc = "Jul_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  JulCFYpctPlanQtyc = "Jul_CFY_pct_Plan_Qty__c"; 
        public static readonly string  JulCFYAmtc = "Jul_CFY_Amt__c"; 
        public static readonly string  JulCFYCostc = "Jul_CFY_Cost__c"; 
        public static readonly string  JulCFYPlanAmtc = "Jul_CFY_Plan_Amt__c"; 
        public static readonly string  JulCFYPlanCostc = "Jul_CFY_Plan_Cost__c"; 
        public static readonly string  JulCFYPlanQtyc = "Jul_CFY_Plan_Qty__c"; 
        public static readonly string  JulCFYQtyc = "Jul_CFY_Qty__c"; 
        public static readonly string  JulPFYAmtc = "Jul_PFY_Amt__c"; 
        public static readonly string  JulPFYCostc = "Jul_PFY_Cost__c"; 
        public static readonly string  JulPFYQtyc = "Jul_PFY_Qty__c"; 
        public static readonly string  JulYBLAmtc = "Jul_YBL_Amt__c"; 
        public static readonly string  JulYBLCostc = "Jul_YBL_Cost__c"; 
        public static readonly string  JulYBLQtyc = "Jul_YBL_Qty__c"; 
        public static readonly string  JunCFYpctPlanAmtc = "Jun_CFY_pct_Plan_Amt__c"; 
        public static readonly string  JunCFYPctPlanCostc = "Jun_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  JunCFYpctPlanQtyc = "Jun_CFY_pct_Plan_Qty__c"; 
        public static readonly string  JunCFYAmtc = "Jun_CFY_Amt__c"; 
        public static readonly string  JunCFYCostc = "Jun_CFY_Cost__c"; 
        public static readonly string  JunCFYPlanAmtc = "Jun_CFY_Plan_Amt__c"; 
        public static readonly string  JunCFYPlanCostc = "Jun_CFY_Plan_Cost__c"; 
        public static readonly string  JunCFYPlanQtyc = "Jun_CFY_Plan_Qty__c"; 
        public static readonly string  JunCFYQtyc = "Jun_CFY_Qty__c"; 
        public static readonly string  JunPFYAmtc = "Jun_PFY_Amt__c"; 
        public static readonly string  JunPFYCostc = "Jun_PFY_Cost__c"; 
        public static readonly string  JunPFYQtyc = "Jun_PFY_Qty__c"; 
        public static readonly string  JunYBLAmtc = "Jun_YBL_Amt__c"; 
        public static readonly string  JunYBLCostc = "Jun_YBL_Cost__c"; 
        public static readonly string  JunYBLQtyc = "Jun_YBL_Qty__c"; 
        public static readonly string  MarCFYpctPlanAmtc = "Mar_CFY_pct_Plan_Amt__c"; 
        public static readonly string  MarCFYPctPlanCostc = "Mar_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  MarCFYpctPlanQtyc = "Mar_CFY_pct_Plan_Qty__c"; 
        public static readonly string  MarCFYAmtc = "Mar_CFY_Amt__c"; 
        public static readonly string  MarCFYCostc = "Mar_CFY_Cost__c"; 
        public static readonly string  MarCFYPlanAmtc = "Mar_CFY_Plan_Amt__c"; 
        public static readonly string  MarCFYPlanCostc = "Mar_CFY_Plan_Cost__c"; 
        public static readonly string  MarCFYPlanQtyc = "Mar_CFY_Plan_Qty__c"; 
        public static readonly string  MarCFYQtyc = "Mar_CFY_Qty__c"; 
        public static readonly string  MarPFYAmtc = "Mar_PFY_Amt__c"; 
        public static readonly string  MarPFYCostc = "Mar_PFY_Cost__c"; 
        public static readonly string  MarPFYQtyc = "Mar_PFY_Qty__c"; 
        public static readonly string  MarYBLAmtc = "Mar_YBL_Amt__c"; 
        public static readonly string  MarYBLCostc = "Mar_YBL_Cost__c"; 
        public static readonly string  MarYBLQtyc = "Mar_YBL_Qty__c"; 
        public static readonly string  MayCFYpctPlanAmtc = "May_CFY_pct_Plan_Amt__c"; 
        public static readonly string  MayCFYPctPlanCostc = "May_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  MayCFYpctPlanQtyc = "May_CFY_pct_Plan_Qty__c"; 
        public static readonly string  MayCFYAmtc = "May_CFY_Amt__c"; 
        public static readonly string  MayCFYCostc = "May_CFY_Cost__c"; 
        public static readonly string  MayCFYPlanAmtc = "May_CFY_Plan_Amt__c"; 
        public static readonly string  MayCFYPlanCostc = "May_CFY_Plan_Cost__c"; 
        public static readonly string  MayCFYPlanQtyc = "May_CFY_Plan_Qty__c"; 
        public static readonly string  MayCFYQtyc = "May_CFY_Qty__c"; 
        public static readonly string  MayPFYAmtc = "May_PFY_Amt__c"; 
        public static readonly string  MayPFYCostc = "May_PFY_Cost__c"; 
        public static readonly string  MayPFYQtyc = "May_PFY_Qty__c"; 
        public static readonly string  MayYBLAmtc = "May_YBL_Amt__c"; 
        public static readonly string  MayYBLCostc = "May_YBL_Cost__c"; 
        public static readonly string  MayYBLQtyc = "May_YBL_Qty__c"; 
        public static readonly string  NovCFYpctPlanAmtc = "Nov_CFY_pct_Plan_Amt__c"; 
        public static readonly string  NovCFYPctPlanCostc = "Nov_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  NovCFYpctPlanQtyc = "Nov_CFY_pct_Plan_Qty__c"; 
        public static readonly string  NovCFYAmtc = "Nov_CFY_Amt__c"; 
        public static readonly string  NovCFYCostc = "Nov_CFY_Cost__c"; 
        public static readonly string  NovCFYPlanAmtc = "Nov_CFY_Plan_Amt__c"; 
        public static readonly string  NovCFYPlanCostc = "Nov_CFY_Plan_Cost__c"; 
        public static readonly string  NovCFYPlanQtyc = "Nov_CFY_Plan_Qty__c"; 
        public static readonly string  NovCFYQtyc = "Nov_CFY_Qty__c"; 
        public static readonly string  NovPFYAmtc = "Nov_PFY_Amt__c"; 
        public static readonly string  NovPFYCostc = "Nov_PFY_Cost__c"; 
        public static readonly string  NovPFYQtyc = "Nov_PFY_Qty__c"; 
        public static readonly string  NovYBLAmtc = "Nov_YBL_Amt__c"; 
        public static readonly string  NovYBLCostc = "Nov_YBL_Cost__c"; 
        public static readonly string  NovYBLQtyc = "Nov_YBL_Qty__c"; 
        public static readonly string  OctCFYpctPlanAmtc = "Oct_CFY_pct_Plan_Amt__c"; 
        public static readonly string  OctCFYPctPlanCostc = "Oct_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  OctCFYpctPlanQtyc = "Oct_CFY_pct_Plan_Qty__c"; 
        public static readonly string  OctCFYAmtc = "Oct_CFY_Amt__c"; 
        public static readonly string  OctCFYCostc = "Oct_CFY_Cost__c"; 
        public static readonly string  OctCFYPlanAmtc = "Oct_CFY_Plan_Amt__c"; 
        public static readonly string  OctCFYPlanCostc = "Oct_CFY_Plan_Cost__c"; 
        public static readonly string  OctCFYPlanQtyc = "Oct_CFY_Plan_Qty__c"; 
        public static readonly string  OctCFYQtyc = "Oct_CFY_Qty__c"; 
        public static readonly string  OctPFYAmtc = "Oct_PFY_Amt__c"; 
        public static readonly string  OctPFYCostc = "Oct_PFY_Cost__c"; 
        public static readonly string  OctPFYQtyc = "Oct_PFY_Qty__c"; 
        public static readonly string  OctYBLAmtc = "Oct_YBL_Amt__c"; 
        public static readonly string  OctYBLCostc = "Oct_YBL_Cost__c"; 
        public static readonly string  OctYBLQtyc = "Oct_YBL_Qty__c"; 
        public static readonly string  Orgc = "Org__c"; 
        public static readonly string  OtherDetailc = "Other_Detail__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Productc = "Product__c"; 
        public static readonly string  ProductAcctIDConcatc = "Product_Acct_ID_Concat__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  SellingEntityc = "Selling_Entity__c"; 
        public static readonly string  SepCFYpctPlanAmtc = "Sep_CFY_pct_Plan_Amt__c"; 
        public static readonly string  SepCFYPctPlanCostc = "Sep_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  SepCFYpctPlanQtyc = "Sep_CFY_pct_Plan_Qty__c"; 
        public static readonly string  SepCFYAmtc = "Sep_CFY_Amt__c"; 
        public static readonly string  SepCFYCostc = "Sep_CFY_Cost__c"; 
        public static readonly string  SepCFYPlanAmtc = "Sep_CFY_Plan_Amt__c"; 
        public static readonly string  SepCFYPlanCostc = "Sep_CFY_Plan_Cost__c"; 
        public static readonly string  SepCFYPlanQtyc = "Sep_CFY_Plan_Qty__c"; 
        public static readonly string  SepCFYQtyc = "Sep_CFY_Qty__c"; 
        public static readonly string  SepPFYAmtc = "Sep_PFY_Amt__c"; 
        public static readonly string  SepPFYCostc = "Sep_PFY_Cost__c"; 
        public static readonly string  SepPFYQtyc = "Sep_PFY_Qty__c"; 
        public static readonly string  SepYBLAmtc = "Sep_YBL_Amt__c"; 
        public static readonly string  SepYBLCostc = "Sep_YBL_Cost__c"; 
        public static readonly string  SepYBLQtyc = "Sep_YBL_Qty__c"; 
        public static readonly string  StartDtc = "Start_Dt__c"; 
        public static readonly string  SubOrgc = "Sub_Org__c"; 
        public static readonly string  SubSellingEntityc = "Sub_Selling_Entity__c"; 
        public static readonly string  Synergyc = "Synergy__c"; 
        public static readonly string  SynergyIDc = "Synergy_ID__c"; 
        public static readonly string  TotCFYpctPlanAmtc = "Tot_CFY_pct_Plan_Amt__c"; 
        public static readonly string  TotCFYPctPlanCostc = "Tot_CFY_Pct_Plan_Cost__c"; 
        public static readonly string  TotCFYpctPlanQtyc = "Tot_CFY_pct_Plan_Qty__c"; 
        public static readonly string  TotCFYAmtc = "Tot_CFY_Amt__c"; 
        public static readonly string  TotCFYCostc = "Tot_CFY_Cost__c"; 
        public static readonly string  TotCFYPlanAmtc = "Tot_CFY_Plan_Amt__c"; 
        public static readonly string  TotCFYPlanCostc = "Tot_CFY_Plan_Cost__c"; 
        public static readonly string  TotCFYPlanQtyc = "Tot_CFY_Plan_Qty__c"; 
        public static readonly string  TotCFYQ1pctPlanAmtc = "Tot_CFY_Q1_pct_Plan_Amt__c"; 
        public static readonly string  TotCFYQ1PctPlanCostc = "Tot_CFY_Q1_Pct_Plan_Cost__c"; 
        public static readonly string  TotCFYQ1pctPlanQtyc = "Tot_CFY_Q1_pct_Plan_Qty__c"; 
        public static readonly string  TotCFYQ1Amtc = "Tot_CFY_Q1_Amt__c"; 
        public static readonly string  TotCFYQ1Costc = "Tot_CFY_Q1_Cost__c"; 
        public static readonly string  TotCFYQ1PlanAmtc = "Tot_CFY_Q1_Plan_Amt__c"; 
        public static readonly string  TotCFYQ1PlanCostc = "Tot_CFY_Q1_Plan_Cost__c"; 
        public static readonly string  TotCFYQ1PlanQtyc = "Tot_CFY_Q1_Plan_Qty__c"; 
        public static readonly string  TotCFYQ1Qtyc = "Tot_CFY_Q1_Qty__c"; 
        public static readonly string  TotCFYQ2pctPlanAmtc = "Tot_CFY_Q2_pct_Plan_Amt__c"; 
        public static readonly string  TotCFYQ2PctPlanCostc = "Tot_CFY_Q2_Pct_Plan_Cost__c"; 
        public static readonly string  TotCFYQ2pctPlanQtyc = "Tot_CFY_Q2_pct_Plan_Qty__c"; 
        public static readonly string  TotCFYQ2Amtc = "Tot_CFY_Q2_Amt__c"; 
        public static readonly string  TotCFYQ2Costc = "Tot_CFY_Q2_Cost__c"; 
        public static readonly string  TotCFYQ2PlanAmtc = "Tot_CFY_Q2_Plan_Amt__c"; 
        public static readonly string  TotCFYQ2PlanCostc = "Tot_CFY_Q2_Plan_Cost__c"; 
        public static readonly string  TotCFYQ2PlanQtyc = "Tot_CFY_Q2_Plan_Qty__c"; 
        public static readonly string  TotCFYQ2Qtyc = "Tot_CFY_Q2_Qty__c"; 
        public static readonly string  TotCFYQ3pctPlanAmtc = "Tot_CFY_Q3_pct_Plan_Amt__c"; 
        public static readonly string  TotCFYQ3PctPlanCostc = "Tot_CFY_Q3_Pct_Plan_Cost__c"; 
        public static readonly string  TotCFYQ3pctPlanQtyc = "Tot_CFY_Q3_pct_Plan_Qty__c"; 
        public static readonly string  TotCFYQ3Amtc = "Tot_CFY_Q3_Amt__c"; 
        public static readonly string  TotCFYQ3Costc = "Tot_CFY_Q3_Cost__c"; 
        public static readonly string  TotCFYQ3PlanAmtc = "Tot_CFY_Q3_Plan_Amt__c"; 
        public static readonly string  TotCFYQ3PlanCostc = "Tot_CFY_Q3_Plan_Cost__c"; 
        public static readonly string  TotCFYQ3PlanQtyc = "Tot_CFY_Q3_Plan_Qty__c"; 
        public static readonly string  TotCFYQ3Qtyc = "Tot_CFY_Q3_Qty__c"; 
        public static readonly string  TotCFYQ4pctPlanAmtc = "Tot_CFY_Q4_pct_Plan_Amt__c"; 
        public static readonly string  TotCFYQ4PctPlanCostc = "Tot_CFY_Q4_Pct_Plan_Cost__c"; 
        public static readonly string  TotCFYQ4pctPlanQtyc = "Tot_CFY_Q4_pct_Plan_Qty__c"; 
        public static readonly string  TotCFYQ4Amtc = "Tot_CFY_Q4_Amt__c"; 
        public static readonly string  TotCFYQ4Costc = "Tot_CFY_Q4_Cost__c"; 
        public static readonly string  TotCFYQ4PlanAmtc = "Tot_CFY_Q4_Plan_Amt__c"; 
        public static readonly string  TotCFYQ4PlanCostc = "Tot_CFY_Q4_Plan_Cost__c"; 
        public static readonly string  TotCFYQ4PlanQtyc = "Tot_CFY_Q4_Plan_Qty__c"; 
        public static readonly string  TotCFYQ4Qtyc = "Tot_CFY_Q4_Qty__c"; 
        public static readonly string  TotCFYQtyc = "Tot_CFY_Qty__c"; 
        public static readonly string  TotPFYAmtc = "Tot_PFY_Amt__c"; 
        public static readonly string  TotPFYCostc = "Tot_PFY_Cost__c"; 
        public static readonly string  TotPFYQ1Amtc = "Tot_PFY_Q1_Amt__c"; 
        public static readonly string  TotPFYQ1Costc = "Tot_PFY_Q1_Cost__c"; 
        public static readonly string  TotPFYQ1Qtyc = "Tot_PFY_Q1_Qty__c"; 
        public static readonly string  TotPFYQ2Amtc = "Tot_PFY_Q2_Amt__c"; 
        public static readonly string  TotPFYQ2Costc = "Tot_PFY_Q2_Cost__c"; 
        public static readonly string  TotPFYQ2Qtyc = "Tot_PFY_Q2_Qty__c"; 
        public static readonly string  TotPFYQ3Amtc = "Tot_PFY_Q3_Amt__c"; 
        public static readonly string  TotPFYQ3Costc = "Tot_PFY_Q3_Cost__c"; 
        public static readonly string  TotPFYQ3Qtyc = "Tot_PFY_Q3_Qty__c"; 
        public static readonly string  TotPFYQ4Amtc = "Tot_PFY_Q4_Amt__c"; 
        public static readonly string  TotPFYQ4Costc = "Tot_PFY_Q4_Cost__c"; 
        public static readonly string  TotPFYQ4Qtyc = "Tot_PFY_Q4_Qty__c"; 
        public static readonly string  TotPFYQtyc = "Tot_PFY_Qty__c"; 
        public static readonly string  TotYBLAmtc = "Tot_YBL_Amt__c"; 
        public static readonly string  TotYBLCostc = "Tot_YBL_Cost__c"; 
        public static readonly string  TotYBLQ1Amtc = "Tot_YBL_Q1_Amt__c"; 
        public static readonly string  TotYBLQ1Costc = "Tot_YBL_Q1_Cost__c"; 
        public static readonly string  TotYBLQ1Qtyc = "Tot_YBL_Q1_Qty__c"; 
        public static readonly string  TotYBLQ2Amtc = "Tot_YBL_Q2_Amt__c"; 
        public static readonly string  TotYBLQ2Costc = "Tot_YBL_Q2_Cost__c"; 
        public static readonly string  TotYBLQ2Qtyc = "Tot_YBL_Q2_Qty__c"; 
        public static readonly string  TotYBLQ3Amtc = "Tot_YBL_Q3_Amt__c"; 
        public static readonly string  TotYBLQ3Costc = "Tot_YBL_Q3_Cost__c"; 
        public static readonly string  TotYBLQ3Qtyc = "Tot_YBL_Q3_Qty__c"; 
        public static readonly string  TotYBLQ4Amtc = "Tot_YBL_Q4_Amt__c"; 
        public static readonly string  TotYBLQ4Costc = "Tot_YBL_Q4_Cost__c"; 
        public static readonly string  TotYBLQ4Qtyc = "Tot_YBL_Q4_Qty__c"; 
        public static readonly string  TotYBLQtyc = "Tot_YBL_Qty__c"; 
        public static readonly string  UniqueIDc = "Unique_ID__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProductLineHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickProductLineHistoryField(string s)
        {
            return new PickProductLineHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProductLineHistoryField Parse(string text) => text;

        

    }
    public class PickProductLineCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProductLineCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProductLineCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProductLineCurrencyIsoCodeConverter))]
    public class PickProductLineCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProductLineCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickProductLineCurrencyIsoCode(string s)
        {
            return new PickProductLineCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProductLineCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickProductLineInactiveReasonConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProductLineInactiveReason)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProductLineInactiveReason {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProductLineInactiveReasonConverter))]
    public class PickProductLineInactiveReason
    {
        public static readonly string  Failuretomeetquota = "Failure to meet quota"; 
        public static readonly string  Failuretoengageinsalesactivities = "Failure to engage in sales activities"; 
        public static readonly string  Violatingagreement = "Violating agreement"; 
        public static readonly string  Inappropriatedatasharing = "Inappropriate data sharing"; 
        public static readonly string  Unethicalorcriminalactivity = "Unethical or criminal activity"; 
        public static readonly string  Superiorrepcameavailable = "Superior rep came available"; 
        public static readonly string  Addedcompetingline = "Added competing line"; 
        public static readonly string  Multiterritoryrepmovedin = "Multi-territory rep moved in"; 
        public static readonly string  DuplicityofJCIproducts = "Duplicity of JCI products"; 
        public static readonly string  LossofKeyEmployees = "Loss of Key Employees"; 
        public static readonly string  Linecardchangesinsufficiency = "Line card changes/insufficiency"; 
        public static readonly string  ChangeofOwnership = "Change of Ownership"; 
        public static readonly string  CustomerdropsJCIbrand = "Customer drops JCI brand"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProductLineInactiveReason o)
        {
            return o.Value;
        }

        public static implicit operator PickProductLineInactiveReason(string s)
        {
            return new PickProductLineInactiveReason {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProductLineInactiveReason Parse(string text) => text;

        

    }
    public class PickProfileUserTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProfileUserType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProfileUserType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProfileUserTypeConverter))]
    public class PickProfileUserType
    {
        public static readonly string  Standard = "Standard"; 
        public static readonly string  PowerPartner = "PowerPartner"; 
        public static readonly string  PowerCustomerSuccess = "PowerCustomerSuccess"; 
        public static readonly string  CustomerSuccess = "CustomerSuccess"; 
        public static readonly string  Guest = "Guest"; 
        public static readonly string  CspLitePortal = "CspLitePortal"; 
        public static readonly string  CsnOnly = "CsnOnly"; 
        public static readonly string  SelfService = "SelfService"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProfileUserType o)
        {
            return o.Value;
        }

        public static implicit operator PickProfileUserType(string s)
        {
            return new PickProfileUserType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProfileUserType Parse(string text) => text;

        

    }
    public class PickProgramHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramHistoryFieldConverter))]
    public class PickProgramHistoryField
    {
        public static readonly string  AcctTypec = "Acct_Type__c"; 
        public static readonly string  ActionPlanTemplatec = "Action_Plan_Template__c"; 
        public static readonly string  ApprovalStatusc = "Approval_Status__c"; 
        public static readonly string  Brandc = "Brand__c"; 
        public static readonly string  BrandSharec = "Brand_Share__c"; 
        public static readonly string  CompletedDatec = "Completed_Date__c"; 
        public static readonly string  Costc = "Cost__c"; 
        public static readonly string  CostRollupc = "Cost_Roll_up__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  CurrentMarketStatec = "Current_Market_State__c"; 
        public static readonly string  CustReqc = "Cust_Req__c"; 
        public static readonly string  Descrc = "Descr__c"; 
        public static readonly string  EndDtc = "End_Dt__c"; 
        public static readonly string  EstimatedGoalDurationc = "Estimated_Goal_Duration__c"; 
        public static readonly string  ExpFinOutcomec = "Exp_Fin_Outcome__c"; 
        public static readonly string  ExpFinOutcomeRollupc = "Exp_Fin_Outcome_Roll_up__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FinancialProgressRollupc = "Financial_Progress_Roll_up__c"; 
        public static readonly string  GoalStatusc = "Goal_Status__c"; 
        public static readonly string  GoalTypec = "Goal_Type__c"; 
        public static readonly string  JCIReqc = "JCI_Req__c"; 
        public static readonly string  Marketc = "Market__c"; 
        public static readonly string  Notesc = "Notes__c"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  PrimaryContactsc = "Primary_Contacts__c"; 
        public static readonly string  Productc = "Product__c"; 
        public static readonly string  RealizedValuec = "Realized_Value__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  RecordType = "RecordType"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  StartDtc = "Start_Dt__c"; 
        public static readonly string  Statusc = "Status__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramHistoryField(string s)
        {
            return new PickProgramHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramHistoryField Parse(string text) => text;

        

    }
    public class PickProgramCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramCurrencyIsoCodeConverter))]
    public class PickProgramCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramCurrencyIsoCode(string s)
        {
            return new PickProgramCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickProgramAcctTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramAcctType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramAcctType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramAcctTypeConverter))]
    public class PickProgramAcctType
    {
        public static readonly string  Key = "Key"; 
        public static readonly string  Target = "Target"; 
        public static readonly string  Manage = "Manage"; 
        public static readonly string  Maintain = "Maintain"; 
        public static readonly string  WhitespaceMaintained = "Whitespace Maintained"; 
        public static readonly string  WhitespaceTarget = "Whitespace Target"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramAcctType o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramAcctType(string s)
        {
            return new PickProgramAcctType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramAcctType Parse(string text) => text;

        

    }
    public class PickProgramApprovalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramApprovalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramApprovalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramApprovalStatusConverter))]
    public class PickProgramApprovalStatus
    {
        public static readonly string  NotYetSubmitted = "Not Yet Submitted"; 
        public static readonly string  SubmittedforApproval = "Submitted for Approval"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Approved = "Approved"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramApprovalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramApprovalStatus(string s)
        {
            return new PickProgramApprovalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramApprovalStatus Parse(string text) => text;

        

    }
    public class PickProgramEstimatedGoalDurationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramEstimatedGoalDuration)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramEstimatedGoalDuration {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramEstimatedGoalDurationConverter))]
    public class PickProgramEstimatedGoalDuration
    {
        public static readonly string _30 = "30"; 
        public static readonly string _60 = "60"; 
        public static readonly string _90 = "90"; 
        //public static readonly string _90 = "90+"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramEstimatedGoalDuration o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramEstimatedGoalDuration(string s)
        {
            return new PickProgramEstimatedGoalDuration {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramEstimatedGoalDuration Parse(string text) => text;

        

    }
    public class PickProgramGoalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramGoalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramGoalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramGoalStatusConverter))]
    public class PickProgramGoalStatus
    {
        public static readonly string  Red = "Red"; 
        public static readonly string  Yellow = "Yellow"; 
        public static readonly string  Green = "Green"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramGoalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramGoalStatus(string s)
        {
            return new PickProgramGoalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramGoalStatus Parse(string text) => text;

        

    }
    public class PickProgramGoalTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramGoalType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramGoalType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramGoalTypeConverter))]
    public class PickProgramGoalType
    {
        public static readonly string  AddaLine = "Add a Line"; 
        public static readonly string  FlipaLine = "Flip a Line"; 
        public static readonly string  ExpandaLine = "Expand a Line"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramGoalType o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramGoalType(string s)
        {
            return new PickProgramGoalType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramGoalType Parse(string text) => text;

        

    }
    public class PickProgramStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProgramStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProgramStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProgramStatusConverter))]
    public class PickProgramStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Complete = "Complete"; 
        public static readonly string  Cancelled = "Cancelled"; 
        public static readonly string  Abandoned = "Abandoned"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProgramStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickProgramStatus(string s)
        {
            return new PickProgramStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProgramStatus Parse(string text) => text;

        

    }
    public class PickRecordTypeSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickRecordTypeSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickRecordTypeSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickRecordTypeSobjectTypeConverter))]
    public class PickRecordTypeSobjectType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  AccountBillToc = "Account_Bill_To__c"; 
        public static readonly string  AccountCompetitorc = "Account_Competitor__c"; 
        public static readonly string  AccountRelationshipc = "Account_Relationship__c"; 
        public static readonly string  AccountShowcasec = "Account_Showcase__c"; 
        public static readonly string  AccountTeamc = "Account_Team__c"; 
        public static readonly string  AccountTeamBrandc = "Account_Team_Brand__c"; 
        public static readonly string  ActionLogc = "Action_Log__c"; 
        public static readonly string  ActionNotec = "Action_Note__c"; 
        public static readonly string  ActionPlanLineItemc = "Action_Plan_Line_Item__c"; 
        public static readonly string  ActionPlanc = "ActionPlan__c"; 
        public static readonly string  ActionPlanTemplatec = "ActionPlanTemplate__c"; 
        public static readonly string  Activityc = "Activity__c"; 
        public static readonly string  ActivityReferencec = "Activity_Reference__c"; 
        public static readonly string  AcuerdoCURSiTEmailc = "AcuerdoCUR__SiT_Email__c"; 
        public static readonly string  AcuerdoCURSitSettingsc = "AcuerdoCUR__Sit_Settings__c"; 
        public static readonly string  Addressc = "Address__c"; 
        public static readonly string  AgencyPartnerc = "Agency_Partner__c"; 
        public static readonly string  AgentWork = "AgentWork"; 
        public static readonly string  Alertc = "Alert__c"; 
        public static readonly string  Announcement = "Announcement"; 
        public static readonly string  ApexFormulac = "Apex_Formula__c"; 
        public static readonly string  ApexLogc = "Apex_Log__c"; 
        public static readonly string  AppAuthorizationsc = "App_Authorizations__c"; 
        public static readonly string  AppUserc = "App_User__c"; 
        public static readonly string  Applicationc = "Application__c"; 
        public static readonly string  ApplicationDataDocumentkav = "Application_Data_Document__kav"; 
        public static readonly string  ApplicationGuidekav = "Application_Guide__kav"; 
        public static readonly string  ApplicationNotekav = "Application_Note__kav"; 
        public static readonly string  APTaskTemplatec = "APTaskTemplate__c"; 
        public static readonly string  APTTaskTemplatec = "APTTaskTemplate__c"; 
        public static readonly string  AssetRelationship = "AssetRelationship"; 
        public static readonly string  AssignedAccountc = "Assigned_Account__c"; 
        public static readonly string  AssignedUsersc = "Assigned_Users__c"; 
        public static readonly string  AssistantProgress = "AssistantProgress"; 
        public static readonly string  AssociatedProjectc = "Associated_Project__c"; 
        public static readonly string  AWSS3Objectc = "AWS_S3_Object__c"; 
        public static readonly string  AWSKeyc = "AWSKey__c"; 
        public static readonly string  BillofLadingc = "Bill_of_Lading__c"; 
        public static readonly string  BillToc = "Bill_To__c"; 
        public static readonly string  Branchc = "Branch__c"; 
        public static readonly string  BranchAssignmentc = "Branch_Assignment__c"; 
        public static readonly string  Brandc = "Brand__c"; 
        public static readonly string  BrandERPXRefc = "Brand_ERP_XRef__c"; 
        public static readonly string  BusinessFunctionc = "BusinessFunction__c"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  CampaignMember = "CampaignMember"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  CaseLOVMasterc = "Case_LOV_Master__c"; 
        public static readonly string  CaseExternalDocument = "CaseExternalDocument"; 
        public static readonly string  CatalogPagekav = "Catalog_Page__kav"; 
        public static readonly string  CCERPNumberc = "CC_ERP_Number__c"; 
        public static readonly string  CCStorefrontERPc = "CC_Storefront_ERP__c"; 
        public static readonly string  ccrzEAccountAddressBookc = "ccrz__E_AccountAddressBook__c"; 
        public static readonly string  ccrzEAccountGroupc = "ccrz__E_AccountGroup__c"; 
        public static readonly string  ccrzEAccountGroupPriceListc = "ccrz__E_AccountGroupPriceList__c"; 
        public static readonly string  ccrzEAccountSettingc = "ccrz__E_AccountSetting__c"; 
        public static readonly string  ccrzEAddressBookc = "ccrz__E_AddressBook__c"; 
        public static readonly string  ccrzEAttributec = "ccrz__E_Attribute__c"; 
        public static readonly string  ccrzEAttributeI18Nc = "ccrz__E_AttributeI18N__c"; 
        public static readonly string  ccrzEBreadCrumbc = "ccrz__E_BreadCrumb__c"; 
        public static readonly string  ccrzECartc = "ccrz__E_Cart__c"; 
        public static readonly string  ccrzECartCouponc = "ccrz__E_CartCoupon__c"; 
        public static readonly string  ccrzECartItemc = "ccrz__E_CartItem__c"; 
        public static readonly string  ccrzECartItemGroupc = "ccrz__E_CartItemGroup__c"; 
        public static readonly string  ccrzECartItemPricingTierc = "ccrz__E_CartItemPricingTier__c"; 
        public static readonly string  ccrzECategoryc = "ccrz__E_Category__c"; 
        public static readonly string  ccrzECategoryI18Nc = "ccrz__E_CategoryI18N__c"; 
        public static readonly string  ccrzECategoryMediac = "ccrz__E_CategoryMedia__c"; 
        public static readonly string  ccrzECategorySpecc = "ccrz__E_CategorySpec__c"; 
        public static readonly string  ccrzECompositeProductc = "ccrz__E_CompositeProduct__c"; 
        public static readonly string  ccrzEConfigurationc = "ccrz__E_Configuration__c"; 
        public static readonly string  ccrzEConfigurationMetac = "ccrz__E_ConfigurationMeta__c"; 
        public static readonly string  ccrzEConfigurationModulec = "ccrz__E_ConfigurationModule__c"; 
        public static readonly string  ccrzEContactAddrc = "ccrz__E_ContactAddr__c"; 
        public static readonly string  ccrzEContentc = "ccrz__E_Content__c"; 
        public static readonly string  ccrzECouponc = "ccrz__E_Coupon__c"; 
        public static readonly string  ccrzEFeaturedProductc = "ccrz__E_FeaturedProduct__c"; 
        public static readonly string  ccrzEFeaturedProductI18Nc = "ccrz__E_FeaturedProductI18N__c"; 
        public static readonly string  ccrzEFooc = "ccrz__E_Foo__c"; 
        public static readonly string  ccrzEHtmlCachec = "ccrz__E_HtmlCache__c"; 
        public static readonly string  ccrzEInvoicec = "ccrz__E_Invoice__c"; 
        public static readonly string  ccrzEInvoiceItemc = "ccrz__E_InvoiceItem__c"; 
        public static readonly string  ccrzELocaleFormatterc = "ccrz__E_LocaleFormatter__c"; 
        public static readonly string  ccrzEMenuc = "ccrz__E_Menu__c"; 
        public static readonly string  ccrzEMenuI18Nc = "ccrz__E_MenuI18N__c"; 
        public static readonly string  ccrzEMenuItemc = "ccrz__E_MenuItem__c"; 
        public static readonly string  ccrzEMenuItemI18Nc = "ccrz__E_MenuItemI18N__c"; 
        public static readonly string  ccrzEOrderc = "ccrz__E_Order__c"; 
        public static readonly string  ccrzEOrderItemc = "ccrz__E_OrderItem__c"; 
        public static readonly string  ccrzEOrderItemGroupc = "ccrz__E_OrderItemGroup__c"; 
        public static readonly string  ccrzEOrderItemPricingTierc = "ccrz__E_OrderItemPricingTier__c"; 
        public static readonly string  ccrzEOrderShipmentc = "ccrz__E_OrderShipment__c"; 
        public static readonly string  ccrzEOrderShipmentItemc = "ccrz__E_OrderShipmentItem__c"; 
        public static readonly string  ccrzEOrderTermc = "ccrz__E_OrderTerm__c"; 
        public static readonly string  ccrzEPageLabelc = "ccrz__E_PageLabel__c"; 
        public static readonly string  ccrzEPageLabeli18nc = "ccrz__E_PageLabeli18n__c"; 
        public static readonly string  ccrzEPageSectionc = "ccrz__E_PageSection__c"; 
        public static readonly string  ccrzEPaymentDetailc = "ccrz__E_PaymentDetail__c"; 
        public static readonly string  ccrzEPermissionsc = "ccrz__E_Permissions__c"; 
        public static readonly string  ccrzEPriceGroupc = "ccrz__E_PriceGroup__c"; 
        public static readonly string  ccrzEPriceGroupAccountc = "ccrz__E_PriceGroupAccount__c"; 
        public static readonly string  ccrzEPriceGroupItemc = "ccrz__E_PriceGroupItem__c"; 
        public static readonly string  ccrzEPriceGroupPricelistc = "ccrz__E_PriceGroupPricelist__c"; 
        public static readonly string  ccrzEPriceListc = "ccrz__E_PriceList__c"; 
        public static readonly string  ccrzEPriceListItemc = "ccrz__E_PriceListItem__c"; 
        public static readonly string  ccrzEPriceModifierc = "ccrz__E_PriceModifier__c"; 
        public static readonly string  ccrzEPrivateCachec = "ccrz__E_PrivateCache__c"; 
        public static readonly string  ccrzEPrivateCacheContentc = "ccrz__E_PrivateCacheContent__c"; 
        public static readonly string  ccrzEProductc = "ccrz__E_Product__c"; 
        public static readonly string  ccrzEProductCategoryc = "ccrz__E_ProductCategory__c"; 
        public static readonly string  ccrzEProductGuidec = "ccrz__E_ProductGuide__c"; 
        public static readonly string  ccrzEProductInventoryItemc = "ccrz__E_ProductInventoryItem__c"; 
        public static readonly string  ccrzEProductItemI18Nc = "ccrz__E_ProductItemI18N__c"; 
        public static readonly string  ccrzEProductMediac = "ccrz__E_ProductMedia__c"; 
        public static readonly string  ccrzEProductSpecc = "ccrz__E_ProductSpec__c"; 
        public static readonly string  ccrzEProductSpecIndexc = "ccrz__E_ProductSpecIndex__c"; 
        public static readonly string  ccrzEProductStorefrontc = "ccrz__E_ProductStorefront__c"; 
        public static readonly string  ccrzEProductTabc = "ccrz__E_ProductTab__c"; 
        public static readonly string  ccrzEPromoc = "ccrz__E_Promo__c"; 
        public static readonly string  ccrzEPromoI18nc = "ccrz__E_PromoI18n__c"; 
        public static readonly string  ccrzEPromotionAccountGroupFilterc = "ccrz__E_PromotionAccountGroupFilter__c"; 
        public static readonly string  ccrzEPublicCachec = "ccrz__E_PublicCache__c"; 
        public static readonly string  ccrzEPublicCacheContentc = "ccrz__E_PublicCacheContent__c"; 
        public static readonly string  ccrzERecentItemc = "ccrz__E_RecentItem__c"; 
        public static readonly string  ccrzERelatedProductc = "ccrz__E_RelatedProduct__c"; 
        public static readonly string  ccrzERelatedProductGroupc = "ccrz__E_RelatedProductGroup__c"; 
        public static readonly string  ccrzERequestForQuotec = "ccrz__E_RequestForQuote__c"; 
        public static readonly string  ccrzEReviewc = "ccrz__E_Review__c"; 
        public static readonly string  ccrzEReviewLikec = "ccrz__E_ReviewLike__c"; 
        public static readonly string  ccrzERulec = "ccrz__E_Rule__c"; 
        public static readonly string  ccrzERulePricingModifierc = "ccrz__E_RulePricingModifier__c"; 
        public static readonly string  ccrzERuleSourceSKUc = "ccrz__E_RuleSourceSKU__c"; 
        public static readonly string  ccrzERuleSourceSpecc = "ccrz__E_RuleSourceSpec__c"; 
        public static readonly string  ccrzERuleTargetPLIc = "ccrz__E_RuleTargetPLI__c"; 
        public static readonly string  ccrzERuleTargetSKUc = "ccrz__E_RuleTargetSKU__c"; 
        public static readonly string  ccrzERuleTargetSpecc = "ccrz__E_RuleTargetSpec__c"; 
        public static readonly string  ccrzESellerc = "ccrz__E_Seller__c"; 
        public static readonly string  ccrzESellerI18Nc = "ccrz__E_SellerI18N__c"; 
        public static readonly string  ccrzEShippingRatec = "ccrz__E_ShippingRate__c"; 
        public static readonly string  ccrzESpecc = "ccrz__E_Spec__c"; 
        public static readonly string  ccrzEStoredPaymentc = "ccrz__E_StoredPayment__c"; 
        public static readonly string  ccrzEStorefrontAssociationc = "ccrz__E_StorefrontAssociation__c"; 
        public static readonly string  ccrzEStorefrontConfigSettingsc = "ccrz__E_StorefrontConfigSettings__c"; 
        public static readonly string  ccrzESubProdTermc = "ccrz__E_SubProdTerm__c"; 
        public static readonly string  ccrzESubProdTermI18Nc = "ccrz__E_SubProdTermI18N__c"; 
        public static readonly string  ccrzESubscriberPagec = "ccrz__E_Subscriber_Page__c"; 
        public static readonly string  ccrzESubscriptionc = "ccrz__E_Subscription__c"; 
        public static readonly string  ccrzETaxRatec = "ccrz__E_TaxRate__c"; 
        public static readonly string  ccrzETermc = "ccrz__E_Term__c"; 
        public static readonly string  ccrzETransactionPaymentc = "ccrz__E_TransactionPayment__c"; 
        public static readonly string  ccrzEUserInventoryLocationc = "ccrz__E_UserInventoryLocation__c"; 
        public static readonly string  ccrzLExceptionc = "ccrz__L_Exception__c"; 
        public static readonly string  ccrzLExceptionSetupClonec = "ccrz__L_Exception_Setup_Clone__c"; 
        public static readonly string  ccrzLLoggerc = "ccrz__L_Logger__c"; 
        public static readonly string  ccrzLLoggerSetupClonec = "ccrz__L_Logger_Setup_Clone__c"; 
        public static readonly string  Channelc = "Channel__c"; 
        public static readonly string  ChannelChangec = "Channel_Change__c"; 
        public static readonly string  ChannelLineCardc = "Channel_Line_Card__c"; 
        public static readonly string  ChannelLineCardDetailsc = "Channel_Line_Card_Details__c"; 
        public static readonly string  ChannelPlanc = "Channel_Plan__c"; 
        public static readonly string  ChannelProgram = "ChannelProgram"; 
        public static readonly string  ChannelProgramLevel = "ChannelProgramLevel"; 
        public static readonly string  Chartkav = "Chart__kav"; 
        public static readonly string  Checklistkav = "Checklist__kav"; 
        public static readonly string  CollaborationGroupRank = "CollaborationGroupRank"; 
        public static readonly string  CollaborationGroupRecord = "CollaborationGroupRecord"; 
        public static readonly string  CommercialInformationc = "Commercial_Information__c"; 
        public static readonly string  CommercialStartupc = "Commercial_Startup__c"; 
        public static readonly string  CommissioningGuidekav = "Commissioning_Guide__kav"; 
        public static readonly string  Componentc = "Component__c"; 
        public static readonly string  ComponentResponseCache = "ComponentResponseCache"; 
        public static readonly string  ConstructionPtsCPActionc = "ConstructionPts__CP_Action__c"; 
        public static readonly string  ConstructionPtsCPCompanyc = "ConstructionPts__CP_Company__c"; 
        public static readonly string  ConstructionPtsCPContactc = "ConstructionPts__CP_Contact__c"; 
        public static readonly string  ConstructionPtsCPDynamicUserDatac = "ConstructionPts__CP_Dynamic_UserData__c"; 
        public static readonly string  ConstructionPtsCPFilterc = "ConstructionPts__CP_Filter__c"; 
        public static readonly string  ConstructionPtsCPLogc = "ConstructionPts__CP_Log__c"; 
        public static readonly string  ConstructionPtsCPMatchingc = "ConstructionPts__CP_Matching__c"; 
        public static readonly string  ConstructionPtsCPProjectc = "ConstructionPts__CP_Project__c"; 
        public static readonly string  ConstructionPtsCPRoleTypec = "ConstructionPts__CP_Role_Type__c"; 
        public static readonly string  ConstructionPtsCPRolesc = "ConstructionPts__CP_Roles__c"; 
        public static readonly string  ConstructionPtsCPSettingsc = "ConstructionPts__CP_Settings__c"; 
        public static readonly string  ConstructionPtsCPSpecAlertc = "ConstructionPts__CP_SpecAlert__c"; 
        public static readonly string  ConstructionPtsCPConfigc = "ConstructionPts__CPConfig__c"; 
        public static readonly string  ConstructionPtsCPTerritoryc = "ConstructionPts__CPTerritory__c"; 
        public static readonly string  ConstructionPtsCustomSearchc = "ConstructionPts__Custom_Search__c"; 
        public static readonly string  ConstructionPtsCustomSearchDetailsc = "ConstructionPts__Custom_Search_Details__c"; 
        public static readonly string  ConstructionPtsSpecAlertProjectc = "ConstructionPts__SpecAlert_Project__c"; 
        public static readonly string  ConstructionPtsSubProjectsc = "ConstructionPts__Sub_Projects__c"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContactCenterProjectc = "Contact_Center_Project__c"; 
        public static readonly string  ContentVersion = "ContentVersion"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  ContractLineItem = "ContractLineItem"; 
        public static readonly string  Contractorc = "Contractor__c"; 
        public static readonly string  copadoApexTestResultc = "copado__Apex_Test_Result__c"; 
        public static readonly string  copadoAuxiliaryObjectc = "copado__AuxiliaryObject__c"; 
        public static readonly string  copadoBranchManagementPermissionc = "copado__Branch_Management_Permission__c"; 
        public static readonly string  copadoBuildTaskc = "copado__Build_Task__c"; 
        public static readonly string  copadoContinuousIntegrationc = "copado__Continuous_Integration__c"; 
        public static readonly string  copadoContinuousIntegrationPermissionc = "copado__Continuous_Integration_Permission__c"; 
        public static readonly string  copadoCopadoNotificationc = "copado__Copado_Notification__c"; 
        public static readonly string  copadoDeploymentc = "copado__Deployment__c"; 
        public static readonly string  copadoDeploymentFlowc = "copado__Deployment_Flow__c"; 
        public static readonly string  copadoDeploymentFlowStepc = "copado__Deployment_Flow_Step__c"; 
        public static readonly string  copadoDeploymentHistoryc = "copado__Deployment_History__c"; 
        public static readonly string  copadoDeploymentJobc = "copado__Deployment_Job__c"; 
        public static readonly string  copadoDeploymentTaskc = "copado__Deployment_Task__c"; 
        public static readonly string  copadoDestinationOrgc = "copado__Destination_Org__c"; 
        public static readonly string  copadoEnvironmentc = "copado__Environment__c"; 
        public static readonly string  copadoEnvironmentalVariablec = "copado__Environmental_Variable__c"; 
        public static readonly string  copadoEpicc = "copado__Epic__c"; 
        public static readonly string  copadoExternalCIJobc = "copado__External_CI_Job__c"; 
        public static readonly string  copadoExternalCIJobResultc = "copado__External_CI_Job_Result__c"; 
        public static readonly string  copadoExternalCISettingc = "copado__External_CI_Setting__c"; 
        public static readonly string  copadoGitBackupc = "copado__Git_Backup__c"; 
        public static readonly string  copadoGitCommitc = "copado__Git_Commit__c"; 
        public static readonly string  copadoGitOrgCommitc = "copado__Git_Org_Commit__c"; 
        public static readonly string  copadoGitRepositoryc = "copado__Git_Repository__c"; 
        public static readonly string  copadoKanbanBoardc = "copado__Kanban_Board__c"; 
        public static readonly string  copadoOrgc = "copado__Org__c"; 
        public static readonly string  copadoOrgDiffc = "copado__OrgDiff__c"; 
        public static readonly string  copadoPersonac = "copado__Persona__c"; 
        public static readonly string  copadoPersonaPermissionc = "copado__Persona_Permission__c"; 
        public static readonly string  copadoProjectc = "copado__Project__c"; 
        public static readonly string  copadoPromotedUserStoryc = "copado__Promoted_User_Story__c"; 
        public static readonly string  copadoPromotionc = "copado__Promotion__c"; 
        public static readonly string  copadoPullRequestc = "copado__Pull_Request__c"; 
        public static readonly string  copadoPullRequestReviewc = "copado__Pull_Request_Review__c"; 
        public static readonly string  copadoReleasec = "copado__Release__c"; 
        public static readonly string  copadoScheduledJobc = "copado__Scheduled_Job__c"; 
        public static readonly string  copadoScheduledJobRunc = "copado__Scheduled_Job_Run__c"; 
        public static readonly string  copadoSeleniumGroupOrgCredentialc = "copado__Selenium_Group_Org_Credential__c"; 
        public static readonly string  copadoSeleniumGroupTestSuitec = "copado__Selenium_Group_Test_Suite__c"; 
        public static readonly string  copadoSeleniumGroupVariablec = "copado__Selenium_Group_Variable__c"; 
        public static readonly string  copadoSeleniumLocatorc = "copado__Selenium_Locator__c"; 
        public static readonly string  copadoSeleniumLocatorReferencec = "copado__Selenium_Locator_Reference__c"; 
        public static readonly string  copadoSeleniumSettingsc = "copado__Selenium_Settings__c"; 
        public static readonly string  copadoSeleniumTestCasec = "copado__Selenium_Test_Case__c"; 
        public static readonly string  copadoSeleniumTestCasePerSuitec = "copado__Selenium_Test_Case_Per_Suite__c"; 
        public static readonly string  copadoSeleniumTestGroupc = "copado__Selenium_Test_Group__c"; 
        public static readonly string  copadoSeleniumTestResultc = "copado__Selenium_Test_Result__c"; 
        public static readonly string  copadoSeleniumTestRunc = "copado__Selenium_Test_Run__c"; 
        public static readonly string  copadoSeleniumTestSuitec = "copado__Selenium_Test_Suite__c"; 
        public static readonly string  copadoSnapshotDifferencec = "copado__Snapshot_Difference__c"; 
        public static readonly string  copadoSprintc = "copado__Sprint__c"; 
        public static readonly string  copadoStaticCodeAnalysisResultc = "copado__Static_Code_Analysis_Result__c"; 
        public static readonly string  copadoStaticCodeAnalysisRulec = "copado__Static_Code_Analysis_Rule__c"; 
        public static readonly string  copadoStaticCodeAnalysisSettingsc = "copado__Static_Code_Analysis_Settings__c"; 
        public static readonly string  copadoStepc = "copado__Step__c"; 
        public static readonly string  copadoTestRunc = "copado__Test_Run__c"; 
        public static readonly string  copadoTestRunStepc = "copado__Test_Run_Step__c"; 
        public static readonly string  copadoTestScriptc = "copado__Test_Script__c"; 
        public static readonly string  copadoTestScriptStepc = "copado__Test_Script_Step__c"; 
        public static readonly string  copadoUserPersonaAssignmentc = "copado__User_Persona_Assignment__c"; 
        public static readonly string  copadoUserStoryc = "copado__User_Story__c"; 
        public static readonly string  copadoUserStoryCommitc = "copado__User_Story_Commit__c"; 
        public static readonly string  copadoUserStoryMetadatac = "copado__User_Story_Metadata__c"; 
        public static readonly string  copadoUserStorySeleniumTestc = "copado__User_Story_Selenium_Test__c"; 
        public static readonly string  copadoUserStoryTaskc = "copado__User_Story_Task__c"; 
        public static readonly string  CPProjectTypeFactorControlsc = "CP_Project_Type_Factor_Controls__c"; 
        public static readonly string  CR252Locationc = "CR252_Location__c"; 
        public static readonly string  CR252Opportunityc = "CR252_Opportunity__c"; 
        public static readonly string  CRMCPPActionGridRequestc = "CRMC_PP__ActionGrid_Request__c"; 
        public static readonly string  CRMCPPActionGridRequesteec = "CRMC_PP__ActionGrid_Requestee__c"; 
        public static readonly string  CRMCPPGridViewc = "CRMC_PP__GridView__c"; 
        public static readonly string  CRMCPPViewCategoryc = "CRMC_PP__View_Category__c"; 
        public static readonly string  csmrgpDuplicateCasec = "csmrgp__Duplicate_Case__c"; 
        public static readonly string  csmrgpDuplicateGroupc = "csmrgp__Duplicate_Group__c"; 
        public static readonly string  CSTPartsReturnc = "CST_PartsReturn__c"; 
        public static readonly string  CustGoalc = "Cust_Goal__c"; 
        public static readonly string  CustomCaseHistoryc = "Custom_Case_History__c"; 
        public static readonly string  CustomerChannelc = "Customer_Channel__c"; 
        public static readonly string  CustomerExperiencec = "Customer_Experience__c"; 
        public static readonly string  CXActionPlanc = "CX_Action_Plan__c"; 
        public static readonly string  Departmentc = "Department__c"; 
        public static readonly string  DesignConditionc = "DesignCondition__c"; 
        public static readonly string  DevTaskc = "DevTask__c"; 
        public static readonly string  DMAPPAccountInsightMapc = "DMAPP__Account_Insight_Map__c"; 
        public static readonly string  DMAPPAccountInsightMapNodec = "DMAPP__Account_Insight_Map_Node__c"; 
        public static readonly string  DMAPPAccountInsightMapNodeParentc = "DMAPP__Account_Insight_Map_Node_Parent__c"; 
        public static readonly string  DMAPPAccountPlanObjectivec = "DMAPP__Account_Plan_Objective__c"; 
        public static readonly string  DMAPPAccountPlanUnitInsightMapc = "DMAPP__Account_Plan_Unit_Insight_Map__c"; 
        public static readonly string  DMAPPAccountPolMapSubMapc = "DMAPP__Account_Pol_Map_Sub_Map__c"; 
        public static readonly string  DMAPPAccountPoliticalMapc = "DMAPP__Account_Political_Map__c"; 
        public static readonly string  DMAPPAccountPoliticalMapContactc = "DMAPP__Account_Political_Map_Contact__c"; 
        public static readonly string  DMAPPAccountPoliticalMapInfluencec = "DMAPP__Account_Political_Map_Influence__c"; 
        public static readonly string  DMAPPAlignSearchc = "DMAPP__Align_Search__c"; 
        public static readonly string  DMAPPAlignSearchUsagec = "DMAPP__Align_Search_Usage__c"; 
        public static readonly string  DMAPPAMActionc = "DMAPP__AM_Action__c"; 
        public static readonly string  DMAPPAMAnswerc = "DMAPP__AM_Answer__c"; 
        public static readonly string  DMAPPAMCompetitorc = "DMAPP__AM_Competitor__c"; 
        public static readonly string  DMAPPAMPlanMetricScorec = "DMAPP__AM_Plan_Metric_Score__c"; 
        public static readonly string  DMAPPAMPlanRevenueTargetc = "DMAPP__AM_Plan_Revenue_Target__c"; 
        public static readonly string  DMAPPAMPlanSolutionc = "DMAPP__AM_Plan_Solution__c"; 
        public static readonly string  DMAPPAMPlanTeamc = "DMAPP__AM_Plan_Team__c"; 
        public static readonly string  DMAPPAMPlanUnitc = "DMAPP__AM_Plan_Unit__c"; 
        public static readonly string  DMAPPAMPlanUnitAnswerc = "DMAPP__AM_Plan_Unit_Answer__c"; 
        public static readonly string  DMAPPAMPlanUnitQuestionc = "DMAPP__AM_Plan_Unit_Question__c"; 
        public static readonly string  DMAPPAMQuestionc = "DMAPP__AM_Question__c"; 
        public static readonly string  DMAPPAMSolutionc = "DMAPP__AM_Solution__c"; 
        public static readonly string  DMAPPCallPlanc = "DMAPP__Call_Plan__c"; 
        public static readonly string  DMAPPCallPlanContactc = "DMAPP__Call_Plan_Contact__c"; 
        public static readonly string  DMAPPCallPlanObjectivec = "DMAPP__Call_Plan_Objective__c"; 
        public static readonly string  DMAPPCallPlanQuestionc = "DMAPP__Call_Plan_Question__c"; 
        public static readonly string  DMAPPCallPlanTopicc = "DMAPP__Call_Plan_Topic__c"; 
        public static readonly string  DMAPPCallPlanVisitorc = "DMAPP__Call_Plan_Visitor__c"; 
        public static readonly string  DMAPPDealReviewc = "DMAPP__Deal_Review__c"; 
        public static readonly string  DMAPPDMAccountPlanc = "DMAPP__DM_Account_Plan__c"; 
        public static readonly string  DMAPPDMAMPoliticalMapContactc = "DMAPP__DM_AM_Political_Map_Contact__c"; 
        public static readonly string  DMAPPDMAMPoliticalMapInfluencec = "DMAPP__DM_AM_Political_Map_Influence__c"; 
        public static readonly string  DMAPPDMCoachQuicklinkc = "DMAPP__DM_Coach_Quicklink__c"; 
        public static readonly string  DMAPPDMCoachRulec = "DMAPP__DM_Coach_Rule__c"; 
        public static readonly string  DMAPPDMCoachRulePartc = "DMAPP__DM_Coach_Rule_Part__c"; 
        public static readonly string  DMAPPDMCollaborationMapc = "DMAPP__DM_Collaboration_Map__c"; 
        public static readonly string  DMAPPDMCollaborationMapNodec = "DMAPP__DM_Collaboration_Map_Node__c"; 
        public static readonly string  DMAPPDMCollaborationMapNodeCompetitorc = "DMAPP__DM_Collaboration_Map_Node_Competitor__c"; 
        public static readonly string  DMAPPDMCollaborationMapNodeParentc = "DMAPP__DM_Collaboration_Map_Node_Parent__c"; 
        public static readonly string  DMAPPDMDatedForecastReportc = "DMAPP__DM_Dated_Forecast_Report__c"; 
        public static readonly string  DMAPPDMDatedUserForecastc = "DMAPP__DM_Dated_User_Forecast__c"; 
        public static readonly string  DMAPPDMDecisionCriterionc = "DMAPP__DM_Decision_Criterion__c"; 
        public static readonly string  DMAPPDMDecisionCriterionRankc = "DMAPP__DM_Decision_Criterion_Rank__c"; 
        public static readonly string  DMAPPDMDecisionCriterionScorec = "DMAPP__DM_Decision_Criterion_Score__c"; 
        public static readonly string  DMAPPDMDVLSAnswerc = "DMAPP__DM_DVLS_Answer__c"; 
        public static readonly string  DMAPPDMDVLSComponentc = "DMAPP__DM_DVLS_Component__c"; 
        public static readonly string  DMAPPDMDVLSComponentQuicklinkc = "DMAPP__DM_DVLS_Component_Quicklink__c"; 
        public static readonly string  DMAPPDMDVLSComponentUserc = "DMAPP__DM_DVLS_Component_User__c"; 
        public static readonly string  DMAPPDMDVLSCurriculumc = "DMAPP__DM_DVLS_Curriculum__c"; 
        public static readonly string  DMAPPDMDVLSCurriculumSubscriberc = "DMAPP__DM_DVLS_Curriculum_Subscriber__c"; 
        public static readonly string  DMAPPDMDVLSCurriculumUserc = "DMAPP__DM_DVLS_Curriculum_User__c"; 
        public static readonly string  DMAPPDMDVLSModulec = "DMAPP__DM_DVLS_Module__c"; 
        public static readonly string  DMAPPDMDVLSModuleUserc = "DMAPP__DM_DVLS_Module_User__c"; 
        public static readonly string  DMAPPDMDVLSQuestionc = "DMAPP__DM_DVLS_Question__c"; 
        public static readonly string  DMAPPDMDVLSQuestionAnswerResponsec = "DMAPP__DM_DVLS_Question_Answer_Response__c"; 
        public static readonly string  DMAPPDMDVLSQuestionResponsec = "DMAPP__DM_DVLS_Question_Response__c"; 
        public static readonly string  DMAPPDMDVLSQuicklinkUserc = "DMAPP__DM_DVLS_Quicklink_User__c"; 
        public static readonly string  DMAPPDMGeniusQualifierc = "DMAPP__DM_Genius_Qualifier__c"; 
        public static readonly string  DMAPPDMGeniusQualifierConfigc = "DMAPP__DM_Genius_Qualifier_Config__c"; 
        public static readonly string  DMAPPDMInsightMapNodeCompetitorc = "DMAPP__DM_Insight_Map_Node_Competitor__c"; 
        public static readonly string  DMAPPDMInsightMapNodeParentc = "DMAPP__DM_Insight_Map_Node_Parent__c"; 
        public static readonly string  DMAPPDMMarketViewPlanRowc = "DMAPP__DM_Market_View_Plan_Row__c"; 
        public static readonly string  DMAPPDMMarketViewReportc = "DMAPP__DM_Market_View_Report__c"; 
        public static readonly string  DMAPPDMMarketViewReportTeamc = "DMAPP__DM_Market_View_Report_Team__c"; 
        public static readonly string  DMAPPDMMilestoneOpportunityAnswerc = "DMAPP__DM_Milestone_Opportunity_Answer__c"; 
        public static readonly string  DMAPPDMMilestoneQuestionc = "DMAPP__DM_Milestone_Question__c"; 
        public static readonly string  DMAPPDMMilestoneQuestionOptionc = "DMAPP__DM_Milestone_Question_Option__c"; 
        public static readonly string  DMAPPDMMilestoneQuestionQuicklinkc = "DMAPP__DM_Milestone_Question_Quicklink__c"; 
        public static readonly string  DMAPPDMMilestoneSectionc = "DMAPP__DM_Milestone_Section__c"; 
        public static readonly string  DMAPPDMMilestoneSectionQuicklinkc = "DMAPP__DM_Milestone_Section_Quicklink__c"; 
        public static readonly string  DMAPPDMOpportunityCompetitorExtrac = "DMAPP__DM_Opportunity_Competitor_Extra__c"; 
        public static readonly string  DMAPPDMOpportunityContactExtrac = "DMAPP__DM_Opportunity_Contact_Extra__c"; 
        public static readonly string  DMAPPDMOpportunityExtrac = "DMAPP__DM_Opportunity_Extra__c"; 
        public static readonly string  DMAPPDMPlanQuestionQuicklinkc = "DMAPP__DM_Plan_Question_Quicklink__c"; 
        public static readonly string  DMAPPDMPoliticalMapContactc = "DMAPP__DM_Political_Map_Contact__c"; 
        public static readonly string  DMAPPDMPoliticalMapInfluencec = "DMAPP__DM_Political_Map_Influence__c"; 
        public static readonly string  DMAPPDMPoliticalMapInfluence2c = "DMAPP__DM_Political_Map_Influence2__c"; 
        public static readonly string  DMAPPDMQualifierc = "DMAPP__DM_Qualifier__c"; 
        public static readonly string  DMAPPDMQualifierAnswerc = "DMAPP__DM_Qualifier_Answer__c"; 
        public static readonly string  DMAPPDMQualifierQuicklinkc = "DMAPP__DM_Qualifier_Quicklink__c"; 
        public static readonly string  DMAPPDMQuicklinkc = "DMAPP__DM_Quicklink__c"; 
        public static readonly string  DMAPPDMQuicklinksUsagec = "DMAPP__DM_Quicklinks_Usage__c"; 
        public static readonly string  DMAPPDMSalesProcessc = "DMAPP__DM_Sales_Process__c"; 
        public static readonly string  DMAPPDMSalesProcessMapc = "DMAPP__DM_Sales_Process_Map__c"; 
        public static readonly string  DMAPPDMSalesProcessStagec = "DMAPP__DM_Sales_Process_Stage__c"; 
        public static readonly string  DMAPPDMSalesProcessStageQualifierc = "DMAPP__DM_Sales_Process_Stage_Qualifier__c"; 
        public static readonly string  DMAPPDMSegmentationQuestionc = "DMAPP__DM_Segmentation_Question__c"; 
        public static readonly string  DMAPPDMSegmentationQuestionOptionc = "DMAPP__DM_Segmentation_Question_Option__c"; 
        public static readonly string  DMAPPDMSettingc = "DMAPP__DM_Setting__c"; 
        public static readonly string  DMAPPDMStageExtrac = "DMAPP__DM_Stage_Extra__c"; 
        public static readonly string  DMAPPDMStrategyMapc = "DMAPP__DM_Strategy_Map__c"; 
        public static readonly string  DMAPPDMStrategyMapNodec = "DMAPP__DM_Strategy_Map_Node__c"; 
        public static readonly string  DMAPPDMStrategyMapNodeParentc = "DMAPP__DM_Strategy_Map_Node_Parent__c"; 
        public static readonly string  DMAPPDMSYSUsageSendDetailc = "DMAPP__DM_SYS_Usage_Send_Detail__c"; 
        public static readonly string  DMAPPDMTASCriterionc = "DMAPP__DM_TAS_Criterion__c"; 
        public static readonly string  DMAPPDMTASCriterionAnswerc = "DMAPP__DM_TAS_Criterion_Answer__c"; 
        public static readonly string  DMAPPDMTASCriterionCompetitorAnswerc = "DMAPP__DM_TAS_Criterion_Competitor_Answer__c"; 
        public static readonly string  DMAPPDMUnitSolutionc = "DMAPP__DM_Unit_Solution__c"; 
        public static readonly string  DMAPPDMUsagec = "DMAPP__DM_Usage__c"; 
        public static readonly string  DMAPPDMUserRoleExtrac = "DMAPP__DM_User_Role_Extra__c"; 
        public static readonly string  DMAPPDMValueMapOpportunityAnswerc = "DMAPP__DM_Value_Map_Opportunity_Answer__c"; 
        public static readonly string  DMAPPDMValueMapQuestionc = "DMAPP__DM_Value_Map_Question__c"; 
        public static readonly string  DMAPPDMValueMapQuestionFieldOptionc = "DMAPP__DM_Value_Map_Question_Field_Option__c"; 
        public static readonly string  DMAPPDMValueMapQuestionOptionc = "DMAPP__DM_Value_Map_Question_Option__c"; 
        public static readonly string  DMAPPForesightTeamc = "DMAPP__Foresight_Team__c"; 
        public static readonly string  DMAPPForesightTeamMemberc = "DMAPP__Foresight_Team_Member__c"; 
        public static readonly string  DMAPPInsightCategoryc = "DMAPP__Insight_Category__c"; 
        public static readonly string  DMAPPInsightCategoryTypec = "DMAPP__Insight_Category_Type__c"; 
        public static readonly string  DMAPPInsightCompetitiveDifferentiatorc = "DMAPP__Insight_Competitive_Differentiator__c"; 
        public static readonly string  DMAPPInsightCompetitorc = "DMAPP__Insight_Competitor__c"; 
        public static readonly string  DMAPPInsightDifferentiatorCompetitorc = "DMAPP__Insight_Differentiator_Competitor__c"; 
        public static readonly string  DMAPPInsightElementToCategoryc = "DMAPP__Insight_Element_To_Category__c"; 
        public static readonly string  DMAPPInsightHighYieldQuestionc = "DMAPP__Insight_High_Yield_Question__c"; 
        public static readonly string  DMAPPInsightHighYieldQuestionPersonac = "DMAPP__Insight_High_Yield_Question_Persona__c"; 
        public static readonly string  DMAPPInsightIndustryc = "DMAPP__Insight_Industry__c"; 
        public static readonly string  DMAPPInsightInsightc = "DMAPP__Insight_Insight__c"; 
        public static readonly string  DMAPPInsightInsightPersonac = "DMAPP__Insight_Insight_Persona__c"; 
        public static readonly string  DMAPPInsightKeyMessagec = "DMAPP__Insight_Key_Message__c"; 
        public static readonly string  DMAPPInsightKeyMessagePersonac = "DMAPP__Insight_Key_Message_Persona__c"; 
        public static readonly string  DMAPPInsightMaptoCategoryc = "DMAPP__Insight_Map_to_Category__c"; 
        public static readonly string  DMAPPInsightNamespacec = "DMAPP__Insight_Namespace__c"; 
        public static readonly string  DMAPPInsightObjectionc = "DMAPP__Insight_Objection__c"; 
        public static readonly string  DMAPPInsightPersonac = "DMAPP__Insight_Persona__c"; 
        public static readonly string  DMAPPInsightSalesToolc = "DMAPP__Insight_Sales_Tool__c"; 
        public static readonly string  DMAPPInsightSalesToolPersonac = "DMAPP__Insight_Sales_Tool_Persona__c"; 
        public static readonly string  DMAPPInsightSmartBusinessMapc = "DMAPP__Insight_Smart_Business_Map__c"; 
        public static readonly string  DMAPPInsightSmartBusinessMapIndustryc = "DMAPP__Insight_Smart_Business_Map_Industry__c"; 
        public static readonly string  DMAPPInsightSmartBusinessMapSmartNodec = "DMAPP__Insight_Smart_Business_Map_Smart_Node__c"; 
        public static readonly string  DMAPPInsightSmartNodec = "DMAPP__Insight_Smart_Node__c"; 
        public static readonly string  DMAPPInsightSmartNodeCompetitorc = "DMAPP__Insight_Smart_Node_Competitor__c"; 
        public static readonly string  DMAPPInsightSmartNodeEdgec = "DMAPP__Insight_Smart_Node_Edge__c"; 
        public static readonly string  DMAPPInsightSmartNodePersonac = "DMAPP__Insight_Smart_Node_Persona__c"; 
        public static readonly string  DMAPPInsightSolutionOpportunityc = "DMAPP__Insight_Solution_Opportunity__c"; 
        public static readonly string  DMAPPInsightSubcategoryc = "DMAPP__Insight_Subcategory__c"; 
        public static readonly string  DMAPPNewCoachRulesc = "DMAPP__New_Coach_Rules__c"; 
        public static readonly string  DMAPPPlanTypec = "DMAPP__Plan_Type__c"; 
        public static readonly string  DMAPPPlanTypeSolutionc = "DMAPP__Plan_Type_Solution__c"; 
        public static readonly string  DMAPPPlanUnitMemberAccountc = "DMAPP__Plan_Unit_Member_Account__c"; 
        public static readonly string  DMAPPPoliticalMapContactLastModificationc = "DMAPP__Political_Map_Contact_Last_Modification__c"; 
        public static readonly string  DMAPPPoliticalMapSubMapc = "DMAPP__Political_Map_Sub_Map__c"; 
        public static readonly string  DMAPPSegmentationUnitAnswerc = "DMAPP__Segmentation_Unit_Answer__c"; 
        public static readonly string  DMAPPUnitSolutionCompetitorc = "DMAPP__Unit_Solution_Competitor__c"; 
        public static readonly string  DMAPPUnitSolutionOppc = "DMAPP__Unit_Solution_Opp__c"; 
        public static readonly string  DMAPPSAMDMAPPc = "DMAPP_SAM__DMAPP__c"; 
        public static readonly string  DMAPPSOMDMAPPc = "DMAPP_SOM__DMAPP__c"; 
        public static readonly string  DMLSysExceptionc = "DMLSysException__c"; 
        public static readonly string  DMMAXClassc = "DMMAX__Class__c"; 
        public static readonly string  DMMAXContextc = "DMMAX__Context__c"; 
        public static readonly string  DMMAXDigestc = "DMMAX__Digest__c"; 
        public static readonly string  DMMAXInsightc = "DMMAX__Insight__c"; 
        public static readonly string  DMMAXInsightContextc = "DMMAX__InsightContext__c"; 
        public static readonly string  DMMAXLogc = "DMMAX__Log__c"; 
        public static readonly string  DMMAXMaxLibraryc = "DMMAX__Max_Library__c"; 
        public static readonly string  DMMAXNamespacec = "DMMAX__Namespace__c"; 
        public static readonly string  DMMAXOpinionc = "DMMAX__Opinion__c"; 
        public static readonly string  DMMAXSourcec = "DMMAX__Source__c"; 
        public static readonly string  DMMAXStatusc = "DMMAX__Status__c"; 
        public static readonly string  DMMAXStatusChatterc = "DMMAX__StatusChatter__c"; 
        public static readonly string  DMMAXStatusEmailc = "DMMAX__StatusEmail__c"; 
        public static readonly string  Documentc = "Document__c"; 
        public static readonly string  DocumentFolderc = "Document_Folder__c"; 
        public static readonly string  DocumentFolderAssociationc = "Document_Folder_Association__c"; 
        public static readonly string  DuplicateErrorLog = "DuplicateErrorLog"; 
        public static readonly string  DuplicateRecordItem = "DuplicateRecordItem"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  E2CPCannedCommentc = "E2CP__Canned_Comment__c"; 
        public static readonly string  E2CPCannedCommentFilterc = "E2CP__Canned_Comment_Filter__c"; 
        public static readonly string  E2CPCaseCommentDraftc = "E2CP__Case_Comment_Draft__c"; 
        public static readonly string  E2CPNewCommentActionc = "E2CP__New_Comment_Action__c"; 
        public static readonly string  EarlyStageOpportunityc = "Early_Stage_Opportunity__c"; 
        public static readonly string  EDIBankc = "EDI__Bank__c"; 
        public static readonly string  EDIBankItemc = "EDI__Bank_Item__c"; 
        public static readonly string  EDIBankLinec = "EDI__Bank_Line__c"; 
        public static readonly string  EDICustomTablec = "EDI__Custom_Table__c"; 
        public static readonly string  EDIDocumentc = "EDI__Document__c"; 
        public static readonly string  EDIEventc = "EDI__Event__c"; 
        public static readonly string  EDIFieldc = "EDI__Field__c"; 
        public static readonly string  EDIInventoryc = "EDI__Inventory__c"; 
        public static readonly string  EDIInventoryLinec = "EDI__Inventory_Line__c"; 
        public static readonly string  EDIInvoicec = "EDI__Invoice__c"; 
        public static readonly string  EDIInvoiceLinec = "EDI__Invoice_Line__c"; 
        public static readonly string  EDIMessagec = "EDI__Message__c"; 
        public static readonly string  EDIMessageLinec = "EDI__Message_Line__c"; 
        public static readonly string  EDINotec = "EDI__Note__c"; 
        public static readonly string  EDIOrderc = "EDI__Order__c"; 
        public static readonly string  EDIOrderLinec = "EDI__Order_Line__c"; 
        public static readonly string  EDIProcessc = "EDI__Process__c"; 
        public static readonly string  EDIProcessParameterc = "EDI__Process_Parameter__c"; 
        public static readonly string  EDIProcessStepc = "EDI__Process_Step__c"; 
        public static readonly string  EDIRecordc = "EDI__Record__c"; 
        public static readonly string  EDIShipmentc = "EDI__Shipment__c"; 
        public static readonly string  EDIShipmentLinec = "EDI__Shipment_Line__c"; 
        public static readonly string  EDITablec = "EDI__Table__c"; 
        public static readonly string  EDITPProcessc = "EDI__TP_Process__c"; 
        public static readonly string  EDITPProcessParameterc = "EDI__TP_Process_Parameter__c"; 
        public static readonly string  EDITPProcessStepc = "EDI__TP_Process_Step__c"; 
        public static readonly string  EDITradingPartnerc = "EDI__Trading_Partner__c"; 
        public static readonly string  EDITradingPartnerEntityc = "EDI__Trading_Partner_Entity__c"; 
        public static readonly string  EDIUserGroupc = "EDI__User_Group__c"; 
        public static readonly string  EDIUserGroupMemberc = "EDI__User_Group_Member__c"; 
        public static readonly string  EDIValuec = "EDI__Value__c"; 
        public static readonly string  EmailNotificationc = "Email_Notification__c"; 
        public static readonly string  EngagementHistoryRollup = "EngagementHistoryRollup"; 
        public static readonly string  EngineeringGuidekav = "Engineering_Guide__kav"; 
        public static readonly string  Entitlement = "Entitlement"; 
        public static readonly string  EntitlementContact = "EntitlementContact"; 
        public static readonly string  ERPProductCatgXrefc = "ERP_Product_Catg_Xref__c"; 
        public static readonly string  Estimatec = "Estimate__c"; 
        public static readonly string  EstimateItemc = "Estimate_Item__c"; 
        public static readonly string  EstimateMetricc = "Estimate_Metric__c"; 
        public static readonly string  EUEmployeec = "EU_Employee__c"; 
        public static readonly string  EULegacyPhaseHistoryc = "EU_Legacy_Phase_History__c"; 
        public static readonly string  Event = "Event"; 
        public static readonly string  FieldAssemblykav = "Field_Assembly__kav"; 
        public static readonly string  FileSearchActivity = "FileSearchActivity"; 
        public static readonly string  Financialc = "Financial__c"; 
        public static readonly string  FLAGSCaseFlagsHistoryTrackingc = "FLAGS__Case_Flags_History_Tracking__c"; 
        public static readonly string  FLAGSCaseFlagsBusinessHoursc = "FLAGS__CaseFlagsBusinessHours__c"; 
        public static readonly string  Formkav = "Form__kav"; 
        public static readonly string  HVACNotificationc = "HVAC_Notification__c"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  IECActionPlanc = "IEC_Action_Plan__c"; 
        public static readonly string  IECComponentc = "IEC_Component__c"; 
        public static readonly string  IECMaturityModelc = "IEC_Maturity_Model__c"; 
        public static readonly string  IECMaturityModelMappingc = "IEC_Maturity_Model_Mapping__c"; 
        public static readonly string  IECMaturityModelRoleMappingc = "IEC_Maturity_Model_Role_Mapping__c"; 
        public static readonly string  IECObjectivec = "IEC_Objective__c"; 
        public static readonly string  InboundSocialPost = "InboundSocialPost"; 
        public static readonly string  InstallationGuidekav = "Installation_Guide__kav"; 
        public static readonly string  InstallationOperationsMaintenancekav = "Installation_Operations_Maintenance__kav"; 
        public static readonly string  InstallationorReassemblyInstructionkav = "Installation_or_Reassembly_Instruction__kav"; 
        public static readonly string  Issuesc = "Issues__c"; 
        public static readonly string  JCIApexJobc = "JCI_Apex_Job__c"; 
        public static readonly string  JCIBrandc = "JCI_Brand__c"; 
        public static readonly string  JCIErrorLogc = "JCI_Error_Log__c"; 
        public static readonly string  JCIPortalBusinessFunctionc = "JCI_Portal_Business_Function__c"; 
        public static readonly string  JCIPortalFamilyBrandc = "JCI_Portal_Family_Brand__c"; 
        public static readonly string  JCISMCreditLimitc = "JCI_SM_Credit_Limit__c"; 
        public static readonly string  JCISMEUGasHistoryc = "JCI_SM_EU_Gas_History__c"; 
        public static readonly string  JCIFeaturedContentc = "JCIFeaturedContent__c"; 
        public static readonly string  KANReportGroupc = "KAN__Report_Group__c"; 
        public static readonly string  KBQAkav = "KB_Q_A__kav"; 
        public static readonly string  KBSolutionkav = "KB_Solution__kav"; 
        public static readonly string  KMDTMetadataActionc = "KMDT__Metadata_Action__c"; 
        public static readonly string  KNDYCustomerTypec = "KNDY_Customer_Type__c"; 
        public static readonly string  KNDY4AccountingCodec = "KNDY4__Accounting_Code__c"; 
        public static readonly string  KNDY4AccountingDefaultc = "KNDY4__Accounting_Default__c"; 
        public static readonly string  KNDY4AccountingEntryc = "KNDY4__Accounting_Entry__c"; 
        public static readonly string  KNDY4AccountingEntryLinec = "KNDY4__Accounting_Entry_Line__c"; 
        public static readonly string  KNDY4AccountingRulec = "KNDY4__Accounting_Rule__c"; 
        public static readonly string  KNDY4AccountingStandardc = "KNDY4__Accounting_Standard__c"; 
        public static readonly string  KNDY4Agreementc = "KNDY4__Agreement__c"; 
        public static readonly string  KNDY4AgreementLinec = "KNDY4__Agreement_Line__c"; 
        public static readonly string  KNDY4AllocationProfilec = "KNDY4__Allocation_Profile__c"; 
        public static readonly string  KNDY4AllocationRulec = "KNDY4__Allocation_Rule__c"; 
        public static readonly string  KNDY4AllowanceAppliedc = "KNDY4__Allowance_Applied__c"; 
        public static readonly string  KNDY4AllowanceRulec = "KNDY4__Allowance_Rule__c"; 
        public static readonly string  KNDY4AllowanceTypec = "KNDY4__Allowance_Type__c"; 
        public static readonly string  KNDY4ASNc = "KNDY4__ASN__c"; 
        public static readonly string  KNDY4ASNLinec = "KNDY4__ASN_Line__c"; 
        public static readonly string  KNDY4AssetClassc = "KNDY4__Asset_Class__c"; 
        public static readonly string  KNDY4AssetClassRulec = "KNDY4__Asset_Class_Rule__c"; 
        public static readonly string  KNDY4BankAccountc = "KNDY4__Bank_Account__c"; 
        public static readonly string  KNDY4BankFilec = "KNDY4__Bank_File__c"; 
        public static readonly string  KNDY4BankFileLinec = "KNDY4__Bank_File_Line__c"; 
        public static readonly string  KNDY4BankTransactionc = "KNDY4__Bank_Transaction__c"; 
        public static readonly string  KNDY4BankTransactionGroupc = "KNDY4__Bank_Transaction_Group__c"; 
        public static readonly string  KNDY4BankTransactionMatchc = "KNDY4__Bank_Transaction_Match__c"; 
        public static readonly string  KNDY4Binc = "KNDY4__Bin__c"; 
        public static readonly string  KNDY4Budgetc = "KNDY4__Budget__c"; 
        public static readonly string  KNDY4BudgetLinec = "KNDY4__Budget_Line__c"; 
        public static readonly string  KNDY4BudgetLine1c = "KNDY4__Budget_Line1__c"; 
        public static readonly string  KNDY4BuyerAssignmentc = "KNDY4__Buyer_Assignment__c"; 
        public static readonly string  KNDY4Calendarc = "KNDY4__Calendar__c"; 
        public static readonly string  KNDY4Carrierc = "KNDY4__Carrier__c"; 
        public static readonly string  KNDY4CartLinec = "KNDY4__Cart_Line__c"; 
        public static readonly string  KNDY4Catalogc = "KNDY4__Catalog__c"; 
        public static readonly string  KNDY4CatalogLinec = "KNDY4__Catalog_Line__c"; 
        public static readonly string  KNDY4Categoryc = "KNDY4__Category__c"; 
        public static readonly string  KNDY4Claimc = "KNDY4__Claim__c"; 
        public static readonly string  KNDY4ClaimLinec = "KNDY4__Claim_Line__c"; 
        public static readonly string  KNDY4Classc = "KNDY4__Class__c"; 
        public static readonly string  KNDY4CommodityClassc = "KNDY4__Commodity_Class__c"; 
        public static readonly string  KNDY4CommodityCodec = "KNDY4__Commodity_Code__c"; 
        public static readonly string  KNDY4Companyc = "KNDY4__Company__c"; 
        public static readonly string  KNDY4CompanyGroupc = "KNDY4__Company_Group__c"; 
        public static readonly string  KNDY4Componentc = "KNDY4__Component__c"; 
        public static readonly string  KNDY4Contractc = "KNDY4__Contract__c"; 
        public static readonly string  KNDY4ContractLinec = "KNDY4__Contract_Line__c"; 
        public static readonly string  KNDY4CrossReferencec = "KNDY4__Cross_Reference__c"; 
        public static readonly string  KNDY4Currencyc = "KNDY4__Currency__c"; 
        public static readonly string  KNDY4CurrencyControlc = "KNDY4__Currency_Control__c"; 
        public static readonly string  KNDY4Customerc = "KNDY4__Customer__c"; 
        public static readonly string  KNDY4CustomerGroupc = "KNDY4__Customer_Group__c"; 
        public static readonly string  KNDY4CustomerInvoicec = "KNDY4__Customer_Invoice__c"; 
        public static readonly string  KNDY4CustomerInvoiceLinec = "KNDY4__Customer_Invoice_Line__c"; 
        public static readonly string  KNDY4CustomerInvoiceSubLinec = "KNDY4__Customer_Invoice_Sub_Line__c"; 
        public static readonly string  KNDY4CustomerReceiptc = "KNDY4__Customer_Receipt__c"; 
        public static readonly string  KNDY4CustomerReceiptLinec = "KNDY4__Customer_Receipt_Line__c"; 
        public static readonly string  KNDY4ECOc = "KNDY4__ECO__c"; 
        public static readonly string  KNDY4ECOLinec = "KNDY4__ECO_Line__c"; 
        public static readonly string  KNDY4ExchangeRatec = "KNDY4__Exchange_Rate__c"; 
        public static readonly string  KNDY4Facilityc = "KNDY4__Facility__c"; 
        public static readonly string  KNDY4FacilityAssignmentc = "KNDY4__Facility_Assignment__c"; 
        public static readonly string  KNDY4FacilityItemc = "KNDY4__Facility_Item__c"; 
        public static readonly string  KNDY4FinancialBalancec = "KNDY4__Financial_Balance__c"; 
        public static readonly string  KNDY4FinancialReportc = "KNDY4__Financial_Report__c"; 
        public static readonly string  KNDY4FinancialReportSectionc = "KNDY4__Financial_Report_Section__c"; 
        public static readonly string  KNDY4FinancialReportSectionDatac = "KNDY4__Financial_Report_Section_Data__c"; 
        public static readonly string  KNDY4FiscalYearc = "KNDY4__Fiscal_Year__c"; 
        public static readonly string  KNDY4FixedAssetc = "KNDY4__Fixed_Asset__c"; 
        public static readonly string  KNDY4FixedAssetAdjustmentc = "KNDY4__Fixed_Asset_Adjustment__c"; 
        public static readonly string  KNDY4FixedAssetDepreciationc = "KNDY4__Fixed_Asset_Depreciation__c"; 
        public static readonly string  KNDY4FOBTermsc = "KNDY4__FOB_Terms__c"; 
        public static readonly string  KNDY4Fulfillmentc = "KNDY4__Fulfillment__c"; 
        public static readonly string  KNDY4GLAccountc = "KNDY4__GL_Account__c"; 
        public static readonly string  KNDY4GLTypec = "KNDY4__GL_Type__c"; 
        public static readonly string  KNDY4Hierarchyc = "KNDY4__Hierarchy__c"; 
        public static readonly string  KNDY4InventoryChangec = "KNDY4__Inventory_Change__c"; 
        public static readonly string  KNDY4InventoryTransactionc = "KNDY4__Inventory_Transaction__c"; 
        public static readonly string  KNDY4Invoicec = "KNDY4__Invoice__c"; 
        public static readonly string  KNDY4InvoiceGroupingRulec = "KNDY4__Invoice_Grouping_Rule__c"; 
        public static readonly string  KNDY4InvoiceLinec = "KNDY4__Invoice_Line__c"; 
        public static readonly string  KNDY4Itemc = "KNDY4__Item__c"; 
        public static readonly string  KNDY4ItemAttributec = "KNDY4__Item_Attribute__c"; 
        public static readonly string  KNDY4ItemCostc = "KNDY4__Item_Cost__c"; 
        public static readonly string  KNDY4ItemCrossReferencec = "KNDY4__Item_Cross_Reference__c"; 
        public static readonly string  KNDY4ItemSpecificationc = "KNDY4__Item_Specification__c"; 
        public static readonly string  KNDY4JournalEntryc = "KNDY4__Journal_Entry__c"; 
        public static readonly string  KNDY4JournalEntryLinec = "KNDY4__Journal_Entry_Line__c"; 
        public static readonly string  KNDY4Labelc = "KNDY4__Label__c"; 
        public static readonly string  KNDY4LaborTrackingc = "KNDY4__Labor_Tracking__c"; 
        public static readonly string  KNDY4LaborTransactionc = "KNDY4__Labor_Transaction__c"; 
        public static readonly string  KNDY4Locationc = "KNDY4__Location__c"; 
        public static readonly string  KNDY4Lotc = "KNDY4__Lot__c"; 
        public static readonly string  KNDY4LPNc = "KNDY4__LPN__c"; 
        public static readonly string  KNDY4MaterialTrackingc = "KNDY4__Material_Tracking__c"; 
        public static readonly string  KNDY4MeansofTransportc = "KNDY4__Means_of_Transport__c"; 
        public static readonly string  KNDY4MergeBulkc = "KNDY4__Merge_Bulk__c"; 
        public static readonly string  KNDY4MergeDocumentc = "KNDY4__Merge_Document__c"; 
        public static readonly string  KNDY4MergeFieldc = "KNDY4__Merge_Field__c"; 
        public static readonly string  KNDY4MRPc = "KNDY4__MRP__c"; 
        public static readonly string  KNDY4MRPRunc = "KNDY4__MRP_Run__c"; 
        public static readonly string  KNDY4OperationTrackingc = "KNDY4__Operation_Tracking__c"; 
        public static readonly string  KNDY4OperationTransactionc = "KNDY4__Operation_Transaction__c"; 
        public static readonly string  KNDY4Orderc = "KNDY4__Order__c"; 
        public static readonly string  KNDY4OrderForecastc = "KNDY4__Order_Forecast__c"; 
        public static readonly string  KNDY4OrderLinec = "KNDY4__Order_Line__c"; 
        public static readonly string  KNDY4PackageClassc = "KNDY4__Package_Class__c"; 
        public static readonly string  KNDY4Paymentc = "KNDY4__Payment__c"; 
        public static readonly string  KNDY4PaymentLinec = "KNDY4__Payment_Line__c"; 
        public static readonly string  KNDY4PaymentMatchc = "KNDY4__Payment_Match__c"; 
        public static readonly string  KNDY4PaymentMethodc = "KNDY4__Payment_Method__c"; 
        public static readonly string  KNDY4PaymentProfilec = "KNDY4__Payment_Profile__c"; 
        public static readonly string  KNDY4PaymentTermc = "KNDY4__Payment_Term__c"; 
        public static readonly string  KNDY4Periodc = "KNDY4__Period__c"; 
        public static readonly string  KNDY4PickSortCriteriac = "KNDY4__Pick_Sort_Criteria__c"; 
        public static readonly string  KNDY4Planc = "KNDY4__Plan__c"; 
        public static readonly string  KNDY4Pricebookc = "KNDY4__Pricebook__c"; 
        public static readonly string  KNDY4PricebookLinec = "KNDY4__Pricebook_Line__c"; 
        public static readonly string  KNDY4ProcessJobc = "KNDY4__Process_Job__c"; 
        public static readonly string  KNDY4ProcessRequestc = "KNDY4__Process_Request__c"; 
        public static readonly string  KNDY4Productc = "KNDY4__Product__c"; 
        public static readonly string  KNDY4ProductGroupc = "KNDY4__Product_Group__c"; 
        public static readonly string  KNDY4Punchoutc = "KNDY4__Punchout__c"; 
        public static readonly string  KNDY4PurchaseOrderc = "KNDY4__Purchase_Order__c"; 
        public static readonly string  KNDY4PurchaseOrderLinec = "KNDY4__Purchase_Order_Line__c"; 
        public static readonly string  KNDY4ReasonCodec = "KNDY4__Reason_Code__c"; 
        public static readonly string  KNDY4ReceiptLinec = "KNDY4__Receipt_Line__c"; 
        public static readonly string  KNDY4ReceivingDocumentc = "KNDY4__Receiving_Document__c"; 
        public static readonly string  KNDY4RecurringAccountingEntryc = "KNDY4__Recurring_Accounting_Entry__c"; 
        public static readonly string  KNDY4RecurringAccountingEntryLinec = "KNDY4__Recurring_Accounting_Entry_Line__c"; 
        public static readonly string  KNDY4RecurringTemplatec = "KNDY4__Recurring_Template__c"; 
        public static readonly string  KNDY4RecurringTemplateLinec = "KNDY4__Recurring_Template_Line__c"; 
        public static readonly string  KNDY4ReportItemc = "KNDY4__Report_Item__c"; 
        public static readonly string  KNDY4ReportItemChunkc = "KNDY4__Report_Item_Chunk__c"; 
        public static readonly string  KNDY4ReportingCustomerc = "KNDY4__Reporting_Customer__c"; 
        public static readonly string  KNDY4Requisitionc = "KNDY4__Requisition__c"; 
        public static readonly string  KNDY4RequisitionCrossReferencec = "KNDY4__Requisition_Cross_Reference__c"; 
        public static readonly string  KNDY4RequisitionLinec = "KNDY4__Requisition_Line__c"; 
        public static readonly string  KNDY4Resourcec = "KNDY4__Resource__c"; 
        public static readonly string  KNDY4Routingc = "KNDY4__Routing__c"; 
        public static readonly string  KNDY4SalesOrderc = "KNDY4__Sales_Order__c"; 
        public static readonly string  KNDY4SalesOrderLinec = "KNDY4__Sales_Order_Line__c"; 
        public static readonly string  KNDY4SegmentValidationc = "KNDY4__Segment_Validation__c"; 
        public static readonly string  KNDY4Serialc = "KNDY4__Serial__c"; 
        public static readonly string  KNDY4SerialTransactionc = "KNDY4__Serial_Transaction__c"; 
        public static readonly string  KNDY4Shipmentc = "KNDY4__Shipment__c"; 
        public static readonly string  KNDY4ShipmentLinec = "KNDY4__Shipment_Line__c"; 
        public static readonly string  KNDY4ShippingMethodc = "KNDY4__Shipping_Method__c"; 
        public static readonly string  KNDY4ShoppingCartc = "KNDY4__Shopping_Cart__c"; 
        public static readonly string  KNDY4SKIDc = "KNDY4__SKID__c"; 
        public static readonly string  KNDY4StockMovementRulec = "KNDY4__Stock_Movement_Rule__c"; 
        public static readonly string  KNDY4StockRoutec = "KNDY4__Stock_Route__c"; 
        public static readonly string  KNDY4StockRouteDestinationc = "KNDY4__Stock_Route_Destination__c"; 
        public static readonly string  KNDY4Stockpointc = "KNDY4__Stockpoint__c"; 
        public static readonly string  KNDY4Substitutionc = "KNDY4__Substitution__c"; 
        public static readonly string  KNDY4Supplierc = "KNDY4__Supplier__c"; 
        public static readonly string  KNDY4Supplier1099c = "KNDY4__Supplier_1099__c"; 
        public static readonly string  KNDY4SupplierInvoicec = "KNDY4__Supplier_Invoice__c"; 
        public static readonly string  KNDY4SupplierInvoiceLinec = "KNDY4__Supplier_Invoice_Line__c"; 
        public static readonly string  KNDY4SupplierPaymentc = "KNDY4__Supplier_Payment__c"; 
        public static readonly string  KNDY4SupplierPaymentLinec = "KNDY4__Supplier_Payment_Line__c"; 
        public static readonly string  KNDY4TaxBookc = "KNDY4__Tax_Book__c"; 
        public static readonly string  KNDY4Tierc = "KNDY4__Tier__c"; 
        public static readonly string  KNDY4TransactionMatchingRulec = "KNDY4__Transaction_Matching_Rule__c"; 
        public static readonly string  KNDY4TransitRoutec = "KNDY4__Transit_Route__c"; 
        public static readonly string  KNDY4UOMc = "KNDY4__UOM__c"; 
        public static readonly string  KNDY4UserPreferencec = "KNDY4__User_Preference__c"; 
        public static readonly string  KNDY4WorkCenterc = "KNDY4__Work_Center__c"; 
        public static readonly string  KNDY4WorkCenterResourcec = "KNDY4__Work_Center_Resource__c"; 
        public static readonly string  KNDY4WorkOrderc = "KNDY4__Work_Order__c"; 
        public static readonly string  KNDY4WorkingDayc = "KNDY4__Working_Day__c"; 
        public static readonly string  KNDYCPQAccountPriceListc = "KNDYCPQ__AccountPriceList__c"; 
        public static readonly string  KNDYCPQAnswerc = "KNDYCPQ__Answer__c"; 
        public static readonly string  KNDYCPQAttributec = "KNDYCPQ__Attribute__c"; 
        public static readonly string  KNDYCPQAttributeGroupc = "KNDYCPQ__AttributeGroup__c"; 
        public static readonly string  KNDYCPQAttributeGroupAssociationc = "KNDYCPQ__AttributeGroupAssociation__c"; 
        public static readonly string  KNDYCPQCompanyc = "KNDYCPQ__Company__c"; 
        public static readonly string  KNDYCPQConfigurationSecurityc = "KNDYCPQ__ConfigurationSecurity__c"; 
        public static readonly string  KNDYCPQConfigurationVariablec = "KNDYCPQ__ConfigurationVariable__c"; 
        public static readonly string  KNDYCPQConfigurationVariableGroupc = "KNDYCPQ__ConfigurationVariableGroup__c"; 
        public static readonly string  KNDYCPQControllingDependencyc = "KNDYCPQ__ControllingDependency__c"; 
        public static readonly string  KNDYCPQCreditCardDetailc = "KNDYCPQ__CreditCardDetail__c"; 
        public static readonly string  KNDYCPQCustomerGroupc = "KNDYCPQ__CustomerGroup__c"; 
        public static readonly string  KNDYCPQCustomerGroupPriceListc = "KNDYCPQ__CustomerGroupPriceList__c"; 
        public static readonly string  KNDYCPQCustomLayoutc = "KNDYCPQ__CustomLayout__c"; 
        public static readonly string  KNDYCPQDependencyc = "KNDYCPQ__Dependency__c"; 
        public static readonly string  KNDYCPQDependencyConditionsc = "KNDYCPQ__DependencyConditions__c"; 
        public static readonly string  KNDYCPQFieldUpdatec = "KNDYCPQ__FieldUpdate__c"; 
        public static readonly string  KNDYCPQFOBc = "KNDYCPQ__FOB__c"; 
        public static readonly string  KNDYCPQLookupFieldPopulationc = "KNDYCPQ__LookupFieldPopulation__c"; 
        public static readonly string  KNDYCPQMessagec = "KNDYCPQ__Message__c"; 
        public static readonly string  KNDYCPQMessageDependencyc = "KNDYCPQ__MessageDependency__c"; 
        public static readonly string  KNDYCPQMessageDependencyConditionc = "KNDYCPQ__MessageDependencyCondition__c"; 
        public static readonly string  KNDYCPQMessagePartc = "KNDYCPQ__MessagePart__c"; 
        public static readonly string  KNDYCPQObjectRecordFilterConditionc = "KNDYCPQ__ObjectRecordFilterCondition__c"; 
        public static readonly string  KNDYCPQObjectRecordLookUpc = "KNDYCPQ__ObjectRecordLookUp__c"; 
        public static readonly string  KNDYCPQOperationc = "KNDYCPQ__Operation__c"; 
        public static readonly string  KNDYCPQOptionc = "KNDYCPQ__Option__c"; 
        public static readonly string  KNDYCPQPDFElementc = "KNDYCPQ__PDFElement__c"; 
        public static readonly string  KNDYCPQPDFSectionc = "KNDYCPQ__PDFSection__c"; 
        public static readonly string  KNDYCPQPDFSectionCriteriac = "KNDYCPQ__PDFSectionCriteria__c"; 
        public static readonly string  KNDYCPQPDFTemplatec = "KNDYCPQ__PDFTemplate__c"; 
        public static readonly string  KNDYCPQPriceBreakc = "KNDYCPQ__PriceBreak__c"; 
        public static readonly string  KNDYCPQPriceListc = "KNDYCPQ__PriceList__c"; 
        public static readonly string  KNDYCPQPriceListEntryc = "KNDYCPQ__PriceListEntry__c"; 
        public static readonly string  KNDYCPQProductAttributec = "KNDYCPQ__ProductAttribute__c"; 
        public static readonly string  KNDYCPQProductConfiguratorc = "KNDYCPQ__ProductConfigurator__c"; 
        public static readonly string  KNDYCPQProductImagec = "KNDYCPQ__ProductImage__c"; 
        public static readonly string  KNDYCPQProductKitc = "KNDYCPQ__ProductKit__c"; 
        public static readonly string  KNDYCPQProductMaterialc = "KNDYCPQ__ProductMaterial__c"; 
        public static readonly string  KNDYCPQProductOperationc = "KNDYCPQ__ProductOperation__c"; 
        public static readonly string  KNDYCPQProductUOMc = "KNDYCPQ__ProductUOM__c"; 
        public static readonly string  KNDYCPQQuestionc = "KNDYCPQ__Question__c"; 
        public static readonly string  KNDYCPQQuestionComboLookupc = "KNDYCPQ__QuestionComboLookup__c"; 
        public static readonly string  KNDYCPQQuestionGroupc = "KNDYCPQ__QuestionGroup__c"; 
        public static readonly string  KNDYCPQQuestionRangec = "KNDYCPQ__QuestionRange__c"; 
        public static readonly string  KNDYCPQQuotec = "KNDYCPQ__Quote__c"; 
        public static readonly string  KNDYCPQQuoteChargec = "KNDYCPQ__QuoteCharge__c"; 
        public static readonly string  KNDYCPQQuoteEnvelopec = "KNDYCPQ__QuoteEnvelope__c"; 
        public static readonly string  KNDYCPQQuoteGroupc = "KNDYCPQ__QuoteGroup__c"; 
        public static readonly string  KNDYCPQQuoteLinec = "KNDYCPQ__QuoteLine__c"; 
        public static readonly string  KNDYCPQQuoteLineItemMessagec = "KNDYCPQ__QuoteLineItemMessage__c"; 
        public static readonly string  KNDYCPQQuoteLineMaterialc = "KNDYCPQ__QuoteLineMaterial__c"; 
        public static readonly string  KNDYCPQQuoteLineOperationc = "KNDYCPQ__QuoteLineOperation__c"; 
        public static readonly string  KNDYCPQQuoteLinePriceBreakc = "KNDYCPQ__QuoteLinePriceBreak__c"; 
        public static readonly string  KNDYCPQQuoteLineSourcec = "KNDYCPQ__QuoteLineSource__c"; 
        public static readonly string  KNDYCPQQuoteRulec = "KNDYCPQ__QuoteRule__c"; 
        public static readonly string  KNDYCPQQuoteRuleAccountUsagec = "KNDYCPQ__QuoteRuleAccountUsage__c"; 
        public static readonly string  KNDYCPQQuoteRuleCriteriac = "KNDYCPQ__QuoteRuleCriteria__c"; 
        public static readonly string  KNDYCPQQuoteRuleDiscountRangec = "KNDYCPQ__QuoteRuleDiscountRange__c"; 
        public static readonly string  KNDYCPQQuoteStagec = "KNDYCPQ__QuoteStage__c"; 
        public static readonly string  KNDYCPQRelatedProductc = "KNDYCPQ__RelatedProduct__c"; 
        public static readonly string  KNDYCPQShippingMethodc = "KNDYCPQ__ShippingMethod__c"; 
        public static readonly string  KNDYCPQSmartNumberc = "KNDYCPQ__SmartNumber__c"; 
        public static readonly string  KNDYCPQSpecialChargec = "KNDYCPQ__SpecialCharge__c"; 
        public static readonly string  KNDYCPQTransactionHistoryc = "KNDYCPQ__TransactionHistory__c"; 
        public static readonly string  KNDYCPQVariableSegmentc = "KNDYCPQ__VariableSegment__c"; 
        public static readonly string  KNDYCPQWorkCenterc = "KNDYCPQ__WorkCenter__c"; 
        public static readonly string  KNDYDOCDocumentJobc = "KNDYDOC__Document_Job__c"; 
        public static readonly string  KNDYDOCTemplateRulec = "KNDYDOC__Template_Rule__c"; 
        public static readonly string  KNDYUIDefinitionc = "KNDYUI__Definition__c"; 
        public static readonly string  KNDYUIExchangeRateSettingc = "KNDYUI__Exchange_Rate_Setting__c"; 
        public static readonly string  KNDYUIQueryRangec = "KNDYUI__Query_Range__c"; 
        public static readonly string  Knowledgekav = "Knowledge__kav"; 
        public static readonly string  KnowledgeArticleEventLogc = "Knowledge_Article_Event_Log__c"; 
        public static readonly string  LASalesPlanDatac = "LA_Sales_Plan_Data__c"; 
        public static readonly string  LASalesPlanSalesRepc = "LA_Sales_Plan_SalesRep__c"; 
        public static readonly string  LaborRatec = "Labor_Rate__c"; 
        public static readonly string  LatestUpdatesc = "Latest_Updates__c"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  LeadTimeCodec = "Lead_Time_Code__c"; 
        public static readonly string  LinkedArticle = "LinkedArticle"; 
        public static readonly string  ListEmail = "ListEmail"; 
        public static readonly string  ListEmailRecipientSource = "ListEmailRecipientSource"; 
        public static readonly string  ListEmailSentResult = "ListEmailSentResult"; 
        public static readonly string  LiteratureSupplementkav = "Literature_Supplement__kav"; 
        public static readonly string  LiveAgentSession = "LiveAgentSession"; 
        public static readonly string  LiveChatFileToken = "LiveChatFileToken"; 
        public static readonly string  LiveChatTranscript = "LiveChatTranscript"; 
        public static readonly string  Localec = "Locale__c"; 
        public static readonly string  Locationc = "Location__c"; 
        public static readonly string  LocationContactc = "Location_Contact__c"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  MacroAction = "MacroAction"; 
        public static readonly string  MacroInstruction = "MacroInstruction"; 
        public static readonly string  ManagedContentBlock = "ManagedContentBlock"; 
        public static readonly string  ManagedContentBlockVersion = "ManagedContentBlockVersion"; 
        public static readonly string  ManagedContentSet = "ManagedContentSet"; 
        public static readonly string  ManagedContentSetLink = "ManagedContentSetLink"; 
        public static readonly string  ManifestItemsc = "Manifest_Items__c"; 
        public static readonly string  Marketc = "Market__c"; 
        public static readonly string  MarketIntelligencec = "Market_Intelligence__c"; 
        public static readonly string  MarketMappingc = "Market_Mapping__c"; 
        public static readonly string  Marketingkav = "Marketing__kav"; 
        public static readonly string  MarketingContentc = "Marketing_Content__c"; 
        public static readonly string  MassAssignBatchc = "Mass_Assign_Batch__c"; 
        public static readonly string  Messagec = "Message__c"; 
        public static readonly string  Milestonec = "Milestone__c"; 
        public static readonly string  Milestone1Expensec = "Milestone1_Expense__c"; 
        public static readonly string  Milestone1Logc = "Milestone1_Log__c"; 
        public static readonly string  Milestone1Milestonec = "Milestone1_Milestone__c"; 
        public static readonly string  Milestone1Projectc = "Milestone1_Project__c"; 
        public static readonly string  Milestone1Taskc = "Milestone1_Task__c"; 
        public static readonly string  Milestone1Timec = "Milestone1_Time__c"; 
        public static readonly string  Miscellaneouskav = "Miscellaneous__kav"; 
        public static readonly string  NavigatorAccountc = "Navigator_Account__c"; 
        public static readonly string  NavigatorContactc = "Navigator_Contact__c"; 
        public static readonly string  NetworkSearchQueryFrequency = "NetworkSearchQueryFrequency"; 
        public static readonly string  NetworkUserHistoryRecent = "NetworkUserHistoryRecent"; 
        public static readonly string  OCCatalogPagec = "OC_Catalog_Page__c"; 
        public static readonly string  OCCatalogPageDraftc = "OC_Catalog_Page_Draft__c"; 
        public static readonly string  OCCatalogRelationshipc = "OC_Catalog_Relationship__c"; 
        public static readonly string  OCDocumentc = "OC_Document__c"; 
        public static readonly string  OCDocumentAssociationc = "OC_Document_Association__c"; 
        public static readonly string  OCResourceValuesc = "OC_Resource_Values__c"; 
        public static readonly string  OCReviewCycleHistoryc = "OC_Review_Cycle_History__c"; 
        public static readonly string  OCSKUc = "OC_SKU__c"; 
        public static readonly string  OCSKUAssociationc = "OC_SKU_Association__c"; 
        public static readonly string  OCVersionHistoryc = "OC_Version_History__c"; 
        public static readonly string  OnlineHelpkav = "Online_Help__kav"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  OpportunityBidderc = "Opportunity_Bidder__c"; 
        public static readonly string  OpportunityCompetitorc = "Opportunity_Competitor__c"; 
        public static readonly string  OpportunityLocationc = "Opportunity_Location__c"; 
        public static readonly string  OpportunityParticipantc = "Opportunity_Participant__c"; 
        public static readonly string  OpportunityPlanc = "Opportunity_Plan__c"; 
        public static readonly string  OpportunityTeamc = "Opportunity_Team__c"; 
        public static readonly string  PackagedDocumentc = "Packaged_Document__c"; 
        public static readonly string  ParentBusinessc = "Parent_Business__c"; 
        public static readonly string  PartnerAssignedProfilec = "Partner_Assigned_Profile__c"; 
        public static readonly string  PartnerFundAllocation = "PartnerFundAllocation"; 
        public static readonly string  PartnerFundClaim = "PartnerFundClaim"; 
        public static readonly string  PartnerFundRequest = "PartnerFundRequest"; 
        public static readonly string  PartnerMarketingBudget = "PartnerMarketingBudget"; 
        public static readonly string  PartsCommentsc = "Parts_Comments__c"; 
        public static readonly string  PartsGuidekav = "Parts_Guide__kav"; 
        public static readonly string  PendingServiceRouting = "PendingServiceRouting"; 
        public static readonly string  PermissionGroupc = "Permission_Group__c"; 
        public static readonly string  PermissionGroupItemc = "Permission_Group_Item__c"; 
        public static readonly string  piAsyncRequestc = "pi__AsyncRequest__c"; 
        public static readonly string  piCategoryContactScorec = "pi__Category_Contact_Score__c"; 
        public static readonly string  piCategoryLeadScorec = "pi__Category_Lead_Score__c"; 
        public static readonly string  piEngageCampaignRecipientc = "pi__EngageCampaignRecipient__c"; 
        public static readonly string  piLDFilterc = "pi__LDFilter__c"; 
        public static readonly string  piObjectChangeLogc = "pi__ObjectChangeLog__c"; 
        public static readonly string  piPardotScoringCategoryc = "pi__Pardot_Scoring_Category__c"; 
        public static readonly string  piPardotTaskc = "pi__PardotTask__c"; 
        public static readonly string  PipelineReviewNotesc = "Pipeline_Review_Notes__c"; 
        public static readonly string  Policykav = "Policy__kav"; 
        public static readonly string  PolicyandFormskav = "Policy_and_Forms__kav"; 
        public static readonly string  Practicec = "Practice__c"; 
        public static readonly string  Preferencec = "Preference__c"; 
        public static readonly string  PreferenceItemc = "Preference_Item__c"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  PrintLPNc = "Print_LPN__c"; 
        public static readonly string  Productc = "Product__c"; 
        public static readonly string  ProductBulletinkav = "Product_Bulletin__kav"; 
        public static readonly string  ProductCatalogCategoryc = "Product_Catalog_Category__c"; 
        public static readonly string  ProductCatalogFamilyc = "Product_Catalog_Family__c"; 
        public static readonly string  ProductCatalogOfferingc = "Product_Catalog_Offering__c"; 
        public static readonly string  ProductDocumentc = "Product_Document__c"; 
        public static readonly string  ProductDocumentJunctionc = "Product_Document_Junction__c"; 
        public static readonly string  ProductGroupc = "Product_Group__c"; 
        public static readonly string  ProductGroupCategoriesc = "Product_Group_Categories__c"; 
        public static readonly string  ProductGroupPricingc = "Product_Group_Pricing__c"; 
        public static readonly string  ProductLinec = "Product_Line__c"; 
        public static readonly string  ProductOfferingc = "Product_Offering__c"; 
        public static readonly string  ProductOfferingSnapshotc = "Product_Offering_Snapshot__c"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  ProductsServicedc = "Products_Serviced__c"; 
        public static readonly string  Programc = "Program__c"; 
        public static readonly string  Projectc = "Project__c"; 
        public static readonly string  ProjectBidc = "Project_Bid__c"; 
        public static readonly string  ProjectBidKeyContactc = "Project_Bid_Key_Contact__c"; 
        public static readonly string  ProjectBillingc = "Project_Billing__c"; 
        public static readonly string  ProjectBudgetc = "Project_Budget__c"; 
        public static readonly string  ProjectContactc = "Project_Contact__c"; 
        public static readonly string  ProjectContactAddressc = "Project_Contact_Address__c"; 
        public static readonly string  ProjectContactRolec = "Project_Contact_Role__c"; 
        public static readonly string  ProjectInfoc = "Project_Info__c"; 
        public static readonly string  ProjectPhasec = "Project_Phase__c"; 
        public static readonly string  ProjectProfilec = "Project_Profile__c"; 
        public static readonly string  ProjectProfilePhasec = "Project_Profile_Phase__c"; 
        public static readonly string  ProjectSegmentc = "Project_Segment__c"; 
        public static readonly string  ProjectSnapshotc = "Project_Snapshot__c"; 
        public static readonly string  ProjectTeamMemberc = "Project_Team_Member__c"; 
        public static readonly string  Questionc = "Question__c"; 
        public static readonly string  QuickText = "QuickText"; 
        public static readonly string  Quote = "Quote"; 
        public static readonly string  RecordHistoryc = "Record_History__c"; 
        public static readonly string  RecordOrigin = "RecordOrigin"; 
        public static readonly string  Referencec = "Reference__c"; 
        public static readonly string  RenewalPartsGuidekav = "Renewal_Parts_Guide__kav"; 
        public static readonly string  RepairPartskav = "Repair_Parts__kav"; 
        public static readonly string  ReplacementPartsGuidekav = "Replacement_Parts_Guide__kav"; 
        public static readonly string  RequestStopStatusc = "Request_Stop_Status__c"; 
        public static readonly string  ResidentialStartupc = "Residential_Startup__c"; 
        public static readonly string  Resourcec = "Resource__c"; 
        public static readonly string  ResourceAttributec = "Resource_Attribute__c"; 
        public static readonly string  ResourceDownloadkav = "Resource_Download__kav"; 
        public static readonly string  ResourcePermissionc = "Resource_Permission__c"; 
        public static readonly string  ResourceValuec = "Resource_Value__c"; 
        public static readonly string  SalesDatac = "Sales_Data__c"; 
        public static readonly string  SalesPerformanceNotec = "Sales_Performance_Note__c"; 
        public static readonly string  SalesQuotaDetailc = "Sales_Quota_Detail__c"; 
        public static readonly string  SalesQuotaMasterc = "Sales_Quota_Master__c"; 
        public static readonly string  SalesTeamc = "Sales_Team__c"; 
        public static readonly string  Salespersonc = "Salesperson__c"; 
        public static readonly string  Scorecard = "Scorecard"; 
        public static readonly string  ScorecardMetric = "ScorecardMetric"; 
        public static readonly string  Scriptc = "Script__c"; 
        public static readonly string  SearchActivity = "SearchActivity"; 
        public static readonly string  SearchPromotionRule = "SearchPromotionRule"; 
        public static readonly string  SelNavListViewInfoc = "SelNav_List_View_Info__c"; 
        public static readonly string  ServiceBulletinkav = "Service_Bulletin__kav"; 
        public static readonly string  ServiceInformationLetterkav = "Service_Information_Letter__kav"; 
        public static readonly string  ServiceInstructionkav = "Service_Instruction__kav"; 
        public static readonly string  ServiceManualprivatekav = "Service_Manual_private__kav"; 
        public static readonly string  ServiceContract = "ServiceContract"; 
        public static readonly string  SetupAssistantAnswer = "SetupAssistantAnswer"; 
        public static readonly string  SetupAssistantProgress = "SetupAssistantProgress"; 
        public static readonly string  SharingSettingc = "Sharing_Setting__c"; 
        public static readonly string  Showcasec = "Showcase__c"; 
        public static readonly string  SisterAgencyc = "Sister_Agency__c"; 
        public static readonly string  SMEUContractChangeOrderc = "SM_EU_Contract_Change_Order__c"; 
        public static readonly string  SMEUContractCostEstimatec = "SM_EU_Contract_Cost_Estimate__c"; 
        public static readonly string  SMEUCostCodec = "SM_EU_Cost_Code__c"; 
        public static readonly string  SMEUGasTaxc = "SM_EU_Gas_Tax__c"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  SoftwareDownloadkav = "Software_Download__kav"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  Solutionc = "Solution__c"; 
        public static readonly string  Sprintc = "Sprint__c"; 
        public static readonly string  SQEntityc = "SQ_Entity__c"; 
        public static readonly string  SQProductLineItemc = "SQ_Product_Line_Item__c"; 
        public static readonly string  SQProjectc = "SQ_Project__c"; 
        public static readonly string  StartUpGuidekav = "Start_Up_Guide__kav"; 
        public static readonly string  StartupInstructionskav = "Startup_Instructions__kav"; 
        public static readonly string  Stepc = "Step__c"; 
        public static readonly string  StopStatusc = "Stop_Status__c"; 
        public static readonly string  StrategicGoalc = "Strategic_Goal__c"; 
        public static readonly string  SubStagec = "Sub_Stage__c"; 
        public static readonly string  Subcomponentc = "Subcomponent__c"; 
        public static readonly string  SupportInformationc = "Support_Information__c"; 
        public static readonly string  Surveyc = "Survey__c"; 
        public static readonly string  SVMXCActivityMasterc = "SVMXC__Activity_Master__c"; 
        public static readonly string  SVMXCActivityProductc = "SVMXC__Activity_Product__c"; 
        public static readonly string  SVMXCAllocatedStockc = "SVMXC__Allocated_Stock__c"; 
        public static readonly string  SVMXCBookingWindowc = "SVMXC__Booking_Window__c"; 
        public static readonly string  SVMXCCaseLinec = "SVMXC__Case_Line__c"; 
        public static readonly string  SVMXCCaseTrackerc = "SVMXC__Case_Tracker__c"; 
        public static readonly string  SVMXCChecklistc = "SVMXC__Checklist__c"; 
        public static readonly string  SVMXCCodeSnippetc = "SVMXC__Code_Snippet__c"; 
        public static readonly string  SVMXCCodeSnippetManifestc = "SVMXC__Code_Snippet_Manifest__c"; 
        public static readonly string  SVMXCCounterDetailsc = "SVMXC__Counter_Details__c"; 
        public static readonly string  SVMXCCounterRollupc = "SVMXC__Counter_Rollup__c"; 
        public static readonly string  SVMXCCustomCoveragec = "SVMXC__Custom_Coverage__c"; 
        public static readonly string  SVMXCDependencyManagementc = "SVMXC__Dependency_Management__c"; 
        public static readonly string  SVMXCDispatcherAccessc = "SVMXC__Dispatcher_Access__c"; 
        public static readonly string  SVMXCDocTemplatec = "SVMXC__Doc_Template__c"; 
        public static readonly string  SVMXCDocTemplateDetailsc = "SVMXC__Doc_Template_Details__c"; 
        public static readonly string  SVMXCDownTimec = "SVMXC__Down_Time__c"; 
        public static readonly string  SVMXCEntitlementHistoryc = "SVMXC__Entitlement_History__c"; 
        public static readonly string  SVMXCExpensePricingc = "SVMXC__Expense_Pricing__c"; 
        public static readonly string  SVMXCFieldCachec = "SVMXC__Field_Cache__c"; 
        public static readonly string  SVMXCFunctionDefinitionc = "SVMXC__Function_Definition__c"; 
        public static readonly string  SVMXCInstalledProductc = "SVMXC__Installed_Product__c"; 
        public static readonly string  SVMXCIOTConfigurationc = "SVMXC__IOTConfiguration__c"; 
        public static readonly string  SVMXCLaborPricingc = "SVMXC__Labor_Pricing__c"; 
        public static readonly string  SVMXCMileageTiersc = "SVMXC__Mileage_Tiers__c"; 
        public static readonly string  SVMXCObjectCachec = "SVMXC__Object_Cache__c"; 
        public static readonly string  SVMXCOfflineDatasetExpressionc = "SVMXC__Offline_Dataset_Expression__c"; 
        public static readonly string  SVMXCOfflineLogc = "SVMXC__Offline_Log__c"; 
        public static readonly string  SVMXCOfflineObjectc = "SVMXC__Offline_Object__c"; 
        public static readonly string  SVMXCOfflineViewc = "SVMXC__Offline_View__c"; 
        public static readonly string  SVMXCPageLayoutc = "SVMXC__Page_Layout__c"; 
        public static readonly string  SVMXCPageLayoutDetailc = "SVMXC__Page_Layout_Detail__c"; 
        public static readonly string  SVMXCPartsDiscountc = "SVMXC__Parts_Discount__c"; 
        public static readonly string  SVMXCPartsPricingc = "SVMXC__Parts_Pricing__c"; 
        public static readonly string  SVMXCPartsRequestc = "SVMXC__Parts_Request__c"; 
        public static readonly string  SVMXCPartsRequestLinec = "SVMXC__Parts_Request_Line__c"; 
        public static readonly string  SVMXCPicklistCachec = "SVMXC__Picklist_Cache__c"; 
        public static readonly string  SVMXCPMApplicableProductc = "SVMXC__PM_Applicable_Product__c"; 
        public static readonly string  SVMXCPMCoveragec = "SVMXC__PM_Coverage__c"; 
        public static readonly string  SVMXCPMHistoryc = "SVMXC__PM_History__c"; 
        public static readonly string  SVMXCPMOfferingc = "SVMXC__PM_Offering__c"; 
        public static readonly string  SVMXCPMPlanc = "SVMXC__PM_Plan__c"; 
        public static readonly string  SVMXCPMPlanTemplatec = "SVMXC__PM_Plan_Template__c"; 
        public static readonly string  SVMXCPMSchedulec = "SVMXC__PM_Schedule__c"; 
        public static readonly string  SVMXCPMScheduleDefinitionc = "SVMXC__PM_Schedule_Definition__c"; 
        public static readonly string  SVMXCPMScheduleTemplatec = "SVMXC__PM_Schedule_Template__c"; 
        public static readonly string  SVMXCPricingRulec = "SVMXC__Pricing_Rule__c"; 
        public static readonly string  SVMXCProductReplacementc = "SVMXC__Product_Replacement__c"; 
        public static readonly string  SVMXCProductSerialc = "SVMXC__Product_Serial__c"; 
        public static readonly string  SVMXCProductStockc = "SVMXC__Product_Stock__c"; 
        public static readonly string  SVMXCProductConfigurationc = "SVMXC__ProductConfiguration__c"; 
        public static readonly string  SVMXCProductIQProfilec = "SVMXC__ProductIQProfile__c"; 
        public static readonly string  SVMXCProductIQTemplatec = "SVMXC__ProductIQTemplate__c"; 
        public static readonly string  SVMXCProformaInvoicec = "SVMXC__Proforma_Invoice__c"; 
        public static readonly string  SVMXCProformaInvoiceDetailc = "SVMXC__Proforma_Invoice_Detail__c"; 
        public static readonly string  SVMXCProformaInvoiceLinec = "SVMXC__Proforma_Invoice_Line__c"; 
        public static readonly string  SVMXCQBResponseOptionsc = "SVMXC__QB_Response_Options__c"; 
        public static readonly string  SVMXCQBResponseSetc = "SVMXC__QB_Response_Set__c"; 
        public static readonly string  SVMXCQuestionBankc = "SVMXC__Question_Bank__c"; 
        public static readonly string  SVMXCQuotec = "SVMXC__Quote__c"; 
        public static readonly string  SVMXCQuoteLinec = "SVMXC__Quote_Line__c"; 
        public static readonly string  SVMXCRequiredPartc = "SVMXC__Required_Part__c"; 
        public static readonly string  SVMXCResourcePreferencec = "SVMXC__Resource_Preference__c"; 
        public static readonly string  SVMXCRMAShipmentLinec = "SVMXC__RMA_Shipment_Line__c"; 
        public static readonly string  SVMXCRMAShipmentOrderc = "SVMXC__RMA_Shipment_Order__c"; 
        public static readonly string  SVMXCRouteCardc = "SVMXC__Route_Card__c"; 
        public static readonly string  SVMXCRouteStopc = "SVMXC__Route_Stop__c"; 
        public static readonly string  SVMXCServicec = "SVMXC__Service__c"; 
        public static readonly string  SVMXCServiceContractc = "SVMXC__Service_Contract__c"; 
        public static readonly string  SVMXCServiceContractContactsc = "SVMXC__Service_Contract_Contacts__c"; 
        public static readonly string  SVMXCServiceContractProductsc = "SVMXC__Service_Contract_Products__c"; 
        public static readonly string  SVMXCServiceContractServicesc = "SVMXC__Service_Contract_Services__c"; 
        public static readonly string  SVMXCServiceContractSitesc = "SVMXC__Service_Contract_Sites__c"; 
        public static readonly string  SVMXCServiceGroupc = "SVMXC__Service_Group__c"; 
        public static readonly string  SVMXCServiceGroupCostsc = "SVMXC__Service_Group_Costs__c"; 
        public static readonly string  SVMXCServiceGroupMembersc = "SVMXC__Service_Group_Members__c"; 
        public static readonly string  SVMXCServiceGroupProductc = "SVMXC__Service_Group_Product__c"; 
        public static readonly string  SVMXCServiceGroupSitec = "SVMXC__Service_Group_Site__c"; 
        public static readonly string  SVMXCServiceGroupSkillsc = "SVMXC__Service_Group_Skills__c"; 
        public static readonly string  SVMXCServiceLevelc = "SVMXC__Service_Level__c"; 
        public static readonly string  SVMXCServiceOfferingsc = "SVMXC__Service_Offerings__c"; 
        public static readonly string  SVMXCServiceOrderc = "SVMXC__Service_Order__c"; 
        public static readonly string  SVMXCServiceOrderDependencyc = "SVMXC__Service_Order_Dependency__c"; 
        public static readonly string  SVMXCServiceOrderLinec = "SVMXC__Service_Order_Line__c"; 
        public static readonly string  SVMXCServicePlanc = "SVMXC__Service_Plan__c"; 
        public static readonly string  SVMXCServicePricebookc = "SVMXC__Service_Pricebook__c"; 
        public static readonly string  SVMXCServicePricebookEntryc = "SVMXC__Service_Pricebook_Entry__c"; 
        public static readonly string  SVMXCServiceRequestc = "SVMXC__Service_Request__c"; 
        public static readonly string  SVMXCServiceTemplatec = "SVMXC__Service_Template__c"; 
        public static readonly string  SVMXCServiceTemplateProductsc = "SVMXC__Service_Template_Products__c"; 
        public static readonly string  SVMXCServiceZonec = "SVMXC__Service_Zone__c"; 
        public static readonly string  SVMXCServiceMaxConfigDatac = "SVMXC__ServiceMax_Config_Data__c"; 
        public static readonly string  SVMXCServiceMaxListc = "SVMXC__ServiceMax_List__c"; 
        public static readonly string  SVMXCServiceMaxProcessesc = "SVMXC__ServiceMax_Processes__c"; 
        public static readonly string  SVMXCServiceMaxSettingsc = "SVMXC__ServiceMax_Settings__c"; 
        public static readonly string  SVMXCServiceMaxTagsc = "SVMXC__ServiceMax_Tags__c"; 
        public static readonly string  SVMXCSFMEventc = "SVMXC__SFM_Event__c"; 
        public static readonly string  SVMXCSitec = "SVMXC__Site__c"; 
        public static readonly string  SVMXCSkillc = "SVMXC__Skill__c"; 
        public static readonly string  SVMXCSLADetailc = "SVMXC__SLA_Detail__c"; 
        public static readonly string  SVMXCSMAppointmentWindowc = "SVMXC__SM_Appointment_Window__c"; 
        public static readonly string  SVMXCSMAttributesTemplatec = "SVMXC__SM_Attributes_Template__c"; 
        public static readonly string  SVMXCSMChecklistResultc = "SVMXC__SM_Checklist_Result__c"; 
        public static readonly string  SVMXCSMIBAttributesHistoryc = "SVMXC__SM_IB_Attributes_History__c"; 
        public static readonly string  SVMXCSMIBAttributesTemplateInstancec = "SVMXC__SM_IB_Attributes_Template_Instance__c"; 
        public static readonly string  SVMXCSMIBTechnicalAttributesc = "SVMXC__SM_IB_Technical_Attributes__c"; 
        public static readonly string  SVMXCSMIOTEventc = "SVMXC__SM_IOT_Event__c"; 
        public static readonly string  SVMXCSMOvernightStayPolicyc = "SVMXC__SM_Overnight_Stay_Policy__c"; 
        public static readonly string  SVMXCSMProductAttributesc = "SVMXC__SM_Product_Attributes__c"; 
        public static readonly string  SVMXCSMRequestCachec = "SVMXC__SM_Request_Cache__c"; 
        public static readonly string  SVMXCSMSchedulingEventSummaryc = "SVMXC__SM_Scheduling_Event_Summary__c"; 
        public static readonly string  SVMXCSMSchedulingJobSummaryc = "SVMXC__SM_Scheduling_Job_Summary__c"; 
        public static readonly string  SVMXCSMSchedulingViolationc = "SVMXC__SM_Scheduling_Violation__c"; 
        public static readonly string  SVMXCSMSNSDetailc = "SVMXC__SM_SNS_Detail__c"; 
        public static readonly string  SVMXCSMTAPicklistDefinitionc = "SVMXC__SM_TA_Picklist_Definition__c"; 
        public static readonly string  SVMXCSMTagDefinitionc = "SVMXC__SM_Tag_Definition__c"; 
        public static readonly string  SVMXCSMTagElementc = "SVMXC__SM_Tag_Element__c"; 
        public static readonly string  SVMXCSMUserPreferencesc = "SVMXC__SM_User_Preferences__c"; 
        public static readonly string  SVMXCSPMAccountSummaryc = "SVMXC__SPM_Account_Summary__c"; 
        public static readonly string  SVMXCSPMAverageResponseTimec = "SVMXC__SPM_Average_Response_Time__c"; 
        public static readonly string  SVMXCSPMContractPenetrationc = "SVMXC__SPM_Contract_Penetration__c"; 
        public static readonly string  SVMXCSPMContractUpTimec = "SVMXC__SPM_Contract_Up_Time__c"; 
        public static readonly string  SVMXCSPMDownTimeDetailc = "SVMXC__SPM_Down_Time_Detail__c"; 
        public static readonly string  SVMXCSPMFirstTimeFixc = "SVMXC__SPM_First_Time_Fix__c"; 
        public static readonly string  SVMXCSPMMeanTimeToCompletec = "SVMXC__SPM_Mean_Time_To_Complete__c"; 
        public static readonly string  SVMXCSPMMeanTimeToRepairc = "SVMXC__SPM_Mean_Time_To_Repair__c"; 
        public static readonly string  SVMXCSPMRepeatVisitc = "SVMXC__SPM_Repeat_Visit__c"; 
        public static readonly string  SVMXCSPMSchedulTechUtilizationConstraintsc = "SVMXC__SPM_Schedul_Tech_Utilization_Constraints__c"; 
        public static readonly string  SVMXCSPMSchedulingTechnicianUtilizationc = "SVMXC__SPM_Scheduling_Technician_Utilization__c"; 
        public static readonly string  SVMXCSPMTopLevelSummaryc = "SVMXC__SPM_Top_Level_Summary__c"; 
        public static readonly string  SVMXCSPMUtilizationc = "SVMXC__SPM_Utilization__c"; 
        public static readonly string  SVMXCStockAdjustmentc = "SVMXC__Stock_Adjustment__c"; 
        public static readonly string  SVMXCStockHistoryc = "SVMXC__Stock_History__c"; 
        public static readonly string  SVMXCStockTransferc = "SVMXC__Stock_Transfer__c"; 
        public static readonly string  SVMXCStockTransferLinec = "SVMXC__Stock_Transfer_Line__c"; 
        public static readonly string  SVMXCSubLocationc = "SVMXC__Sub_Location__c"; 
        public static readonly string  SVMXCSVMXEventc = "SVMXC__SVMX_Event__c"; 
        public static readonly string  SVMXCSVMXJobLogsc = "SVMXC__SVMX_Job_Logs__c"; 
        public static readonly string  SVMXCSVMXJobStatsc = "SVMXC__SVMX_Job_Stats__c"; 
        public static readonly string  SVMXCSVMXJobsc = "SVMXC__SVMX_Jobs__c"; 
        public static readonly string  SVMXCSVMXOptimizerc = "SVMXC__SVMX_Optimizer__c"; 
        public static readonly string  SVMXCSyncRequestc = "SVMXC__Sync_Request__c"; 
        public static readonly string  SVMXCSyncRequestRecordsc = "SVMXC__Sync_Request_Records__c"; 
        public static readonly string  SVMXCTaskTemplatec = "SVMXC__Task_Template__c"; 
        public static readonly string  SVMXCTerritoryc = "SVMXC__Territory__c"; 
        public static readonly string  SVMXCTerritoryCoveragec = "SVMXC__Territory_Coverage__c"; 
        public static readonly string  SVMXCTimeTrackerc = "SVMXC__Time_Tracker__c"; 
        public static readonly string  SVMXCTimesheetc = "SVMXC__Timesheet__c"; 
        public static readonly string  SVMXCTimesheetDayEntryc = "SVMXC__Timesheet_Day_Entry__c"; 
        public static readonly string  SVMXCTimesheetEntryc = "SVMXC__Timesheet_Entry__c"; 
        public static readonly string  SVMXCTravelPolicyc = "SVMXC__Travel_Policy__c"; 
        public static readonly string  SVMXCUserGPSLogc = "SVMXC__User_GPS_Log__c"; 
        public static readonly string  SVMXCWarrantyc = "SVMXC__Warranty__c"; 
        public static readonly string  SVMXCWorkOrderResourcec = "SVMXC__Work_Order_Resource__c"; 
        public static readonly string  SVMXCZonePricingc = "SVMXC__Zone_Pricing__c"; 
        public static readonly string  SyncTransactionLog = "SyncTransactionLog"; 
        public static readonly string  TASAnswerc = "TAS_Answer__c"; 
        public static readonly string  TASQuestionc = "TAS_Question__c"; 
        public static readonly string  TASResultc = "TAS_Result__c"; 
        public static readonly string  TASVersionc = "TAS_Version__c"; 
        public static readonly string  Task = "Task"; 
        public static readonly string  Taskc = "Task__c"; 
        public static readonly string  TechnicalBulletinkav = "Technical_Bulletin__kav"; 
        public static readonly string  TechnicalDataDocumentkav = "Technical_Data_Document__kav"; 
        public static readonly string  TemplateDocumentc = "Template_Document__c"; 
        public static readonly string  TerritorGroupc = "TerritorGroup__c"; 
        public static readonly string  Territoryc = "Territory__c"; 
        public static readonly string  Testc = "Test__c"; 
        public static readonly string  TestScenarioc = "Test_Scenario__c"; 
        public static readonly string  TextBlogContentkav = "Text_Blog_Content__kav"; 
        public static readonly string  Ticketc = "Ticket__c"; 
        public static readonly string  TimeSheetnExpensec = "TimeSheet_n_Expense__c"; 
        public static readonly string  TKMArticleFeedbackc = "TKM_Article_Feedback__c"; 
        public static readonly string  TrackerReleasesc = "Tracker_Releases__c"; 
        public static readonly string  TradingPartnerSegmentc = "Trading_Partner_Segment__c"; 
        public static readonly string  TrainingMaterialkav = "Training_Material__kav"; 
        public static readonly string  TranslationResourcec = "Translation_Resource__c"; 
        public static readonly string  TranslationValuec = "Translation_Value__c"; 
        public static readonly string  TroubleshootingGuidekav = "Troubleshooting_Guide__kav"; 
        public static readonly string  twodAccountRatesDetailsc = "twod__Account_Rates_Details__c"; 
        public static readonly string  twodBillOfMaterialc = "twod__Bill_Of_Material__c"; 
        public static readonly string  twodCampaignMembersc = "twod__Campaign_Members__c"; 
        public static readonly string  twodClaimc = "twod__Claim__c"; 
        public static readonly string  twodClaimFinancialc = "twod__Claim_Financial__c"; 
        public static readonly string  twodClaimInventoryc = "twod__Claim_Inventory__c"; 
        public static readonly string  twodClaimPartc = "twod__Claim_Part__c"; 
        public static readonly string  twodClaimServiceInformationc = "twod__Claim_Service_Information__c"; 
        public static readonly string  twodClaimShipmentc = "twod__Claim_Shipment__c"; 
        public static readonly string  twodCountryc = "twod__Country__c"; 
        public static readonly string  twodFaultCodeMapperc = "twod__FaultCode_Mapper__c"; 
        public static readonly string  twodGroupc = "twod__Group__c"; 
        public static readonly string  twodGroupMemberc = "twod__Group_Member__c"; 
        public static readonly string  twodInventoryc = "twod__Inventory__c"; 
        public static readonly string  twodInventoryTransactionHistoryc = "twod__Inventory_Transaction_History__c"; 
        public static readonly string  twodMajorComponentc = "twod__Major_Component__c"; 
        public static readonly string  twodPackagingDemoObjectc = "twod__PackagingDemoObject__c"; 
        public static readonly string  twodPartReturnConfigurationc = "twod__Part_Return_Configuration__c"; 
        public static readonly string  twodPaymentConfigurationc = "twod__Payment_Configuration__c"; 
        public static readonly string  twodPaymentDefinitionItemsc = "twod__Payment_Definition_Items__c"; 
        public static readonly string  twodPaymentDefinitionsc = "twod__Payment_Definitions__c"; 
        public static readonly string  twodPaymentModifiersc = "twod__Payment_Modifiers__c"; 
        public static readonly string  twodPolicyApplicabilityTermc = "twod__Policy_Applicability_Term__c"; 
        public static readonly string  twodPolicyDefinitionc = "twod__Policy_Definition__c"; 
        public static readonly string  twodPolicyDefinitionInventoryUsagec = "twod__Policy_Definition_Inventory_Usage__c"; 
        public static readonly string  twodPolicyPaymentDefinitionsc = "twod__Policy_Payment_Definitions__c"; 
        public static readonly string  twodRatesDetailsc = "twod__Rates_Details__c"; 
        public static readonly string  twodRatesPerCurrencyc = "twod__Rates_Per_Currency__c"; 
        public static readonly string  twodRecoveryClaimServiceInformationc = "twod__Recovery_Claim_Service_Information__c"; 
        public static readonly string  twodRecoveryClaimShipmentc = "twod__Recovery_Claim_Shipment__c"; 
        public static readonly string  twodRemovedClaimPartc = "twod__Removed_Claim_Part__c"; 
        public static readonly string  twodServiceCampaignc = "twod__Service_Campaign__c"; 
        public static readonly string  twodShipmentDetailc = "twod__Shipment_Detail__c"; 
        public static readonly string  twodSupplierContractc = "twod__Supplier_Contract__c"; 
        public static readonly string  twodSupplierContractItemc = "twod__Supplier_Contract_Item__c"; 
        public static readonly string  twodSupplierProductc = "twod__Supplier_Product__c"; 
        public static readonly string  twodSupplierRecoveryClaimc = "twod__Supplier_Recovery_Claim__c"; 
        public static readonly string  twodSupplyRecoveryClaimLineItemsc = "twod__Supply_Recovery_Claim_Line_Items__c"; 
        public static readonly string  twodTransactionMemoHistoryc = "twod__Transaction_Memo_History__c"; 
        public static readonly string  twodTrendingObjectc = "twod__Trending_Object__c"; 
        public static readonly string  twodWarehousec = "twod__Warehouse__c"; 
        public static readonly string  twodWarrantyCodec = "twod__Warranty_Code__c"; 
        public static readonly string  twodWarrantyCoveragesc = "twod__Warranty_Coverages__c"; 
        public static readonly string  twodWarrantyGroupc = "twod__Warranty_Group__c"; 
        public static readonly string  twodWarrantyProductc = "twod__Warranty_Product__c"; 
        public static readonly string  twodWarrantyProductPricebookc = "twod__Warranty_Product_Pricebook__c"; 
        public static readonly string  twodWarrantyRegistrationc = "twod__Warranty_Registration__c"; 
        public static readonly string  twodWarrantyRulec = "twod__Warranty_Rule__c"; 
        public static readonly string  twodWarrantyRuleAssociationc = "twod__Warranty_Rule_Association__c"; 
        public static readonly string  twodWarrantyRuleCriteriac = "twod__Warranty_Rule_Criteria__c"; 
        public static readonly string  TWoDAppliedPolicyc = "TWoD_Applied_Policy__c"; 
        public static readonly string  twodBusinessUnitc = "twod_Business_Unit__c"; 
        public static readonly string  twodDealerTrainingc = "twod_Dealer_Training__c"; 
        public static readonly string  TWoDExceptionLogc = "TWoD_Exception_Log__c"; 
        public static readonly string  TWoDFinancialLineItemc = "TWoD_Financial_Line_Item__c"; 
        public static readonly string  TWoDGlobalRatec = "TWoD_Global_Rate__c"; 
        public static readonly string  TWoDOtherCostc = "TWoD_Other_Cost__c"; 
        public static readonly string  TWoDServiceInquiryc = "TWoD_Service_Inquiry__c"; 
        public static readonly string  TWoDTransactionMemoLineItemc = "TWoD_Transaction_Memo_Line_Item__c"; 
        public static readonly string  TWoDVRFMajorComponentc = "TWoD_VRF_Major_Component__c"; 
        public static readonly string  TWoDVRFUnitsc = "TWoD_VRF_Units__c"; 
        public static readonly string  UnitofMeasureSetc = "Unit_of_Measure_Set__c"; 
        public static readonly string  UserDefinedProductc = "User_Defined_Product__c"; 
        public static readonly string  UserDefinedProductGroupc = "User_Defined_Product_Group__c"; 
        public static readonly string  UsersGuidekav = "User_s_Guide__kav"; 
        public static readonly string  UserStoryc = "User_Story__c"; 
        public static readonly string  UserStoryTestCasec = "User_Story_Test_Case__c"; 
        public static readonly string  UserSummaryc = "User_Summary__c"; 
        public static readonly string  UserMetrics = "UserMetrics"; 
        public static readonly string  UserServicePresence = "UserServicePresence"; 
        public static readonly string  USTFilec = "UST_File__c"; 
        public static readonly string  vcardNotec = "vcard__Note__c"; 
        public static readonly string  VRFChangeOverBoxc = "VRF_Change_Over_Box__c"; 
        public static readonly string  VRFIndoorUnitc = "VRF_Indoor_Unit__c"; 
        public static readonly string  VRFStartupc = "VRF_Startup__c"; 
        public static readonly string  VSDServiceManualkav = "VSD_Service_Manual__kav"; 
        public static readonly string  WalkerInfoWalkerConfigurationc = "Walker_Info__Walker_Configuration__c"; 
        public static readonly string  WalkerInfoWalkerContactDatac = "Walker_Info__Walker_Contact_Data__c"; 
        public static readonly string  WalkerInfoWalkerContactJobStatusc = "Walker_Info__Walker_Contact_Job_Status__c"; 
        public static readonly string  WalkerInfoWalkerContactRefreshc = "Walker_Info__Walker_Contact_Refresh__c"; 
        public static readonly string  WalkerInfoWalkerDashboardLinkc = "Walker_Info__Walker_Dashboard_Link__c"; 
        public static readonly string  WalkerInfoWalkerFollowUpStatusc = "Walker_Info__Walker_Follow_Up_Status__c"; 
        public static readonly string  WalkerInfoWalkerLanguagec = "Walker_Info__Walker_Language__c"; 
        public static readonly string  WalkerInfoWalkerMailTypec = "Walker_Info__Walker_Mail_Type__c"; 
        public static readonly string  WalkerInfoWalkerNotifyc = "Walker_Info__Walker_Notify__c"; 
        public static readonly string  WalkerInfoWalkerPageStatec = "Walker_Info__Walker_Page_State__c"; 
        public static readonly string  WalkerInfoWalkerSurveyJobc = "Walker_Info__Walker_Survey_Job__c"; 
        public static readonly string  WalkerInfoWalkerSurveyJobDispositionc = "Walker_Info__Walker_Survey_Job_Disposition__c"; 
        public static readonly string  WalkerInfoWalkerSurveyMailContactJobStatusc = "Walker_Info__Walker_Survey_Mail_Contact_Job_Status__c"; 
        public static readonly string  WalkerInfoWalkerSurveyMailDispositionc = "Walker_Info__Walker_Survey_Mail_Disposition__c"; 
        public static readonly string  WalkerInfoWalkerTextc = "Walker_Info__Walker_Text__c"; 
        public static readonly string  Warrantykav = "Warranty__kav"; 
        public static readonly string  WebToCaseUtilityObjectc = "Web_To_Case_Utility_Object__c"; 
        public static readonly string  WiringDiagramkav = "Wiring_Diagram__kav"; 
        public static readonly string  WorkSiteContactc = "Work_Site_Contact__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickRecordTypeSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickRecordTypeSobjectType(string s)
        {
            return new PickRecordTypeSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickRecordTypeSobjectType Parse(string text) => text;

        

    }
    public class PickReportFormatConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickReportFormat)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickReportFormat {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickReportFormatConverter))]
    public class PickReportFormat
    {
        public static readonly string  MultiBlock = "MultiBlock"; 
        public static readonly string  Matrix = "Matrix"; 
        public static readonly string  Summary = "Summary"; 
        public static readonly string  Tabular = "Tabular"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickReportFormat o)
        {
            return o.Value;
        }

        public static implicit operator PickReportFormat(string s)
        {
            return new PickReportFormat {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickReportFormat Parse(string text) => text;

        

    }
    public class PickSellingEntityRoleMapCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSellingEntityRoleMapCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSellingEntityRoleMapCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSellingEntityRoleMapCurrencyIsoCodeConverter))]
    public class PickSellingEntityRoleMapCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSellingEntityRoleMapCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickSellingEntityRoleMapCurrencyIsoCode(string s)
        {
            return new PickSellingEntityRoleMapCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSellingEntityRoleMapCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickStrategicGoalHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStrategicGoalHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStrategicGoalHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStrategicGoalHistoryFieldConverter))]
    public class PickStrategicGoalHistoryField
    {
        public static readonly string  Acctc = "Acct__c"; 
        public static readonly string  CompletedDtc = "Completed_Dt__c"; 
        public static readonly string  Costc = "Cost__c"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrencyIsoCode = "CurrencyIsoCode"; 
        public static readonly string  CustGoal2c = "Cust_Goal2__c"; 
        public static readonly string  CustGoalc = "Cust_Goal__c"; 
        public static readonly string  CXExperienceAreac = "CX_Experience_Area__c"; 
        public static readonly string  CXAttributec = "CX_Attribute__c"; 
        public static readonly string  EstimatedGoalDurationc = "Estimated_Goal_Duration__c"; 
        public static readonly string  ExpectedFinOutc = "Expected_Fin_Out__c"; 
        public static readonly string  ExternalIdc = "External_Id__c"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FinProgc = "Fin_Prog__c"; 
        public static readonly string  GoalTypec = "Goal_Type__c"; 
        public static readonly string  JCIBrandc = "JCI_Brand__c"; 
        public static readonly string  JCIRequirementsc = "JCI_Requirements__c"; 
        public static readonly string  Marketc = "Market__c"; 
        public static readonly string  MassAssignBatchc = "Mass_Assign_Batch__c"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  GoalNotec = "Goal_Note__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Programc = "Program__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  RecordType = "RecordType"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  StartDtc = "Start_Dt__c"; 
        public static readonly string  GoalStatusc = "Goal_Status__c"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStrategicGoalHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickStrategicGoalHistoryField(string s)
        {
            return new PickStrategicGoalHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStrategicGoalHistoryField Parse(string text) => text;

        

    }
    public class PickStrategicGoalCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStrategicGoalCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStrategicGoalCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStrategicGoalCurrencyIsoCodeConverter))]
    public class PickStrategicGoalCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStrategicGoalCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickStrategicGoalCurrencyIsoCode(string s)
        {
            return new PickStrategicGoalCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStrategicGoalCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickStrategicGoalGoalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStrategicGoalGoalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStrategicGoalGoalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStrategicGoalGoalStatusConverter))]
    public class PickStrategicGoalGoalStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Complete = "Complete"; 
        public static readonly string  Cancelled = "Cancelled"; 
        public static readonly string  Abandoned = "Abandoned"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStrategicGoalGoalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickStrategicGoalGoalStatus(string s)
        {
            return new PickStrategicGoalGoalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStrategicGoalGoalStatus Parse(string text) => text;

        

    }
    public class PickStrategicGoalGoalTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStrategicGoalGoalType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStrategicGoalGoalType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStrategicGoalGoalTypeConverter))]
    public class PickStrategicGoalGoalType
    {
        public static readonly string  AddaLine = "Add a Line"; 
        public static readonly string  ExpandaLine = "Expand a Line"; 
        public static readonly string  FlipaLine = "Flip a Line"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStrategicGoalGoalType o)
        {
            return o.Value;
        }

        public static implicit operator PickStrategicGoalGoalType(string s)
        {
            return new PickStrategicGoalGoalType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStrategicGoalGoalType Parse(string text) => text;

        

    }
    public class PickStrategicGoalEstimatedGoalDurationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStrategicGoalEstimatedGoalDuration)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStrategicGoalEstimatedGoalDuration {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStrategicGoalEstimatedGoalDurationConverter))]
    public class PickStrategicGoalEstimatedGoalDuration
    {
        public static readonly string _30 = "30"; 
        public static readonly string _60 = "60"; 
        public static readonly string _90 = "90"; 
        //public static readonly string _90 = "90+";
    
        public string Value { get; set; }

        public static implicit operator string(PickStrategicGoalEstimatedGoalDuration o)
        {
            return o.Value;
        }

        public static implicit operator PickStrategicGoalEstimatedGoalDuration(string s)
        {
            return new PickStrategicGoalEstimatedGoalDuration {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStrategicGoalEstimatedGoalDuration Parse(string text) => text;

        

    }
    public class PickTaskStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskStatusConverter))]
    public class PickTaskStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Deferred = "Deferred"; 
        public static readonly string  Waitingonsomeoneelse = "Waiting on someone else"; 
        public static readonly string  Abandoned = "Abandoned"; 
        public static readonly string  Open = "Open"; 
        public static readonly string  Closed = "Closed"; 
        public static readonly string  Overridden = "Overridden"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskStatus(string s)
        {
            return new PickTaskStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskStatus Parse(string text) => text;

        

    }
    public class PickTaskPriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskPriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskPriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskPriorityConverter))]
    public class PickTaskPriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Normal = "Normal"; 
        public static readonly string  Low = "Low"; 
        public static readonly string  Medium = "Medium"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskPriority o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskPriority(string s)
        {
            return new PickTaskPriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskPriority Parse(string text) => text;

        

    }
    public class PickTaskCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskCurrencyIsoCodeConverter))]
    public class PickTaskCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskCurrencyIsoCode(string s)
        {
            return new PickTaskCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickTaskTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskTypeConverter))]
    public class PickTaskType
    {
        public static readonly string  Call = "Call"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Estimate = "Estimate"; 
        public static readonly string  Meeting = "Meeting"; 
        public static readonly string  Other = "Other"; 
        public static readonly string  Visittocustomer = "Visit to customer"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskType(string s)
        {
            return new PickTaskType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskType Parse(string text) => text;

        

    }
    public class PickTaskCallTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskCallType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskCallType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskCallTypeConverter))]
    public class PickTaskCallType
    {
        public static readonly string  Internal = "Internal"; 
        public static readonly string  Inbound = "Inbound"; 
        public static readonly string  Outbound = "Outbound"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskCallType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskCallType(string s)
        {
            return new PickTaskCallType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskCallType Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceTimeZoneSidKeyConverter))]
    public class PickTaskRecurrenceTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceTimeZoneSidKey(string s)
        {
            return new PickTaskRecurrenceTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceTypeConverter))]
    public class PickTaskRecurrenceType
    {
        public static readonly string  RecursDaily = "RecursDaily"; 
        public static readonly string  RecursEveryWeekday = "RecursEveryWeekday"; 
        public static readonly string  RecursMonthly = "RecursMonthly"; 
        public static readonly string  RecursMonthlyNth = "RecursMonthlyNth"; 
        public static readonly string  RecursWeekly = "RecursWeekly"; 
        public static readonly string  RecursYearly = "RecursYearly"; 
        public static readonly string  RecursYearlyNth = "RecursYearlyNth"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceType(string s)
        {
            return new PickTaskRecurrenceType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceType Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceInstanceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceInstance)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceInstance {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceInstanceConverter))]
    public class PickTaskRecurrenceInstance
    {
        public static readonly string  First = "First"; 
        public static readonly string  Second = "Second"; 
        public static readonly string  Third = "Third"; 
        public static readonly string  Fourth = "Fourth"; 
        public static readonly string  Last = "Last"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceInstance o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceInstance(string s)
        {
            return new PickTaskRecurrenceInstance {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceInstance Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceMonthOfYearConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceMonthOfYear)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceMonthOfYear {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceMonthOfYearConverter))]
    public class PickTaskRecurrenceMonthOfYear
    {
        public static readonly string  January = "January"; 
        public static readonly string  February = "February"; 
        public static readonly string  March = "March"; 
        public static readonly string  April = "April"; 
        public static readonly string  May = "May"; 
        public static readonly string  June = "June"; 
        public static readonly string  July = "July"; 
        public static readonly string  August = "August"; 
        public static readonly string  September = "September"; 
        public static readonly string  October = "October"; 
        public static readonly string  November = "November"; 
        public static readonly string  December = "December"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceMonthOfYear o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceMonthOfYear(string s)
        {
            return new PickTaskRecurrenceMonthOfYear {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceMonthOfYear Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceRegeneratedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceRegeneratedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceRegeneratedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceRegeneratedTypeConverter))]
    public class PickTaskRecurrenceRegeneratedType
    {
        public static readonly string  RecurrenceRegenerateAfterDueDate = "RecurrenceRegenerateAfterDueDate"; 
        public static readonly string  RecurrenceRegenerateAfterToday = "RecurrenceRegenerateAfterToday"; 
        public static readonly string  RecurrenceRegenerated = "RecurrenceRegenerated"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceRegeneratedType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceRegeneratedType(string s)
        {
            return new PickTaskRecurrenceRegeneratedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceRegeneratedType Parse(string text) => text;

        

    }
    public class PickTaskEventStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskEventStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskEventStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskEventStatusConverter))]
    public class PickTaskEventStatus
    {
        public static readonly string  Scheduled = "Scheduled"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Planned = "Planned"; 
        public static readonly string  Confirmed = "Confirmed"; 
        public static readonly string  Closed = "Closed"; 
        public static readonly string  Cancelled = "Cancelled"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskEventStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskEventStatus(string s)
        {
            return new PickTaskEventStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskEventStatus Parse(string text) => text;

        

    }
    public class PickTaskJCIActivitySubTypesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskJCIActivitySubTypes)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskJCIActivitySubTypes {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskJCIActivitySubTypesConverter))]
    public class PickTaskJCIActivitySubTypes
    {
        public static readonly string  SalesCall = "Sales Call"; 
        public static readonly string  ShowcaseIdeationSession = "Showcase/Ideation Session"; 
        public static readonly string  FactoryTour = "Factory Tour"; 
        public static readonly string  CustomerSiteVisit = "Customer Site Visit"; 
        public static readonly string  CustomerEntertainment = "Customer Entertainment"; 
        public static readonly string  Tradeshow = "Tradeshow"; 
        public static readonly string  RelationshipBuilding = "Relationship Building"; 
        public static readonly string  JointProspectingCall = "Joint Prospecting Call"; 
        public static readonly string  BidProposal = "Bid/Proposal"; 
        public static readonly string  LunchnLearnPresentation = "Lunch 'n Learn/ Presentation"; 
        public static readonly string  QBR = "QBR"; 
        public static readonly string  TASReview = "TAS Review"; 
        public static readonly string  STAR = "STAR"; 
        public static readonly string  AccountTeamMeeting = "Account Team Meeting"; 
        public static readonly string  BranchMeeting = "Branch Meeting"; 
        public static readonly string  OneonOne = "One on One"; 
        public static readonly string  CoachingSession = "Coaching Session"; 
        public static readonly string  ManagementReviewCall = "Management Review Call"; 
        public static readonly string  AccountPlan = "Account Plan"; 
        public static readonly string  StrategicDealTeamReviewed = "Strategic Deal Team- Reviewed"; 
        public static readonly string  ManagerFeedback = "Manager Feedback"; 
        public static readonly string  BoardPositioninIndustryOrganization = "Board Position in Industry Organization"; 
        public static readonly string  CallPlanReview = "Call Plan Review"; 
        public static readonly string  CustomerPresentations = "Customer Presentations"; 
        public static readonly string  CustomertoCustomerSellingEngagements = "Customer to Customer Selling Engagements"; 
        public static readonly string  NewLOBJointSalesCall = "New LOB Joint Sales Call"; 
        public static readonly string  CrossSellMeeting = "Cross Sell Meeting"; 
        public static readonly string  CrossSellJointSalesCall = "Cross Sell Joint Sales Call"; 
        public static readonly string  CrossSellDiscoveryMeeting = "Cross Sell Discovery Meeting"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskJCIActivitySubTypes o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskJCIActivitySubTypes(string s)
        {
            return new PickTaskJCIActivitySubTypes {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskJCIActivitySubTypes Parse(string text) => text;

        

    }
    public class PickTaskJCIActivityTypesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskJCIActivityTypes)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskJCIActivityTypes {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskJCIActivityTypesConverter))]
    public class PickTaskJCIActivityTypes
    {
        public static readonly string  CustomerFacing = "Customer Facing"; 
        public static readonly string  Internal = "Internal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskJCIActivityTypes o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskJCIActivityTypes(string s)
        {
            return new PickTaskJCIActivityTypes {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskJCIActivityTypes Parse(string text) => text;

        

    }
    public class PickTaskObservedUnobservedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskObservedUnobserved)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskObservedUnobserved {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskObservedUnobservedConverter))]
    public class PickTaskObservedUnobserved
    {
        public static readonly string  Observed = "Observed"; 
        public static readonly string  Unobserved = "Unobserved"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskObservedUnobserved o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskObservedUnobserved(string s)
        {
            return new PickTaskObservedUnobserved {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskObservedUnobserved Parse(string text) => text;

        

    }
    public class PickTaskEventTaskTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskEventTaskType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskEventTaskType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskEventTaskTypeConverter))]
    public class PickTaskEventTaskType
    {
        public static readonly string  CustomerBranchReview = "Customer / Branch Review"; 
        public static readonly string  ProductTraining = "Product Training"; 
        public static readonly string  ToolApplicationTraining = "Tool / Application Training"; 
        public static readonly string  CustomerVisit = "Customer Visit"; 
        public static readonly string  CustomerCall = "Customer Call"; 
        public static readonly string  SalesSupport = "Sales Support"; 
        public static readonly string  CustomerSupport = "Customer Support"; 
        public static readonly string _1on1 = "1 on 1"; 
        public static readonly string  PerformanceRecovery = "Performance Recovery"; 
        public static readonly string  CustomerExperienceSurvey = "Customer Experience Survey"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskEventTaskType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskEventTaskType(string s)
        {
            return new PickTaskEventTaskType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskEventTaskType Parse(string text) => text;

        

    }
    public class PickTaskCustomerPartnerTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskCustomerPartnerType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskCustomerPartnerType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskCustomerPartnerTypeConverter))]
    public class PickTaskCustomerPartnerType
    {
        public static readonly string  ArchitectEngineer = "Architect / Engineer"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  DirectBranch = "Direct Branch"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  ManufacturerRep = "Manufacturer Rep"; 
        public static readonly string  OEM = "OEM"; 
        public static readonly string  Owner = "Owner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskCustomerPartnerType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskCustomerPartnerType(string s)
        {
            return new PickTaskCustomerPartnerType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskCustomerPartnerType Parse(string text) => text;

        

    }
    public class PickUserStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserStateCodeConverter))]
    public class PickUserStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserStateCode(string s)
        {
            return new PickUserStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserStateCode Parse(string text) => text;

        

    }
    public class PickUserCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserCountryCodeConverter))]
    public class PickUserCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserCountryCode(string s)
        {
            return new PickUserCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserCountryCode Parse(string text) => text;

        

    }
    public class PickUserTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserTimeZoneSidKeyConverter))]
    public class PickUserTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserTimeZoneSidKey(string s)
        {
            return new PickUserTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickUserLocaleSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserLocaleSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserLocaleSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserLocaleSidKeyConverter))]
    public class PickUserLocaleSidKey
    {
        public static readonly string  sqAL = "sq_AL"; 
        public static readonly string  arBH = "ar_BH"; 
        public static readonly string  arEG = "ar_EG"; 
        public static readonly string  arJO = "ar_JO"; 
        public static readonly string  arKW = "ar_KW"; 
        public static readonly string  arLB = "ar_LB"; 
        public static readonly string  arQA = "ar_QA"; 
        public static readonly string  arSA = "ar_SA"; 
        public static readonly string  arAE = "ar_AE"; 
        public static readonly string  hyAM = "hy_AM"; 
        public static readonly string  azAZ = "az_AZ"; 
        public static readonly string  bnBD = "bn_BD"; 
        public static readonly string  euES = "eu_ES"; 
        public static readonly string  beBY = "be_BY"; 
        public static readonly string  bsBA = "bs_BA"; 
        public static readonly string  bgBG = "bg_BG"; 
        public static readonly string  caES = "ca_ES"; 
        public static readonly string  zhCNPINYIN = "zh_CN_PINYIN"; 
        public static readonly string  zhCNSTROKE = "zh_CN_STROKE"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  zhHKSTROKE = "zh_HK_STROKE"; 
        public static readonly string  zhHK = "zh_HK"; 
        public static readonly string  zhMO = "zh_MO"; 
        public static readonly string  zhSG = "zh_SG"; 
        public static readonly string  zhTWSTROKE = "zh_TW_STROKE"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  hrHR = "hr_HR"; 
        public static readonly string  csCZ = "cs_CZ"; 
        public static readonly string  daDK = "da_DK"; 
        public static readonly string  nlBE = "nl_BE"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  nlSR = "nl_SR"; 
        public static readonly string  enAU = "en_AU"; 
        public static readonly string  enBB = "en_BB"; 
        public static readonly string  enBM = "en_BM"; 
        public static readonly string  enCA = "en_CA"; 
        public static readonly string  enGH = "en_GH"; 
        public static readonly string  enIN = "en_IN"; 
        public static readonly string  enID = "en_ID"; 
        public static readonly string  enIE = "en_IE"; 
        public static readonly string  enMY = "en_MY"; 
        public static readonly string  enNZ = "en_NZ"; 
        public static readonly string  enNG = "en_NG"; 
        public static readonly string  enPK = "en_PK"; 
        public static readonly string  enPH = "en_PH"; 
        public static readonly string  enSG = "en_SG"; 
        public static readonly string  enZA = "en_ZA"; 
        public static readonly string  enGB = "en_GB"; 
        public static readonly string  enUS = "en_US"; 
        public static readonly string  etEE = "et_EE"; 
        public static readonly string  fiFI = "fi_FI"; 
        public static readonly string  frBE = "fr_BE"; 
        public static readonly string  frCA = "fr_CA"; 
        public static readonly string  frFR = "fr_FR"; 
        public static readonly string  frLU = "fr_LU"; 
        public static readonly string  frMC = "fr_MC"; 
        public static readonly string  frCH = "fr_CH"; 
        public static readonly string  kaGE = "ka_GE"; 
        public static readonly string  deAT = "de_AT"; 
        public static readonly string  deDE = "de_DE"; 
        public static readonly string  deLU = "de_LU"; 
        public static readonly string  deCH = "de_CH"; 
        public static readonly string  elGR = "el_GR"; 
        public static readonly string  iwIL = "iw_IL"; 
        public static readonly string  hiIN = "hi_IN"; 
        public static readonly string  huHU = "hu_HU"; 
        public static readonly string  isIS = "is_IS"; 
        public static readonly string  inID = "in_ID"; 
        public static readonly string  gaIE = "ga_IE"; 
        public static readonly string  itIT = "it_IT"; 
        public static readonly string  itCH = "it_CH"; 
        public static readonly string  jaJP = "ja_JP"; 
        public static readonly string  kkKZ = "kk_KZ"; 
        public static readonly string  kmKH = "km_KH"; 
        public static readonly string  koKR = "ko_KR"; 
        public static readonly string  kyKG = "ky_KG"; 
        public static readonly string  lvLV = "lv_LV"; 
        public static readonly string  ltLT = "lt_LT"; 
        public static readonly string  lbLU = "lb_LU"; 
        public static readonly string  mkMK = "mk_MK"; 
        public static readonly string  msBN = "ms_BN"; 
        public static readonly string  msMY = "ms_MY"; 
        public static readonly string  mtMT = "mt_MT"; 
        public static readonly string  shME = "sh_ME"; 
        public static readonly string  noNO = "no_NO"; 
        public static readonly string  plPL = "pl_PL"; 
        public static readonly string  ptAO = "pt_AO"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  ptPT = "pt_PT"; 
        public static readonly string  roMD = "ro_MD"; 
        public static readonly string  roRO = "ro_RO"; 
        public static readonly string  rmCH = "rm_CH"; 
        public static readonly string  ruRU = "ru_RU"; 
        public static readonly string  srBA = "sr_BA"; 
        public static readonly string  shBA = "sh_BA"; 
        public static readonly string  shCS = "sh_CS"; 
        public static readonly string  srCS = "sr_CS"; 
        public static readonly string  skSK = "sk_SK"; 
        public static readonly string  slSI = "sl_SI"; 
        public static readonly string  esAR = "es_AR"; 
        public static readonly string  esBO = "es_BO"; 
        public static readonly string  esCL = "es_CL"; 
        public static readonly string  esCO = "es_CO"; 
        public static readonly string  esCR = "es_CR"; 
        public static readonly string  esDO = "es_DO"; 
        public static readonly string  esEC = "es_EC"; 
        public static readonly string  esSV = "es_SV"; 
        public static readonly string  esGT = "es_GT"; 
        public static readonly string  esHN = "es_HN"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  esPA = "es_PA"; 
        public static readonly string  esPY = "es_PY"; 
        public static readonly string  esPE = "es_PE"; 
        public static readonly string  esPR = "es_PR"; 
        public static readonly string  esES = "es_ES"; 
        public static readonly string  esUY = "es_UY"; 
        public static readonly string  esVE = "es_VE"; 
        public static readonly string  svSE = "sv_SE"; 
        public static readonly string  tlPH = "tl_PH"; 
        public static readonly string  tgTJ = "tg_TJ"; 
        public static readonly string  thTH = "th_TH"; 
        public static readonly string  trTR = "tr_TR"; 
        public static readonly string  ukUA = "uk_UA"; 
        public static readonly string  urPK = "ur_PK"; 
        public static readonly string  viVN = "vi_VN"; 
        public static readonly string  cyGB = "cy_GB"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserLocaleSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserLocaleSidKey(string s)
        {
            return new PickUserLocaleSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserLocaleSidKey Parse(string text) => text;

        

    }
    public class PickUserEmailEncodingKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserEmailEncodingKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserEmailEncodingKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserEmailEncodingKeyConverter))]
    public class PickUserEmailEncodingKey
    {
        public static readonly string  UTF8 = "UTF-8"; 
        public static readonly string  ISO88591 = "ISO-8859-1"; 
        public static readonly string  ShiftJIS = "Shift_JIS"; 
        public static readonly string  ISO2022JP = "ISO-2022-JP"; 
        public static readonly string  EUCJP = "EUC-JP"; 
        public static readonly string  ksc56011987 = "ks_c_5601-1987"; 
        public static readonly string  Big5 = "Big5"; 
        public static readonly string  GB2312 = "GB2312"; 
        public static readonly string  Big5HKSCS = "Big5-HKSCS"; 
        public static readonly string  xSJIS0213 = "x-SJIS_0213"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserEmailEncodingKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserEmailEncodingKey(string s)
        {
            return new PickUserEmailEncodingKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserEmailEncodingKey Parse(string text) => text;

        

    }
    public class PickUserDefaultCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserDefaultCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserDefaultCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserDefaultCurrencyIsoCodeConverter))]
    public class PickUserDefaultCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserDefaultCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserDefaultCurrencyIsoCode(string s)
        {
            return new PickUserDefaultCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserDefaultCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickUserCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserCurrencyIsoCodeConverter))]
    public class PickUserCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserCurrencyIsoCode(string s)
        {
            return new PickUserCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickUserUserTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserUserType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserUserType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserUserTypeConverter))]
    public class PickUserUserType
    {
        public static readonly string  Standard = "Standard"; 
        public static readonly string  PowerPartner = "PowerPartner"; 
        public static readonly string  PowerCustomerSuccess = "PowerCustomerSuccess"; 
        public static readonly string  CustomerSuccess = "CustomerSuccess"; 
        public static readonly string  Guest = "Guest"; 
        public static readonly string  CspLitePortal = "CspLitePortal"; 
        public static readonly string  CsnOnly = "CsnOnly"; 
        public static readonly string  SelfService = "SelfService"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserUserType o)
        {
            return o.Value;
        }

        public static implicit operator PickUserUserType(string s)
        {
            return new PickUserUserType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserUserType Parse(string text) => text;

        

    }
    public class PickUserLanguageLocaleKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserLanguageLocaleKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserLanguageLocaleKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserLanguageLocaleKeyConverter))]
    public class PickUserLanguageLocaleKey
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
        public static readonly string  hu = "hu"; 
        public static readonly string  pl = "pl"; 
        public static readonly string  cs = "cs"; 
        public static readonly string  tr = "tr"; 
        //public static readonly string  in = "in"; 
        public static readonly string  ro = "ro"; 
        public static readonly string  vi = "vi"; 
        public static readonly string  uk = "uk"; 
        public static readonly string  iw = "iw"; 
        public static readonly string  el = "el"; 
        public static readonly string  bg = "bg"; 
        public static readonly string  enGB = "en_GB"; 
        public static readonly string  ar = "ar"; 
        public static readonly string  sk = "sk"; 
        public static readonly string  ptPT = "pt_PT"; 
        public static readonly string  hr = "hr"; 
        public static readonly string  sl = "sl"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserLanguageLocaleKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserLanguageLocaleKey(string s)
        {
            return new PickUserLanguageLocaleKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserLanguageLocaleKey Parse(string text) => text;

        

    }
    public class PickUserPortalRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserPortalRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserPortalRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserPortalRoleConverter))]
    public class PickUserPortalRole
    {
        public static readonly string  Executive = "Executive"; 
        public static readonly string  Manager = "Manager"; 
        public static readonly string  Worker = "Worker"; 
        public static readonly string  PersonAccount = "PersonAccount"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserPortalRole o)
        {
            return o.Value;
        }

        public static implicit operator PickUserPortalRole(string s)
        {
            return new PickUserPortalRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserPortalRole Parse(string text) => text;

        

    }
    public class PickUserDigestFrequencyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserDigestFrequency)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserDigestFrequency {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserDigestFrequencyConverter))]
    public class PickUserDigestFrequency
    {
        public static readonly string  D = "D"; 
        public static readonly string  W = "W"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserDigestFrequency o)
        {
            return o.Value;
        }

        public static implicit operator PickUserDigestFrequency(string s)
        {
            return new PickUserDigestFrequency {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserDigestFrequency Parse(string text) => text;

        

    }
    public class PickUserDefaultGroupNotificationFrequencyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserDefaultGroupNotificationFrequency)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserDefaultGroupNotificationFrequency {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserDefaultGroupNotificationFrequencyConverter))]
    public class PickUserDefaultGroupNotificationFrequency
    {
        public static readonly string  P = "P"; 
        public static readonly string  D = "D"; 
        public static readonly string  W = "W"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserDefaultGroupNotificationFrequency o)
        {
            return o.Value;
        }

        public static implicit operator PickUserDefaultGroupNotificationFrequency(string s)
        {
            return new PickUserDefaultGroupNotificationFrequency {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserDefaultGroupNotificationFrequency Parse(string text) => text;

        

    }
    public class PickUserBranchIDConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserBranchID)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserBranchID {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserBranchIDConverter))]
    public class PickUserBranchID
    {
        public static readonly string _0007600965FloridaBranch = "0007600965 Florida Branch"; 
        public static readonly string _0010054335PhiladelphiaBranch = "0010054335 Philadelphia Branch"; 
        public static readonly string _0010054764WashingtonBranch = "0010054764 Washington Branch"; 
        public static readonly string _0010054820MinnesotaBranch = "0010054820 Minnesota Branch"; 
        public static readonly string _0010054821OKCBranch = "0010054821 OKC Branch"; 
        public static readonly string _0010054822NewJerseyBranch = "0010054822 New Jersey Branch"; 
        public static readonly string _0010054823NYBranch = "0010054823 NY Branch"; 
        public static readonly string _0010054824StLouisBranch = "0010054824 St. Louis Branch"; 
        public static readonly string _0010054825ChicagoBranch = "0010054825 Chicago Branch"; 
        public static readonly string _0010054825IllinoisBranch = "0010054825 Illinois Branch"; 
        public static readonly string _0010054826WisconsinBranch = "0010054826 Wisconsin Branch"; 
        public static readonly string _0010054827MichiganBranch = "0010054827 Michigan Branch"; 
        public static readonly string  IC1051CanadaBranch = "IC-1051 Canada Branch"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserBranchID o)
        {
            return o.Value;
        }

        public static implicit operator PickUserBranchID(string s)
        {
            return new PickUserBranchID {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserBranchID Parse(string text) => text;

        

    }
    public class PickUserIndependentDistributorIDConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserIndependentDistributorID)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserIndependentDistributorID {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserIndependentDistributorIDConverter))]
    public class PickUserIndependentDistributorID
    {
        public static readonly string _0010015641JohnstonePhiladelphia129 = "0010015641 Johnstone Philadelphia 129"; 
        public static readonly string _0010015672JohnstoneMcAllen211 = "0010015672 Johnstone McAllen 211"; 
        public static readonly string _0010059525JohnstoneSupplyAllentownDistributionCenter = "0010059525 Johnstone Supply Allentown Distribution Center"; 
        public static readonly string _0010015400VirginiaAirTriState = "0010015400 Virginia Air Tri-State"; 
        public static readonly string _0010015429VirginiaAirofCarolinas = "0010015429 Virginia Air of Carolinas"; 
        public static readonly string _0010015447VirginiaAirVirginias = "0010015447 Virginia Air Virginias"; 
        public static readonly string _0010059211Johnstone59VirginiaBeach = "0010059211 Johnstone 59 Virginia Beach"; 
        public static readonly string _0010042228USAIR = "0010042228 US AIR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserIndependentDistributorID o)
        {
            return o.Value;
        }

        public static implicit operator PickUserIndependentDistributorID(string s)
        {
            return new PickUserIndependentDistributorID {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserIndependentDistributorID Parse(string text) => text;

        

    }
    public class PickUserUserTitleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserUserTitle)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserUserTitle {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserUserTitleConverter))]
    public class PickUserUserTitle
    {
        public static readonly string  BackOffice = "Back Office"; 
        public static readonly string  SalesManager = "Sales Manager"; 
        public static readonly string  TerritoryManager = "Territory Manager"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserUserTitle o)
        {
            return o.Value;
        }

        public static implicit operator PickUserUserTitle(string s)
        {
            return new PickUserUserTitle {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserUserTitle Parse(string text) => text;

        

    }
    public class PickUserDBRegionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserDBRegion)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserDBRegion {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserDBRegionConverter))]
    public class PickUserDBRegion
    {
        public static readonly string  NA = "NA"; 
        public static readonly string  EMEA = "EMEA"; 
        public static readonly string  APAC = "APAC"; 
        public static readonly string  LA = "LA"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserDBRegion o)
        {
            return o.Value;
        }

        public static implicit operator PickUserDBRegion(string s)
        {
            return new PickUserDBRegion {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserDBRegion Parse(string text) => text;

        

    }
    public class PickUserProfileStateCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserProfileStateCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserProfileStateCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserProfileStateCodeConverter))]
    public class PickUserProfileStateCode
    {
        public static readonly string  AA = "AA"; 
        public static readonly string  AUH = "AUH"; 
        public static readonly string  A9 = "A9"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AJM = "AJM"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  AL = "AL"; 
        public static readonly string  AK = "AK"; 
        public static readonly string  AB = "AB"; 
        public static readonly string  AS = "AS"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AN = "AN"; 
        public static readonly string  A5 = "A5"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  APO = "APO"; 
        public static readonly string  AQ = "AQ"; 
        public static readonly string  A6 = "A6"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AH = "AH"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  AP = "AP"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  A7 = "A7"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  A8 = "A8"; 
        public static readonly string  AV = "AV"; 
        public static readonly string  BK = "BK"; 
        public static readonly string  BW = "BW"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  B3 = "B3"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  B5 = "B5"; 
        public static readonly string  B4 = "B4"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BC = "BC"; 
        public static readonly string  BU = "BU"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CB = "CB"; 
        public static readonly string  L1 = "L1"; 
        public static readonly string  C5 = "C5"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  C7 = "C7"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  C6 = "C6"; 
        public static readonly string  C3 = "C3"; 
        public static readonly string  CT = "CT"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  C4 = "C4"; 
        public static readonly string  M8 = "M8"; 
        public static readonly string  C8 = "C8"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  M7 = "M7"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  CP = "CP"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CS = "CS"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  DA = "DA"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  DC = "DC"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  DT = "DT"; 
        public static readonly string  DR = "DR"; 
        public static readonly string  DXB = "DXB"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  EF = "EF"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EN = "EN"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  EV = "EV"; 
        public static readonly string  EX = "EX"; 
        public static readonly string  FA = "FA"; 
        public static readonly string  FE = "FE"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FB = "FB"; 
        public static readonly string  FL = "FL"; 
        public static readonly string  FG = "FG"; 
        public static readonly string  FC = "FC"; 
        public static readonly string  F1 = "F1"; 
        public static readonly string  F2 = "F2"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  FUJ = "FUJ"; 
        public static readonly string  FY = "FY"; 
        public static readonly string  G3 = "G3"; 
        public static readonly string  GV = "GV"; 
        public static readonly string  GL = "GL"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GO = "GO"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GN = "GN"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  G4 = "G4"; 
        public static readonly string  GM = "GM"; 
        public static readonly string  HA = "HA"; 
        public static readonly string  HB = "HB"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HI = "HI"; 
        public static readonly string  HE = "HE"; 
        public static readonly string  HO = "HO"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IF = "IF"; 
        public static readonly string  B2 = "B2"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IA = "IA"; 
        public static readonly string  IR = "IR"; 
        public static readonly string  IK = "IK"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IV = "IV"; 
        public static readonly string  JA = "JA"; 
        public static readonly string  JN = "JN"; 
        public static readonly string  JI = "JI"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  JU = "JU"; 
        public static readonly string  KL = "KL"; 
        public static readonly string  KA = "KA"; 
        public static readonly string  KH = "KH"; 
        public static readonly string  KM = "KM"; 
        public static readonly string  KS = "KS"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  KK = "KK"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KO = "KO"; 
        public static readonly string  KD = "KD"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  LR = "LR"; 
        public static readonly string  LS = "LS"; 
        public static readonly string  LP = "LP"; 
        public static readonly string  L2 = "L2"; 
        public static readonly string  SP = "SP"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LE = "LE"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  L4 = "L4"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LG = "LG"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  L3 = "L3"; 
        public static readonly string  LO = "LO"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  M0 = "M0"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MP = "MP"; 
        public static readonly string  MB = "MB"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MZ = "MZ"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  MI = "MI"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MW = "MW"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  N4 = "N4"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NN = "NN"; 
        public static readonly string  NV = "NV"; 
        public static readonly string  NB = "NB"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NH = "NH"; 
        public static readonly string  NJ = "NJ"; 
        public static readonly string  NM = "NM"; 
        public static readonly string  NY = "NY"; 
        public static readonly string  NW = "NW"; 
        public static readonly string  N1 = "N1"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  ND = "ND"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NT = "NT"; 
        public static readonly string  NS = "NS"; 
        public static readonly string  N2 = "N2"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  OB = "OB"; 
        public static readonly string  OH = "OH"; 
        public static readonly string  OK = "OK"; 
        public static readonly string  OL = "OL"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  ON = "ON"; 
        public static readonly string  OP = "OP"; 
        public static readonly string  OE = "OE"; 
        public static readonly string  OR = "OR"; 
        public static readonly string  OS = "OS"; 
        public static readonly string  OT = "OT"; 
        public static readonly string  OV = "OV"; 
        public static readonly string  PD = "PD"; 
        public static readonly string  P3 = "P3"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PB = "PB"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  PV = "PV"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PZ = "PZ"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PC = "PC"; 
        public static readonly string  PI = "PI"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PO = "PO"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  P4 = "P4"; 
        public static readonly string  P5 = "P5"; 
        public static readonly string  QC = "QC"; 
        public static readonly string  RG = "RG"; 
        public static readonly string  RAK = "RAK"; 
        public static readonly string  RA = "RA"; 
        public static readonly string  RC = "RC"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  M9 = "M9"; 
        public static readonly string  RP = "RP"; 
        public static readonly string  RI = "RI"; 
        public static readonly string  RB = "RB"; 
        public static readonly string  RN = "RN"; 
        public static readonly string  RK = "RK"; 
        public static readonly string  RM = "RM"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  RY = "RY"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  SM = "SM"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  S2 = "S2"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  SF = "SF"; 
        public static readonly string  SH = "SH"; 
        public static readonly string  SW = "SW"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  S3 = "S3"; 
        public static readonly string  SHJ = "SHJ"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  ST = "ST"; 
        public static readonly string  SO = "SO"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  ZZ = "ZZ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  TA = "TA"; 
        public static readonly string  TE = "TE"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TX = "TX"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TI = "TI"; 
        public static readonly string  TO = "TO"; 
        public static readonly string  TP = "TP"; 
        public static readonly string  TV = "TV"; 
        public static readonly string  TS = "TS"; 
        public static readonly string  TU = "TU"; 
        public static readonly string  TY = "TY"; 
        public static readonly string  UD = "UD"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UT = "UT"; 
        public static readonly string  UAQ = "UAQ"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  UP = "UP"; 
        public static readonly string  UR = "UR"; 
        public static readonly string  UO = "UO"; 
        public static readonly string  US = "US"; 
        public static readonly string  VI = "VI"; 
        public static readonly string  VL = "VL"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  VS = "VS"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  VM = "VM"; 
        public static readonly string  VG = "VG"; 
        public static readonly string  VD = "VD"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VB = "VB"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  VT = "VT"; 
        public static readonly string  VR = "VR"; 
        public static readonly string  V3 = "V3"; 
        public static readonly string  VV = "VV"; 
        public static readonly string  V2 = "V2"; 
        public static readonly string  V1 = "V1"; 
        public static readonly string  VO = "VO"; 
        public static readonly string  VZ = "VZ"; 
        public static readonly string  WK = "WK"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  WB = "WB"; 
        public static readonly string  WM = "WM"; 
        public static readonly string  WA = "WA"; 
        public static readonly string  WF = "WF"; 
        public static readonly string  WV = "WV"; 
        public static readonly string  WE = "WE"; 
        public static readonly string  WI = "WI"; 
        public static readonly string  WY = "WY"; 
        public static readonly string  YA = "YA"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  ZL = "ZL"; 
        public static readonly string  ZI = "ZI"; 
        public static readonly string  ZU = "ZU"; 
        public static readonly string  ZH = "ZH"; 
        public static readonly string  ZR = "ZR"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserProfileStateCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserProfileStateCode(string s)
        {
            return new PickUserProfileStateCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserProfileStateCode Parse(string text) => text;

        

    }
    public class PickUserProfileCountryCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserProfileCountryCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserProfileCountryCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserProfileCountryCodeConverter))]
    public class PickUserProfileCountryCode
    {
        public static readonly string  AF = "AF"; 
        public static readonly string  DZ = "DZ"; 
        public static readonly string  AD = "AD"; 
        public static readonly string  AO = "AO"; 
        public static readonly string  AI = "AI"; 
        public static readonly string  AG = "AG"; 
        public static readonly string  AR = "AR"; 
        public static readonly string  AM = "AM"; 
        public static readonly string  AW = "AW"; 
        public static readonly string  AU = "AU"; 
        public static readonly string  AT = "AT"; 
        public static readonly string  AZ = "AZ"; 
        public static readonly string  BS = "BS"; 
        public static readonly string  BH = "BH"; 
        public static readonly string  BD = "BD"; 
        public static readonly string  BB = "BB"; 
        public static readonly string  BY = "BY"; 
        public static readonly string  BE = "BE"; 
        public static readonly string  BZ = "BZ"; 
        public static readonly string  BJ = "BJ"; 
        public static readonly string  BM = "BM"; 
        public static readonly string  BT = "BT"; 
        public static readonly string  BO = "BO"; 
        public static readonly string  BQ = "BQ"; 
        public static readonly string  BA = "BA"; 
        public static readonly string  BR = "BR"; 
        public static readonly string  BN = "BN"; 
        public static readonly string  BG = "BG"; 
        public static readonly string  BI = "BI"; 
        public static readonly string  CM = "CM"; 
        public static readonly string  CA = "CA"; 
        public static readonly string  CV = "CV"; 
        public static readonly string  KY = "KY"; 
        public static readonly string  CE = "CE"; 
        public static readonly string  CF = "CF"; 
        public static readonly string  TD = "TD"; 
        public static readonly string  CL = "CL"; 
        public static readonly string  CN = "CN"; 
        public static readonly string  CX = "CX"; 
        public static readonly string  CC = "CC"; 
        public static readonly string  CO = "CO"; 
        public static readonly string  CG = "CG"; 
        public static readonly string  CD = "CD"; 
        public static readonly string  CK = "CK"; 
        public static readonly string  CR = "CR"; 
        public static readonly string  CI = "CI"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  CU = "CU"; 
        public static readonly string  CW = "CW"; 
        public static readonly string  CY = "CY"; 
        public static readonly string  CZ = "CZ"; 
        public static readonly string  DK = "DK"; 
        public static readonly string  DJ = "DJ"; 
        public static readonly string  DM = "DM"; 
        public static readonly string  DO = "DO"; 
        public static readonly string  EC = "EC"; 
        public static readonly string  EG = "EG"; 
        public static readonly string  SV = "SV"; 
        public static readonly string  GQ = "GQ"; 
        public static readonly string  EE = "EE"; 
        public static readonly string  ET = "ET"; 
        public static readonly string  EU = "EU"; 
        public static readonly string  FJ = "FJ"; 
        public static readonly string  FI = "FI"; 
        public static readonly string  FR = "FR"; 
        public static readonly string  GF = "GF"; 
        public static readonly string  PF = "PF"; 
        public static readonly string  GA = "GA"; 
        public static readonly string  GE = "GE"; 
        public static readonly string  DE = "DE"; 
        public static readonly string  GH = "GH"; 
        public static readonly string  GR = "GR"; 
        public static readonly string  GD = "GD"; 
        public static readonly string  GP = "GP"; 
        public static readonly string  GU = "GU"; 
        public static readonly string  GT = "GT"; 
        public static readonly string  GG = "GG"; 
        public static readonly string  GY = "GY"; 
        public static readonly string  HT = "HT"; 
        public static readonly string  HM = "HM"; 
        public static readonly string  VA = "VA"; 
        public static readonly string  HN = "HN"; 
        public static readonly string  HK = "HK"; 
        public static readonly string  HU = "HU"; 
        public static readonly string  IS = "IS"; 
        public static readonly string  IN = "IN"; 
        public static readonly string  ID = "ID"; 
        public static readonly string  IQ = "IQ"; 
        public static readonly string  IE = "IE"; 
        public static readonly string  IM = "IM"; 
        public static readonly string  IL = "IL"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  JM = "JM"; 
        public static readonly string  JP = "JP"; 
        public static readonly string  JE = "JE"; 
        public static readonly string  JO = "JO"; 
        public static readonly string  KZ = "KZ"; 
        public static readonly string  KE = "KE"; 
        public static readonly string  KI = "KI"; 
        public static readonly string  KP = "KP"; 
        public static readonly string  KR = "KR"; 
        public static readonly string  KU = "KU"; 
        public static readonly string  KW = "KW"; 
        public static readonly string  KG = "KG"; 
        public static readonly string  LA = "LA"; 
        public static readonly string  LV = "LV"; 
        public static readonly string  LB = "LB"; 
        public static readonly string  LY = "LY"; 
        public static readonly string  LI = "LI"; 
        public static readonly string  LT = "LT"; 
        public static readonly string  LU = "LU"; 
        public static readonly string  MO = "MO"; 
        public static readonly string  MK = "MK"; 
        public static readonly string  MG = "MG"; 
        public static readonly string  MY = "MY"; 
        public static readonly string  MV = "MV"; 
        public static readonly string  ML = "ML"; 
        public static readonly string  MT = "MT"; 
        public static readonly string  MH = "MH"; 
        public static readonly string  MQ = "MQ"; 
        public static readonly string  MR = "MR"; 
        public static readonly string  MU = "MU"; 
        public static readonly string  YT = "YT"; 
        public static readonly string  MX = "MX"; 
        public static readonly string  MD = "MD"; 
        public static readonly string  MC = "MC"; 
        public static readonly string  MN = "MN"; 
        public static readonly string  ME = "ME"; 
        public static readonly string  MS = "MS"; 
        public static readonly string  MA = "MA"; 
        public static readonly string  MM = "MM"; 
        public static readonly string  NA = "NA"; 
        public static readonly string  NR = "NR"; 
        public static readonly string  NP = "NP"; 
        public static readonly string  NL = "NL"; 
        public static readonly string  NC = "NC"; 
        public static readonly string  NI = "NI"; 
        public static readonly string  NE = "NE"; 
        public static readonly string  NG = "NG"; 
        public static readonly string  NU = "NU"; 
        public static readonly string  NO = "NO"; 
        public static readonly string  OM = "OM"; 
        public static readonly string  PK = "PK"; 
        public static readonly string  PS = "PS"; 
        public static readonly string  PA = "PA"; 
        public static readonly string  PG = "PG"; 
        public static readonly string  PY = "PY"; 
        public static readonly string  PE = "PE"; 
        public static readonly string  PH = "PH"; 
        public static readonly string  PN = "PN"; 
        public static readonly string  PL = "PL"; 
        public static readonly string  PT = "PT"; 
        public static readonly string  PR = "PR"; 
        public static readonly string  QA = "QA"; 
        public static readonly string  RE = "RE"; 
        public static readonly string  RO = "RO"; 
        public static readonly string  RU = "RU"; 
        public static readonly string  RW = "RW"; 
        public static readonly string  BL = "BL"; 
        public static readonly string  KN = "KN"; 
        public static readonly string  LC = "LC"; 
        public static readonly string  MF = "MF"; 
        public static readonly string  PM = "PM"; 
        public static readonly string  VC = "VC"; 
        public static readonly string  WS = "WS"; 
        public static readonly string  SA = "SA"; 
        public static readonly string  SN = "SN"; 
        public static readonly string  RS = "RS"; 
        public static readonly string  SC = "SC"; 
        public static readonly string  SL = "SL"; 
        public static readonly string  SG = "SG"; 
        public static readonly string  SX = "SX"; 
        public static readonly string  SK = "SK"; 
        public static readonly string  SI = "SI"; 
        public static readonly string  SB = "SB"; 
        public static readonly string  ZA = "ZA"; 
        public static readonly string  GS = "GS"; 
        public static readonly string  SS = "SS"; 
        public static readonly string  ES = "ES"; 
        public static readonly string  LK = "LK"; 
        public static readonly string  SD = "SD"; 
        public static readonly string  SR = "SR"; 
        public static readonly string  SJ = "SJ"; 
        public static readonly string  SZ = "SZ"; 
        public static readonly string  SE = "SE"; 
        public static readonly string  CH = "CH"; 
        public static readonly string  SY = "SY"; 
        public static readonly string  TW = "TW"; 
        public static readonly string  TZ = "TZ"; 
        public static readonly string  TH = "TH"; 
        public static readonly string  TL = "TL"; 
        public static readonly string  TG = "TG"; 
        public static readonly string  TK = "TK"; 
        public static readonly string  TT = "TT"; 
        public static readonly string  TN = "TN"; 
        public static readonly string  TR = "TR"; 
        public static readonly string  TM = "TM"; 
        public static readonly string  TC = "TC"; 
        public static readonly string  UG = "UG"; 
        public static readonly string  UA = "UA"; 
        public static readonly string  AE = "AE"; 
        public static readonly string  GB = "GB"; 
        public static readonly string  US = "US"; 
        public static readonly string  UY = "UY"; 
        public static readonly string  UZ = "UZ"; 
        public static readonly string  VU = "VU"; 
        public static readonly string  VE = "VE"; 
        public static readonly string  VN = "VN"; 
        public static readonly string  EH = "EH"; 
        public static readonly string  YE = "YE"; 
        public static readonly string  YU = "YU"; 
        public static readonly string  ZM = "ZM"; 
        public static readonly string  ZW = "ZW"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserProfileCountryCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserProfileCountryCode(string s)
        {
            return new PickUserProfileCountryCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserProfileCountryCode Parse(string text) => text;

        

    }
    public class PickUserProfileCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserProfileCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserProfileCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserProfileCurrencyIsoCodeConverter))]
    public class PickUserProfileCurrencyIsoCode
    {
        public static readonly string  BRL = "BRL"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  USD = "USD"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserProfileCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickUserProfileCurrencyIsoCode(string s)
        {
            return new PickUserProfileCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserProfileCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickUserRecordAccessRecordIdConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRecordAccessRecordId)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRecordAccessRecordId {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRecordAccessRecordIdConverter))]
    public class PickUserRecordAccessRecordId
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRecordAccessRecordId o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRecordAccessRecordId(string s)
        {
            return new PickUserRecordAccessRecordId {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRecordAccessRecordId Parse(string text) => text;

        

    }
    public class PickUserRecordAccessMaxAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRecordAccessMaxAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRecordAccessMaxAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRecordAccessMaxAccessLevelConverter))]
    public class PickUserRecordAccessMaxAccessLevel
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  Delete = "Delete"; 
        public static readonly string  Transfer = "Transfer"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRecordAccessMaxAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRecordAccessMaxAccessLevel(string s)
        {
            return new PickUserRecordAccessMaxAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRecordAccessMaxAccessLevel Parse(string text) => text;

        

    }
    public class PickUserRoleOpportunityAccessForAccountOwnerConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRoleOpportunityAccessForAccountOwner)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRoleOpportunityAccessForAccountOwner {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRoleOpportunityAccessForAccountOwnerConverter))]
    public class PickUserRoleOpportunityAccessForAccountOwner
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRoleOpportunityAccessForAccountOwner o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRoleOpportunityAccessForAccountOwner(string s)
        {
            return new PickUserRoleOpportunityAccessForAccountOwner {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRoleOpportunityAccessForAccountOwner Parse(string text) => text;

        

    }
    public class PickUserRoleCaseAccessForAccountOwnerConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRoleCaseAccessForAccountOwner)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRoleCaseAccessForAccountOwner {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRoleCaseAccessForAccountOwnerConverter))]
    public class PickUserRoleCaseAccessForAccountOwner
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRoleCaseAccessForAccountOwner o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRoleCaseAccessForAccountOwner(string s)
        {
            return new PickUserRoleCaseAccessForAccountOwner {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRoleCaseAccessForAccountOwner Parse(string text) => text;

        

    }
    public class PickUserRoleContactAccessForAccountOwnerConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRoleContactAccessForAccountOwner)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRoleContactAccessForAccountOwner {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRoleContactAccessForAccountOwnerConverter))]
    public class PickUserRoleContactAccessForAccountOwner
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRoleContactAccessForAccountOwner o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRoleContactAccessForAccountOwner(string s)
        {
            return new PickUserRoleContactAccessForAccountOwner {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRoleContactAccessForAccountOwner Parse(string text) => text;

        

    }
    public class PickUserRolePortalTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRolePortalType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRolePortalType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRolePortalTypeConverter))]
    public class PickUserRolePortalType
    {
        public static readonly string  None = "None"; 
        public static readonly string  CustomerPortal = "CustomerPortal"; 
        public static readonly string  Partner = "Partner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRolePortalType o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRolePortalType(string s)
        {
            return new PickUserRolePortalType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRolePortalType Parse(string text) => text;

        

    }
    public class PickUserRolePortalRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRolePortalRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRolePortalRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRolePortalRoleConverter))]
    public class PickUserRolePortalRole
    {
        public static readonly string  Executive = "Executive"; 
        public static readonly string  Manager = "Manager"; 
        public static readonly string  Worker = "Worker"; 
        public static readonly string  PersonAccount = "PersonAccount"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRolePortalRole o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRolePortalRole(string s)
        {
            return new PickUserRolePortalRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRolePortalRole Parse(string text) => text;

        

    }
    public class PickUserTeamMemberOpportunityAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserTeamMemberOpportunityAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserTeamMemberOpportunityAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserTeamMemberOpportunityAccessLevelConverter))]
    public class PickUserTeamMemberOpportunityAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserTeamMemberOpportunityAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickUserTeamMemberOpportunityAccessLevel(string s)
        {
            return new PickUserTeamMemberOpportunityAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserTeamMemberOpportunityAccessLevel Parse(string text) => text;

        

    }
    public class PickUserTeamMemberTeamMemberRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserTeamMemberTeamMemberRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserTeamMemberTeamMemberRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserTeamMemberTeamMemberRoleConverter))]
    public class PickUserTeamMemberTeamMemberRole
    {
        public static readonly string  Prospecting = "Prospecting"; 
        public static readonly string  NAChannelsRSM = "NA Channels RSM"; 
        public static readonly string  OpportunityOwner = "Opportunity Owner"; 
        public static readonly string  AccountManager = "Account Manager"; 
        public static readonly string  ChannelManager = "Channel Manager"; 
        public static readonly string  ExecutiveSponsor = "Executive Sponsor"; 
        public static readonly string  LeadQualifier = "Lead Qualifier"; 
        public static readonly string  PreSalesConsultant = "Pre-Sales Consultant"; 
        public static readonly string  SalesRep = "Sales Rep"; 
        public static readonly string  TechnicalAssistant = "Technical Assistant"; 
        public static readonly string  AdministrativeAssistant = "Administrative Assistant"; 
        public static readonly string  AssistingSalesContactSF = "Assisting Sales Contact - S&F"; 
        public static readonly string  AssistingSalesContactBldgSysEquip = "Assisting Sales Contact - Bldg Sys&Equip"; 
        public static readonly string  AssistingSalesContactMP = "Assisting Sales Contact - MP"; 
        public static readonly string  AssistingSalesContactSolutions = "Assisting Sales Contact - Solutions"; 
        public static readonly string  AssistingSalesContactOwner = "Assisting Sales Contact - Owner"; 
        public static readonly string  BODEngineer = "BOD Engineer"; 
        public static readonly string  Coach = "Coach"; 
        public static readonly string  EnergyEngineer = "Energy Engineer"; 
        public static readonly string  Estimator = "Estimator"; 
        public static readonly string  FLSPControlsTech = "FLSP - Controls Tech"; 
        public static readonly string  FLSPMechanic = "FLSP - Mechanic"; 
        public static readonly string  FLSPSFTech = "FLSP - S&F Tech"; 
        public static readonly string  MultiAreaAccountExecutiveManager = "Multi-Area Account/Executive/Manager"; 
        public static readonly string  NetworkAdministrator = "Network Administrator"; 
        public static readonly string  NetworkIntegrationContact = "Network Integration Contact"; 
        public static readonly string  PrincipalSalesContactMP = "Principal Sales Contact - MP"; 
        public static readonly string  PrincipalSalesContactBldgSysEquip = "Principal Sales Contact - Bldg Sys&Equip"; 
        public static readonly string  PrincipalSalesContactOwner = "Principal Sales Contact - Owner"; 
        public static readonly string  PrincipalSalesContactSF = "Principal Sales Contact - S&F"; 
        public static readonly string  PrincipalSalesContactSolutions = "Principal Sales Contact - Solutions"; 
        public static readonly string  ProjectDevelopmentEngineer = "Project Development Engineer"; 
        public static readonly string  ProjectEngineer = "Project Engineer"; 
        public static readonly string  ProjectManager = "Project Manager"; 
        public static readonly string  SalesManagement = "Sales Management"; 
        public static readonly string  SeniorSolutionDesignSpecialist = "Senior Solution Design Specialist"; 
        public static readonly string  SolutionDesignSpecialist = "Solution Design Specialist"; 
        public static readonly string  SSNAManagement = "SSNA Management"; 
        public static readonly string  TruckBasedServiceManager = "Truck Based Service Manager"; 
        public static readonly string  ServiceOperationsSupervisor = "Service Operations Supervisor"; 
        public static readonly string  OperationsSupport = "Operations Support"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserTeamMemberTeamMemberRole o)
        {
            return o.Value;
        }

        public static implicit operator PickUserTeamMemberTeamMemberRole(string s)
        {
            return new PickUserTeamMemberTeamMemberRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserTeamMemberTeamMemberRole Parse(string text) => text;

        

    }
    [EntityName("Account")]
    public class Account : ISalesforceEntity
    {
    [JsonConstructor]
        private Account(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Account()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __MasterRecordId;
        [EntityField(true)]
        public System.String MasterRecordId
        {
            get { return __MasterRecordId; }
            set { SetField(ref __MasterRecordId, value, "MasterRecordId"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickAccountType __Type;
        [EntityField(true)]
        public PickAccountType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __BillingStreet;
        [EntityField(true)]
        public System.String BillingStreet
        {
            get { return __BillingStreet; }
            set { SetField(ref __BillingStreet, value, "BillingStreet"); }
        }
        private System.String __BillingCity;
        [EntityField(true)]
        public System.String BillingCity
        {
            get { return __BillingCity; }
            set { SetField(ref __BillingCity, value, "BillingCity"); }
        }
        private System.String __BillingState;
        [EntityField(true)]
        public System.String BillingState
        {
            get { return __BillingState; }
            set { SetField(ref __BillingState, value, "BillingState"); }
        }
        private System.String __BillingPostalCode;
        [EntityField(true)]
        public System.String BillingPostalCode
        {
            get { return __BillingPostalCode; }
            set { SetField(ref __BillingPostalCode, value, "BillingPostalCode"); }
        }
        private System.String __BillingCountry;
        [EntityField(true)]
        public System.String BillingCountry
        {
            get { return __BillingCountry; }
            set { SetField(ref __BillingCountry, value, "BillingCountry"); }
        }
        private PickAccountBillingStateCode __BillingStateCode;
        [EntityField(true)]
        public PickAccountBillingStateCode BillingStateCode
        {
            get { return __BillingStateCode; }
            set { SetField(ref __BillingStateCode, value, "BillingStateCode"); }
        }
        private PickAccountBillingCountryCode __BillingCountryCode;
        [EntityField(true)]
        public PickAccountBillingCountryCode BillingCountryCode
        {
            get { return __BillingCountryCode; }
            set { SetField(ref __BillingCountryCode, value, "BillingCountryCode"); }
        }
        private System.Double? __BillingLatitude;
        [EntityField(true)]
        public System.Double? BillingLatitude
        {
            get { return __BillingLatitude; }
            set { SetField(ref __BillingLatitude, value, "BillingLatitude"); }
        }
        private System.Double? __BillingLongitude;
        [EntityField(true)]
        public System.Double? BillingLongitude
        {
            get { return __BillingLongitude; }
            set { SetField(ref __BillingLongitude, value, "BillingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __BillingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address BillingAddress
        {
            get { return __BillingAddress; }
            set { SetField(ref __BillingAddress, value, "BillingAddress"); }
        }
        private System.String __ShippingStreet;
        [EntityField(true)]
        public System.String ShippingStreet
        {
            get { return __ShippingStreet; }
            set { SetField(ref __ShippingStreet, value, "ShippingStreet"); }
        }
        private System.String __ShippingCity;
        [EntityField(true)]
        public System.String ShippingCity
        {
            get { return __ShippingCity; }
            set { SetField(ref __ShippingCity, value, "ShippingCity"); }
        }
        private System.String __ShippingState;
        [EntityField(true)]
        public System.String ShippingState
        {
            get { return __ShippingState; }
            set { SetField(ref __ShippingState, value, "ShippingState"); }
        }
        private System.String __ShippingPostalCode;
        [EntityField(true)]
        public System.String ShippingPostalCode
        {
            get { return __ShippingPostalCode; }
            set { SetField(ref __ShippingPostalCode, value, "ShippingPostalCode"); }
        }
        private System.String __ShippingCountry;
        [EntityField(true)]
        public System.String ShippingCountry
        {
            get { return __ShippingCountry; }
            set { SetField(ref __ShippingCountry, value, "ShippingCountry"); }
        }
        private PickAccountShippingStateCode __ShippingStateCode;
        [EntityField(true)]
        public PickAccountShippingStateCode ShippingStateCode
        {
            get { return __ShippingStateCode; }
            set { SetField(ref __ShippingStateCode, value, "ShippingStateCode"); }
        }
        private PickAccountShippingCountryCode __ShippingCountryCode;
        [EntityField(true)]
        public PickAccountShippingCountryCode ShippingCountryCode
        {
            get { return __ShippingCountryCode; }
            set { SetField(ref __ShippingCountryCode, value, "ShippingCountryCode"); }
        }
        private System.Double? __ShippingLatitude;
        [EntityField(true)]
        public System.Double? ShippingLatitude
        {
            get { return __ShippingLatitude; }
            set { SetField(ref __ShippingLatitude, value, "ShippingLatitude"); }
        }
        private System.Double? __ShippingLongitude;
        [EntityField(true)]
        public System.Double? ShippingLongitude
        {
            get { return __ShippingLongitude; }
            set { SetField(ref __ShippingLongitude, value, "ShippingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __ShippingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address ShippingAddress
        {
            get { return __ShippingAddress; }
            set { SetField(ref __ShippingAddress, value, "ShippingAddress"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __AccountNumber;
        [EntityField(true)]
        public System.String AccountNumber
        {
            get { return __AccountNumber; }
            set { SetField(ref __AccountNumber, value, "AccountNumber"); }
        }
        private System.String __Website;
        [EntityField(true)]
        public System.String Website
        {
            get { return __Website; }
            set { SetField(ref __Website, value, "Website"); }
        }
        private System.String __PhotoUrl;
        [EntityField(true)]
        public System.String PhotoUrl
        {
            get { return __PhotoUrl; }
            set { SetField(ref __PhotoUrl, value, "PhotoUrl"); }
        }
        private System.String __Sic;
        [EntityField(true)]
        public System.String Sic
        {
            get { return __Sic; }
            set { SetField(ref __Sic, value, "Sic"); }
        }
        private PickAccountIndustry __Industry;
        [EntityField(true)]
        public PickAccountIndustry Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private PickAccountOwnership __Ownership;
        [EntityField(true)]
        public PickAccountOwnership Ownership
        {
            get { return __Ownership; }
            set { SetField(ref __Ownership, value, "Ownership"); }
        }
        private System.String __TickerSymbol;
        [EntityField(true)]
        public System.String TickerSymbol
        {
            get { return __TickerSymbol; }
            set { SetField(ref __TickerSymbol, value, "TickerSymbol"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickAccountRating __Rating;
        [EntityField(true)]
        public PickAccountRating Rating
        {
            get { return __Rating; }
            set { SetField(ref __Rating, value, "Rating"); }
        }
        private System.String __Site;
        [EntityField(true)]
        public System.String Site
        {
            get { return __Site; }
            set { SetField(ref __Site, value, "Site"); }
        }
        private PickAccountCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickAccountCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.Boolean __IsPartner;
        [EntityField(false)]
        public System.Boolean IsPartner
        {
            get { return __IsPartner; }
            set { SetField(ref __IsPartner, value, "IsPartner"); }
        }
        private System.Boolean __IsCustomerPortal;
        [EntityField(false)]
        public System.Boolean IsCustomerPortal
        {
            get { return __IsCustomerPortal; }
            set { SetField(ref __IsCustomerPortal, value, "IsCustomerPortal"); }
        }
        private System.String __Jigsaw;
        [EntityField(true)]
        public System.String Jigsaw
        {
            get { return __Jigsaw; }
            set { SetField(ref __Jigsaw, value, "Jigsaw"); }
        }
        private System.String __JigsawCompanyId;
        [EntityField(true)]
        public System.String JigsawCompanyId
        {
            get { return __JigsawCompanyId; }
            set { SetField(ref __JigsawCompanyId, value, "JigsawCompanyId"); }
        }
        private PickAccountAccountSource __AccountSource;
        [EntityField(true)]
        public PickAccountAccountSource AccountSource
        {
            get { return __AccountSource; }
            set { SetField(ref __AccountSource, value, "AccountSource"); }
        }
        private System.String __DunsNumber;
        [EntityField(true)]
        public System.String DunsNumber
        {
            get { return __DunsNumber; }
            set { SetField(ref __DunsNumber, value, "DunsNumber"); }
        }
        private System.String __Tradestyle;
        [EntityField(true)]
        public System.String Tradestyle
        {
            get { return __Tradestyle; }
            set { SetField(ref __Tradestyle, value, "Tradestyle"); }
        }
        private System.String __NaicsCode;
        [EntityField(true)]
        public System.String NaicsCode
        {
            get { return __NaicsCode; }
            set { SetField(ref __NaicsCode, value, "NaicsCode"); }
        }
        private System.String __NaicsDesc;
        [EntityField(true)]
        public System.String NaicsDesc
        {
            get { return __NaicsDesc; }
            set { SetField(ref __NaicsDesc, value, "NaicsDesc"); }
        }
        private System.String __YearStarted;
        [EntityField(true)]
        public System.String YearStarted
        {
            get { return __YearStarted; }
            set { SetField(ref __YearStarted, value, "YearStarted"); }
        }
        private System.String __SicDesc;
        [EntityField(true)]
        public System.String SicDesc
        {
            get { return __SicDesc; }
            set { SetField(ref __SicDesc, value, "SicDesc"); }
        }
        private System.String __DandbCompanyId;
        [EntityField(true)]
        public System.String DandbCompanyId
        {
            get { return __DandbCompanyId; }
            set { SetField(ref __DandbCompanyId, value, "DandbCompanyId"); }
        }
        private System.Boolean __AvailabletoAllUPGc;
        [JsonProperty(PropertyName = "Available_to_All_UPG__c")]
        [EntityField(false)]
        public System.Boolean AvailabletoAllUPGc
        {
            get { return __AvailabletoAllUPGc; }
            set { SetField(ref __AvailabletoAllUPGc, value, "Available_to_All_UPG__c"); }
        }
        private System.String __SourceIDc;
        [JsonProperty(PropertyName = "Source_ID__c")]
        [EntityField(true)]
        public System.String SourceIDc
        {
            get { return __SourceIDc; }
            set { SetField(ref __SourceIDc, value, "Source_ID__c"); }
        }
        private PickAccountDirectOrIndirect __DirectorIndirectc;
        [JsonProperty(PropertyName = "Direct_or_Indirect__c")]
        [EntityField(true)]
        public PickAccountDirectOrIndirect DirectorIndirectc
        {
            get { return __DirectorIndirectc; }
            set { SetField(ref __DirectorIndirectc, value, "Direct_or_Indirect__c"); }
        }
        private System.String __Commentsc;
        [JsonProperty(PropertyName = "Comments__c")]
        [EntityField(true)]
        public System.String Commentsc
        {
            get { return __Commentsc; }
            set { SetField(ref __Commentsc, value, "Comments__c"); }
        }
        private System.String __PrimaryCompetingProductsc;
        [JsonProperty(PropertyName = "Primary_Competing_Products__c")]
        [EntityField(true)]
        public System.String PrimaryCompetingProductsc
        {
            get { return __PrimaryCompetingProductsc; }
            set { SetField(ref __PrimaryCompetingProductsc, value, "Primary_Competing_Products__c"); }
        }
        private System.DateTime? __AcctPlanActionsStrategyUpdatedc;
        [JsonProperty(PropertyName = "Acct_Plan_Actions_Strategy_Updated__c")]
        [EntityField(true)]
        public System.DateTime? AcctPlanActionsStrategyUpdatedc
        {
            get { return __AcctPlanActionsStrategyUpdatedc; }
            set { SetField(ref __AcctPlanActionsStrategyUpdatedc, value, "Acct_Plan_Actions_Strategy_Updated__c"); }
        }
        private System.DateTime? __AcctPlanReviewCompletedc;
        [JsonProperty(PropertyName = "Acct_Plan_Review_Completed__c")]
        [EntityField(true)]
        public System.DateTime? AcctPlanReviewCompletedc
        {
            get { return __AcctPlanReviewCompletedc; }
            set { SetField(ref __AcctPlanReviewCompletedc, value, "Acct_Plan_Review_Completed__c"); }
        }
        private System.String __ActualAmountThisFiscalYearc;
        [JsonProperty(PropertyName = "Actual_Amount_This_Fiscal_Year__c")]
        [EntityField(true)]
        public System.String ActualAmountThisFiscalYearc
        {
            get { return __ActualAmountThisFiscalYearc; }
            set { SetField(ref __ActualAmountThisFiscalYearc, value, "Actual_Amount_This_Fiscal_Year__c"); }
        }
        private PickAccountAccountTeamType __AccountTeamTypec;
        [JsonProperty(PropertyName = "Account_Team_Type__c")]
        [EntityField(true)]
        public PickAccountAccountTeamType AccountTeamTypec
        {
            get { return __AccountTeamTypec; }
            set { SetField(ref __AccountTeamTypec, value, "Account_Team_Type__c"); }
        }
        private System.DateTime? __CustReviewCompletedc;
        [JsonProperty(PropertyName = "Cust_Review_Completed__c")]
        [EntityField(true)]
        public System.DateTime? CustReviewCompletedc
        {
            get { return __CustReviewCompletedc; }
            set { SetField(ref __CustReviewCompletedc, value, "Cust_Review_Completed__c"); }
        }
        private System.Double? __DedicatedMarketingResourcesc;
        [JsonProperty(PropertyName = "Dedicated_Marketing_Resources__c")]
        [EntityField(true)]
        public System.Double? DedicatedMarketingResourcesc
        {
            get { return __DedicatedMarketingResourcesc; }
            set { SetField(ref __DedicatedMarketingResourcesc, value, "Dedicated_Marketing_Resources__c"); }
        }
        private System.String __EstofInventorysc;
        [JsonProperty(PropertyName = "Est_of_Inventory_s__c")]
        [EntityField(true)]
        public System.String EstofInventorysc
        {
            get { return __EstofInventorysc; }
            set { SetField(ref __EstofInventorysc, value, "Est_of_Inventory_s__c"); }
        }
        private PickAccountInactiveReasonDetail __InactiveReasonDetailc;
        [JsonProperty(PropertyName = "Inactive_Reason_Detail__c")]
        [EntityField(true)]
        public PickAccountInactiveReasonDetail InactiveReasonDetailc
        {
            get { return __InactiveReasonDetailc; }
            set { SetField(ref __InactiveReasonDetailc, value, "Inactive_Reason_Detail__c"); }
        }
        private PickAccountInactiveReason __InactiveReasonc;
        [JsonProperty(PropertyName = "Inactive_Reason__c")]
        [EntityField(true)]
        public PickAccountInactiveReason InactiveReasonc
        {
            get { return __InactiveReasonc; }
            set { SetField(ref __InactiveReasonc, value, "Inactive_Reason__c"); }
        }
        private System.Boolean __IsActivec;
        [JsonProperty(PropertyName = "Is_Active__c")]
        [EntityField(false)]
        public System.Boolean IsActivec
        {
            get { return __IsActivec; }
            set { SetField(ref __IsActivec, value, "Is_Active__c"); }
        }
        private System.Boolean __IsDedicatedTrainingFacilityc;
        [JsonProperty(PropertyName = "Is_Dedicated_Training_Facility__c")]
        [EntityField(false)]
        public System.Boolean IsDedicatedTrainingFacilityc
        {
            get { return __IsDedicatedTrainingFacilityc; }
            set { SetField(ref __IsDedicatedTrainingFacilityc, value, "Is_Dedicated_Training_Facility__c"); }
        }
        private System.Boolean __IsMinorityorWomanEnterprisec;
        [JsonProperty(PropertyName = "Is_Minority_or_Woman_Enterprise__c")]
        [EntityField(false)]
        public System.Boolean IsMinorityorWomanEnterprisec
        {
            get { return __IsMinorityorWomanEnterprisec; }
            set { SetField(ref __IsMinorityorWomanEnterprisec, value, "Is_Minority_or_Woman_Enterprise__c"); }
        }
        private System.Boolean __IsShowroomsc;
        [JsonProperty(PropertyName = "Is_Showrooms__c")]
        [EntityField(false)]
        public System.Boolean IsShowroomsc
        {
            get { return __IsShowroomsc; }
            set { SetField(ref __IsShowroomsc, value, "Is_Showrooms__c"); }
        }
        private System.Boolean __IsStockingLocationc;
        [JsonProperty(PropertyName = "Is_Stocking_Location__c")]
        [EntityField(false)]
        public System.Boolean IsStockingLocationc
        {
            get { return __IsStockingLocationc; }
            set { SetField(ref __IsStockingLocationc, value, "Is_Stocking_Location__c"); }
        }
        private System.String __JCIFamilyShareofWalletc;
        [JsonProperty(PropertyName = "JCI_Family_Share_of_Wallet__c")]
        [EntityField(true)]
        public System.String JCIFamilyShareofWalletc
        {
            get { return __JCIFamilyShareofWalletc; }
            set { SetField(ref __JCIFamilyShareofWalletc, value, "JCI_Family_Share_of_Wallet__c"); }
        }
        private System.Double? __JCIFamilyofBrandsnbrc;
        [JsonProperty(PropertyName = "JCI_Family_of_Brands_nbr__c")]
        [EntityField(true)]
        public System.Double? JCIFamilyofBrandsnbrc
        {
            get { return __JCIFamilyofBrandsnbrc; }
            set { SetField(ref __JCIFamilyofBrandsnbrc, value, "JCI_Family_of_Brands_nbr__c"); }
        }
        private System.Double? __LeasedServiceTrucksc;
        [JsonProperty(PropertyName = "Leased_Service_Trucks__c")]
        [EntityField(true)]
        public System.Double? LeasedServiceTrucksc
        {
            get { return __LeasedServiceTrucksc; }
            set { SetField(ref __LeasedServiceTrucksc, value, "Leased_Service_Trucks__c"); }
        }
        private System.String __Marketc;
        [JsonProperty(PropertyName = "Market__c")]
        [EntityField(true)]
        public System.String Marketc
        {
            get { return __Marketc; }
            set { SetField(ref __Marketc, value, "Market__c"); }
        }
        private System.Double? __NbrofDedicatedPartsEmplsc;
        [JsonProperty(PropertyName = "Nbr_of_Dedicated_Parts_Empls__c")]
        [EntityField(true)]
        public System.Double? NbrofDedicatedPartsEmplsc
        {
            get { return __NbrofDedicatedPartsEmplsc; }
            set { SetField(ref __NbrofDedicatedPartsEmplsc, value, "Nbr_of_Dedicated_Parts_Empls__c"); }
        }
        private System.Double? __NbrofInsideSalesPeoplec;
        [JsonProperty(PropertyName = "Nbr_of_Inside_Sales_People__c")]
        [EntityField(true)]
        public System.Double? NbrofInsideSalesPeoplec
        {
            get { return __NbrofInsideSalesPeoplec; }
            set { SetField(ref __NbrofInsideSalesPeoplec, value, "Nbr_of_Inside_Sales_People__c"); }
        }
        private System.Double? __NbrofOutsideSalesPeoplec;
        [JsonProperty(PropertyName = "Nbr_of_Outside_Sales_People__c")]
        [EntityField(true)]
        public System.Double? NbrofOutsideSalesPeoplec
        {
            get { return __NbrofOutsideSalesPeoplec; }
            set { SetField(ref __NbrofOutsideSalesPeoplec, value, "Nbr_of_Outside_Sales_People__c"); }
        }
        private System.Double? __NbrofPartsSalesc;
        [JsonProperty(PropertyName = "Nbr_of_Parts_Sales__c")]
        [EntityField(true)]
        public System.Double? NbrofPartsSalesc
        {
            get { return __NbrofPartsSalesc; }
            set { SetField(ref __NbrofPartsSalesc, value, "Nbr_of_Parts_Sales__c"); }
        }
        private System.Double? __NbrofServiceTechsc;
        [JsonProperty(PropertyName = "Nbr_of_Service_Techs__c")]
        [EntityField(true)]
        public System.Double? NbrofServiceTechsc
        {
            get { return __NbrofServiceTechsc; }
            set { SetField(ref __NbrofServiceTechsc, value, "Nbr_of_Service_Techs__c"); }
        }
        private System.Double? __NbrofTrainingClassesc;
        [JsonProperty(PropertyName = "Nbr_of_Training_Classes__c")]
        [EntityField(true)]
        public System.Double? NbrofTrainingClassesc
        {
            get { return __NbrofTrainingClassesc; }
            set { SetField(ref __NbrofTrainingClassesc, value, "Nbr_of_Training_Classes__c"); }
        }
        private System.String __OtherDetailsc;
        [JsonProperty(PropertyName = "Other_Details__c")]
        [EntityField(true)]
        public System.String OtherDetailsc
        {
            get { return __OtherDetailsc; }
            set { SetField(ref __OtherDetailsc, value, "Other_Details__c"); }
        }
        private System.Double? __OwnedServiceTrucksc;
        [JsonProperty(PropertyName = "Owned_Service_Trucks__c")]
        [EntityField(true)]
        public System.Double? OwnedServiceTrucksc
        {
            get { return __OwnedServiceTrucksc; }
            set { SetField(ref __OwnedServiceTrucksc, value, "Owned_Service_Trucks__c"); }
        }
        private System.String __PlanAmountThisFiscalYearc;
        [JsonProperty(PropertyName = "Plan_Amount_This_Fiscal_Year__c")]
        [EntityField(true)]
        public System.String PlanAmountThisFiscalYearc
        {
            get { return __PlanAmountThisFiscalYearc; }
            set { SetField(ref __PlanAmountThisFiscalYearc, value, "Plan_Amount_This_Fiscal_Year__c"); }
        }
        private System.String __PrimaryChannelc;
        [JsonProperty(PropertyName = "Primary_Channel__c")]
        [EntityField(true)]
        public System.String PrimaryChannelc
        {
            get { return __PrimaryChannelc; }
            set { SetField(ref __PrimaryChannelc, value, "Primary_Channel__c"); }
        }
        private PickAccountRelationshipStatus __RelationshipStatusc;
        [JsonProperty(PropertyName = "Relationship_Status__c")]
        [EntityField(true)]
        public PickAccountRelationshipStatus RelationshipStatusc
        {
            get { return __RelationshipStatusc; }
            set { SetField(ref __RelationshipStatusc, value, "Relationship_Status__c"); }
        }
        private System.String __Rgnc;
        [JsonProperty(PropertyName = "Rgn__c")]
        [EntityField(true)]
        public System.String Rgnc
        {
            get { return __Rgnc; }
            set { SetField(ref __Rgnc, value, "Rgn__c"); }
        }
        private System.Double? __ShowroomsSqFootagec;
        [JsonProperty(PropertyName = "Showrooms_Sq_Footage__c")]
        [EntityField(true)]
        public System.Double? ShowroomsSqFootagec
        {
            get { return __ShowroomsSqFootagec; }
            set { SetField(ref __ShowroomsSqFootagec, value, "Showrooms_Sq_Footage__c"); }
        }
        private System.DateTime? __SignOfffromManagementc;
        [JsonProperty(PropertyName = "Sign_Off_from_Management__c")]
        [EntityField(true)]
        public System.DateTime? SignOfffromManagementc
        {
            get { return __SignOfffromManagementc; }
            set { SetField(ref __SignOfffromManagementc, value, "Sign_Off_from_Management__c"); }
        }
        private System.Double? __StockingLocationSqFootagec;
        [JsonProperty(PropertyName = "Stocking_Location_Sq_Footage__c")]
        [EntityField(true)]
        public System.Double? StockingLocationSqFootagec
        {
            get { return __StockingLocationSqFootagec; }
            set { SetField(ref __StockingLocationSqFootagec, value, "Stocking_Location_Sq_Footage__c"); }
        }
        private System.String __TotEstChannelPartnerSizec;
        [JsonProperty(PropertyName = "Tot_Est_Channel_Partner_Size__c")]
        [EntityField(true)]
        public System.String TotEstChannelPartnerSizec
        {
            get { return __TotEstChannelPartnerSizec; }
            set { SetField(ref __TotEstChannelPartnerSizec, value, "Tot_Est_Channel_Partner_Size__c"); }
        }
        private System.String __fMyRoleonAcctc;
        [JsonProperty(PropertyName = "f_My_Role_on_Acct__c")]
        [EntityField(true)]
        public System.String fMyRoleonAcctc
        {
            get { return __fMyRoleonAcctc; }
        }
        private System.Double? __fNbrofServiceTrucksc;
        [JsonProperty(PropertyName = "f_Nbr_of_Service_Trucks__c")]
        [EntityField(true)]
        public System.Double? fNbrofServiceTrucksc
        {
            get { return __fNbrofServiceTrucksc; }
        }
        private System.String __fParent1c;
        [JsonProperty(PropertyName = "f_Parent_1__c")]
        [EntityField(true)]
        public System.String fParent1c
        {
            get { return __fParent1c; }
        }
        private System.String __fParent2c;
        [JsonProperty(PropertyName = "f_Parent_2__c")]
        [EntityField(true)]
        public System.String fParent2c
        {
            get { return __fParent2c; }
        }
        private System.String __fParent3c;
        [JsonProperty(PropertyName = "f_Parent_3__c")]
        [EntityField(true)]
        public System.String fParent3c
        {
            get { return __fParent3c; }
        }
        private System.String __fParent4c;
        [JsonProperty(PropertyName = "f_Parent_4__c")]
        [EntityField(true)]
        public System.String fParent4c
        {
            get { return __fParent4c; }
        }
        private System.String __fParent5c;
        [JsonProperty(PropertyName = "f_Parent_5__c")]
        [EntityField(true)]
        public System.String fParent5c
        {
            get { return __fParent5c; }
        }
        private System.String __fParent6c;
        [JsonProperty(PropertyName = "f_Parent_6__c")]
        [EntityField(true)]
        public System.String fParent6c
        {
            get { return __fParent6c; }
        }
        private System.String __fParent7c;
        [JsonProperty(PropertyName = "f_Parent_7__c")]
        [EntityField(true)]
        public System.String fParent7c
        {
            get { return __fParent7c; }
        }
        private System.Double? __NbrofLocationsc;
        [JsonProperty(PropertyName = "Nbr_of_Locations__c")]
        [EntityField(true)]
        public System.Double? NbrofLocationsc
        {
            get { return __NbrofLocationsc; }
        }
        private System.Double? __sNbrofAcctTeamMembersc;
        [JsonProperty(PropertyName = "s_Nbr_of_Acct_Team_Members__c")]
        [EntityField(true)]
        public System.Double? sNbrofAcctTeamMembersc
        {
            get { return __sNbrofAcctTeamMembersc; }
        }
        private System.String __AccountCaseInsensitiveIdc;
        [JsonProperty(PropertyName = "Account_Case_Insensitive_Id__c")]
        [EntityField(true)]
        public System.String AccountCaseInsensitiveIdc
        {
            get { return __AccountCaseInsensitiveIdc; }
        }
        private System.String __AlwaysRequireCertainBrandc;
        [JsonProperty(PropertyName = "Always_Require_Certain_Brand__c")]
        [EntityField(true)]
        public System.String AlwaysRequireCertainBrandc
        {
            get { return __AlwaysRequireCertainBrandc; }
            set { SetField(ref __AlwaysRequireCertainBrandc, value, "Always_Require_Certain_Brand__c"); }
        }
        private System.String __AnnualPartsRevenuec;
        [JsonProperty(PropertyName = "Annual_Parts_Revenue__c")]
        [EntityField(true)]
        public System.String AnnualPartsRevenuec
        {
            get { return __AnnualPartsRevenuec; }
            set { SetField(ref __AnnualPartsRevenuec, value, "Annual_Parts_Revenue__c"); }
        }
        private System.String __AnnualValueofRelationshipc;
        [JsonProperty(PropertyName = "Annual_Value_of_Relationship__c")]
        [EntityField(true)]
        public System.String AnnualValueofRelationshipc
        {
            get { return __AnnualValueofRelationshipc; }
            set { SetField(ref __AnnualValueofRelationshipc, value, "Annual_Value_of_Relationship__c"); }
        }
        private System.String __ApplicableHistoryc;
        [JsonProperty(PropertyName = "Applicable_History__c")]
        [EntityField(true)]
        public System.String ApplicableHistoryc
        {
            get { return __ApplicableHistoryc; }
            set { SetField(ref __ApplicableHistoryc, value, "Applicable_History__c"); }
        }
        private System.String __AppliedSystemsMarketc;
        [JsonProperty(PropertyName = "Applied_Systems_Market__c")]
        [EntityField(true)]
        public System.String AppliedSystemsMarketc
        {
            get { return __AppliedSystemsMarketc; }
            set { SetField(ref __AppliedSystemsMarketc, value, "Applied_Systems_Market__c"); }
        }
        private System.String __AppliedSystemsRgnc;
        [JsonProperty(PropertyName = "Applied_Systems_Rgn__c")]
        [EntityField(true)]
        public System.String AppliedSystemsRgnc
        {
            get { return __AppliedSystemsRgnc; }
            set { SetField(ref __AppliedSystemsRgnc, value, "Applied_Systems_Rgn__c"); }
        }
        private PickAccountAreaOfExpertise __AreaofExpertisec;
        [JsonProperty(PropertyName = "Area_of_Expertise__c")]
        [EntityField(true)]
        public PickAccountAreaOfExpertise AreaofExpertisec
        {
            get { return __AreaofExpertisec; }
            set { SetField(ref __AreaofExpertisec, value, "Area_of_Expertise__c"); }
        }
        private System.String __Associationsc;
        [JsonProperty(PropertyName = "Associations__c")]
        [EntityField(true)]
        public System.String Associationsc
        {
            get { return __Associationsc; }
            set { SetField(ref __Associationsc, value, "Associations__c"); }
        }
        private System.String __ControlsProductsMarketc;
        [JsonProperty(PropertyName = "Controls_Products_Market__c")]
        [EntityField(true)]
        public System.String ControlsProductsMarketc
        {
            get { return __ControlsProductsMarketc; }
            set { SetField(ref __ControlsProductsMarketc, value, "Controls_Products_Market__c"); }
        }
        private System.String __ControlsProductsRgnc;
        [JsonProperty(PropertyName = "Controls_Products_Rgn__c")]
        [EntityField(true)]
        public System.String ControlsProductsRgnc
        {
            get { return __ControlsProductsRgnc; }
            set { SetField(ref __ControlsProductsRgnc, value, "Controls_Products_Rgn__c"); }
        }
        private PickAccountExclusiveOwnerRelationships __ExclusiveOwnerRelationshipsc;
        [JsonProperty(PropertyName = "Exclusive_Owner_Relationships__c")]
        [EntityField(true)]
        public PickAccountExclusiveOwnerRelationships ExclusiveOwnerRelationshipsc
        {
            get { return __ExclusiveOwnerRelationshipsc; }
            set { SetField(ref __ExclusiveOwnerRelationshipsc, value, "Exclusive_Owner_Relationships__c"); }
        }
        private System.String __HartCooleyMarketc;
        [JsonProperty(PropertyName = "Hart_Cooley_Market__c")]
        [EntityField(true)]
        public System.String HartCooleyMarketc
        {
            get { return __HartCooleyMarketc; }
            set { SetField(ref __HartCooleyMarketc, value, "Hart_Cooley_Market__c"); }
        }
        private System.String __HartCooleyRgnc;
        [JsonProperty(PropertyName = "Hart_Cooley_Rgn__c")]
        [EntityField(true)]
        public System.String HartCooleyRgnc
        {
            get { return __HartCooleyRgnc; }
            set { SetField(ref __HartCooleyRgnc, value, "Hart_Cooley_Rgn__c"); }
        }
        private System.DateTime? __InBusSincec;
        [JsonProperty(PropertyName = "In_Bus_Since__c")]
        [EntityField(true)]
        public System.DateTime? InBusSincec
        {
            get { return __InBusSincec; }
            set { SetField(ref __InBusSincec, value, "In_Bus_Since__c"); }
        }
        private System.Boolean __IsWarehousewithInventoryc;
        [JsonProperty(PropertyName = "Is_Warehouse_with_Inventory__c")]
        [EntityField(false)]
        public System.Boolean IsWarehousewithInventoryc
        {
            get { return __IsWarehousewithInventoryc; }
            set { SetField(ref __IsWarehousewithInventoryc, value, "Is_Warehouse_with_Inventory__c"); }
        }
        private System.String __KochMarketc;
        [JsonProperty(PropertyName = "Koch_Market__c")]
        [EntityField(true)]
        public System.String KochMarketc
        {
            get { return __KochMarketc; }
            set { SetField(ref __KochMarketc, value, "Koch_Market__c"); }
        }
        private System.String __KochRgnc;
        [JsonProperty(PropertyName = "Koch_Rgn__c")]
        [EntityField(true)]
        public System.String KochRgnc
        {
            get { return __KochRgnc; }
            set { SetField(ref __KochRgnc, value, "Koch_Rgn__c"); }
        }
        private System.String __KruegerMarketc;
        [JsonProperty(PropertyName = "Krueger_Market__c")]
        [EntityField(true)]
        public System.String KruegerMarketc
        {
            get { return __KruegerMarketc; }
            set { SetField(ref __KruegerMarketc, value, "Krueger_Market__c"); }
        }
        private System.String __KruegerRgnc;
        [JsonProperty(PropertyName = "Krueger_Rgn__c")]
        [EntityField(true)]
        public System.String KruegerRgnc
        {
            get { return __KruegerRgnc; }
            set { SetField(ref __KruegerRgnc, value, "Krueger_Rgn__c"); }
        }
        private System.String __MarketMappingc;
        [JsonProperty(PropertyName = "Market_Mapping__c")]
        [EntityField(true)]
        public System.String MarketMappingc
        {
            get { return __MarketMappingc; }
            set { SetField(ref __MarketMappingc, value, "Market_Mapping__c"); }
        }
        private System.String __NegativeExperiencewithBrandsc;
        [JsonProperty(PropertyName = "Negative_Experience_with_Brands__c")]
        [EntityField(true)]
        public System.String NegativeExperiencewithBrandsc
        {
            get { return __NegativeExperiencewithBrandsc; }
            set { SetField(ref __NegativeExperiencewithBrandsc, value, "Negative_Experience_with_Brands__c"); }
        }
        private System.String __OwnerPreferencesc;
        [JsonProperty(PropertyName = "Owner_Preferences__c")]
        [EntityField(true)]
        public System.String OwnerPreferencesc
        {
            get { return __OwnerPreferencesc; }
            set { SetField(ref __OwnerPreferencesc, value, "Owner_Preferences__c"); }
        }
        private System.String __PennBarryMarketc;
        [JsonProperty(PropertyName = "PennBarry_Market__c")]
        [EntityField(true)]
        public System.String PennBarryMarketc
        {
            get { return __PennBarryMarketc; }
            set { SetField(ref __PennBarryMarketc, value, "PennBarry_Market__c"); }
        }
        private System.String __PennBarryRgnc;
        [JsonProperty(PropertyName = "PennBarry_Rgn__c")]
        [EntityField(true)]
        public System.String PennBarryRgnc
        {
            get { return __PennBarryRgnc; }
            set { SetField(ref __PennBarryRgnc, value, "PennBarry_Rgn__c"); }
        }
        private System.DateTime? __RelatedtoChannelPartnerSincec;
        [JsonProperty(PropertyName = "Related_to_Channel_Partner_Since__c")]
        [EntityField(true)]
        public System.DateTime? RelatedtoChannelPartnerSincec
        {
            get { return __RelatedtoChannelPartnerSincec; }
            set { SetField(ref __RelatedtoChannelPartnerSincec, value, "Related_to_Channel_Partner_Since__c"); }
        }
        private System.String __RuskinMarketc;
        [JsonProperty(PropertyName = "Ruskin_Market__c")]
        [EntityField(true)]
        public System.String RuskinMarketc
        {
            get { return __RuskinMarketc; }
            set { SetField(ref __RuskinMarketc, value, "Ruskin_Market__c"); }
        }
        private System.String __RuskinRgnc;
        [JsonProperty(PropertyName = "Ruskin_Rgn__c")]
        [EntityField(true)]
        public System.String RuskinRgnc
        {
            get { return __RuskinRgnc; }
            set { SetField(ref __RuskinRgnc, value, "Ruskin_Rgn__c"); }
        }
        private System.String __SSNAMarketc;
        [JsonProperty(PropertyName = "SSNA_Market__c")]
        [EntityField(true)]
        public System.String SSNAMarketc
        {
            get { return __SSNAMarketc; }
            set { SetField(ref __SSNAMarketc, value, "SSNA_Market__c"); }
        }
        private System.String __SSNARgnc;
        [JsonProperty(PropertyName = "SSNA_Rgn__c")]
        [EntityField(true)]
        public System.String SSNARgnc
        {
            get { return __SSNARgnc; }
            set { SetField(ref __SSNARgnc, value, "SSNA_Rgn__c"); }
        }
        private System.String __ServiceandManufacturerAlignmentc;
        [JsonProperty(PropertyName = "Service_and_Manufacturer_Alignment__c")]
        [EntityField(true)]
        public System.String ServiceandManufacturerAlignmentc
        {
            get { return __ServiceandManufacturerAlignmentc; }
            set { SetField(ref __ServiceandManufacturerAlignmentc, value, "Service_and_Manufacturer_Alignment__c"); }
        }
        private PickAccountSizeOfTypicalProject __SizeofTypicalProjectc;
        [JsonProperty(PropertyName = "Size_of_Typical_Project__c")]
        [EntityField(true)]
        public PickAccountSizeOfTypicalProject SizeofTypicalProjectc
        {
            get { return __SizeofTypicalProjectc; }
            set { SetField(ref __SizeofTypicalProjectc, value, "Size_of_Typical_Project__c"); }
        }
        private System.String __TitusMarketc;
        [JsonProperty(PropertyName = "Titus_Market__c")]
        [EntityField(true)]
        public System.String TitusMarketc
        {
            get { return __TitusMarketc; }
            set { SetField(ref __TitusMarketc, value, "Titus_Market__c"); }
        }
        private System.String __TitusRgnc;
        [JsonProperty(PropertyName = "Titus_Rgn__c")]
        [EntityField(true)]
        public System.String TitusRgnc
        {
            get { return __TitusRgnc; }
            set { SetField(ref __TitusRgnc, value, "Titus_Rgn__c"); }
        }
        private System.String __TrionMarketc;
        [JsonProperty(PropertyName = "Trion_Market__c")]
        [EntityField(true)]
        public System.String TrionMarketc
        {
            get { return __TrionMarketc; }
            set { SetField(ref __TrionMarketc, value, "Trion_Market__c"); }
        }
        private System.String __TrionRgnc;
        [JsonProperty(PropertyName = "Trion_Rgn__c")]
        [EntityField(true)]
        public System.String TrionRgnc
        {
            get { return __TrionRgnc; }
            set { SetField(ref __TrionRgnc, value, "Trion_Rgn__c"); }
        }
        private System.String __TuttleBaileyMarketc;
        [JsonProperty(PropertyName = "Tuttle_Bailey_Market__c")]
        [EntityField(true)]
        public System.String TuttleBaileyMarketc
        {
            get { return __TuttleBaileyMarketc; }
            set { SetField(ref __TuttleBaileyMarketc, value, "Tuttle_Bailey_Market__c"); }
        }
        private System.String __TuttleBaileyRgnc;
        [JsonProperty(PropertyName = "Tuttle_Bailey_Rgn__c")]
        [EntityField(true)]
        public System.String TuttleBaileyRgnc
        {
            get { return __TuttleBaileyRgnc; }
            set { SetField(ref __TuttleBaileyRgnc, value, "Tuttle_Bailey_Rgn__c"); }
        }
        private System.String __TypeofOwnerc;
        [JsonProperty(PropertyName = "Type_of_Owner__c")]
        [EntityField(true)]
        public System.String TypeofOwnerc
        {
            get { return __TypeofOwnerc; }
            set { SetField(ref __TypeofOwnerc, value, "Type_of_Owner__c"); }
        }
        private System.String __UPGMarketc;
        [JsonProperty(PropertyName = "UPG_Market__c")]
        [EntityField(true)]
        public System.String UPGMarketc
        {
            get { return __UPGMarketc; }
            set { SetField(ref __UPGMarketc, value, "UPG_Market__c"); }
        }
        private System.String __UPGRgnc;
        [JsonProperty(PropertyName = "UPG_Rgn__c")]
        [EntityField(true)]
        public System.String UPGRgnc
        {
            get { return __UPGRgnc; }
            set { SetField(ref __UPGRgnc, value, "UPG_Rgn__c"); }
        }
        private System.String __VRFMarketc;
        [JsonProperty(PropertyName = "VRF_Market__c")]
        [EntityField(true)]
        public System.String VRFMarketc
        {
            get { return __VRFMarketc; }
            set { SetField(ref __VRFMarketc, value, "VRF_Market__c"); }
        }
        private System.String __VRFRgnc;
        [JsonProperty(PropertyName = "VRF_Rgn__c")]
        [EntityField(true)]
        public System.String VRFRgnc
        {
            get { return __VRFRgnc; }
            set { SetField(ref __VRFRgnc, value, "VRF_Rgn__c"); }
        }
        private PickAccountVerticalFocus __VerticalFocusc;
        [JsonProperty(PropertyName = "Vertical_Focus__c")]
        [EntityField(true)]
        public PickAccountVerticalFocus VerticalFocusc
        {
            get { return __VerticalFocusc; }
            set { SetField(ref __VerticalFocusc, value, "Vertical_Focus__c"); }
        }
        private System.Double? __fNbrofLocationsc;
        [JsonProperty(PropertyName = "f_Nbr_of_Locations__c")]
        [EntityField(true)]
        public System.Double? fNbrofLocationsc
        {
            get { return __fNbrofLocationsc; }
        }
        private System.String __ChangeOwnerc;
        [JsonProperty(PropertyName = "Change_Owner__c")]
        [EntityField(true)]
        public System.String ChangeOwnerc
        {
            get { return __ChangeOwnerc; }
            set { SetField(ref __ChangeOwnerc, value, "Change_Owner__c"); }
        }
        private System.String __fOwnerc;
        [JsonProperty(PropertyName = "f_Owner__c")]
        [EntityField(true)]
        public System.String fOwnerc
        {
            get { return __fOwnerc; }
        }
        private System.String __LParent1c;
        [JsonProperty(PropertyName = "L_Parent_1__c")]
        [EntityField(true)]
        public System.String LParent1c
        {
            get { return __LParent1c; }
            set { SetField(ref __LParent1c, value, "L_Parent_1__c"); }
        }
        private System.String __LParent2c;
        [JsonProperty(PropertyName = "L_Parent_2__c")]
        [EntityField(true)]
        public System.String LParent2c
        {
            get { return __LParent2c; }
            set { SetField(ref __LParent2c, value, "L_Parent_2__c"); }
        }
        private PickAccountHierarchyType __HierarchyTypec;
        [JsonProperty(PropertyName = "Hierarchy_Type__c")]
        [EntityField(true)]
        public PickAccountHierarchyType HierarchyTypec
        {
            get { return __HierarchyTypec; }
            set { SetField(ref __HierarchyTypec, value, "Hierarchy_Type__c"); }
        }
        private System.String __MasterParentc;
        [JsonProperty(PropertyName = "Master_Parent__c")]
        [EntityField(true)]
        public System.String MasterParentc
        {
            get { return __MasterParentc; }
            set { SetField(ref __MasterParentc, value, "Master_Parent__c"); }
        }
        private System.String __LParent3c;
        [JsonProperty(PropertyName = "L_Parent_3__c")]
        [EntityField(true)]
        public System.String LParent3c
        {
            get { return __LParent3c; }
            set { SetField(ref __LParent3c, value, "L_Parent_3__c"); }
        }
        private System.String __LParent4c;
        [JsonProperty(PropertyName = "L_Parent_4__c")]
        [EntityField(true)]
        public System.String LParent4c
        {
            get { return __LParent4c; }
            set { SetField(ref __LParent4c, value, "L_Parent_4__c"); }
        }
        private System.String __LParent5c;
        [JsonProperty(PropertyName = "L_Parent_5__c")]
        [EntityField(true)]
        public System.String LParent5c
        {
            get { return __LParent5c; }
            set { SetField(ref __LParent5c, value, "L_Parent_5__c"); }
        }
        private System.String __LParent6c;
        [JsonProperty(PropertyName = "L_Parent_6__c")]
        [EntityField(true)]
        public System.String LParent6c
        {
            get { return __LParent6c; }
            set { SetField(ref __LParent6c, value, "L_Parent_6__c"); }
        }
        private System.String __LParent7c;
        [JsonProperty(PropertyName = "L_Parent_7__c")]
        [EntityField(true)]
        public System.String LParent7c
        {
            get { return __LParent7c; }
            set { SetField(ref __LParent7c, value, "L_Parent_7__c"); }
        }
        private System.Boolean __WalkerAccountReportc;
        [JsonProperty(PropertyName = "Walker_Account_Report__c")]
        [EntityField(false)]
        public System.Boolean WalkerAccountReportc
        {
            get { return __WalkerAccountReportc; }
            set { SetField(ref __WalkerAccountReportc, value, "Walker_Account_Report__c"); }
        }
        private System.String __WalkerReportLinkc;
        [JsonProperty(PropertyName = "Walker_Report_Link__c")]
        [EntityField(true)]
        public System.String WalkerReportLinkc
        {
            get { return __WalkerReportLinkc; }
        }
        private System.String __ExecutiveSponsorc;
        [JsonProperty(PropertyName = "Executive_Sponsor__c")]
        [EntityField(true)]
        public System.String ExecutiveSponsorc
        {
            get { return __ExecutiveSponsorc; }
            set { SetField(ref __ExecutiveSponsorc, value, "Executive_Sponsor__c"); }
        }
        private System.String __NACAccountOwnerc;
        [JsonProperty(PropertyName = "NAC_Account_Owner__c")]
        [EntityField(true)]
        public System.String NACAccountOwnerc
        {
            get { return __NACAccountOwnerc; }
            set { SetField(ref __NACAccountOwnerc, value, "NAC_Account_Owner__c"); }
        }
        private System.String __AccountRecordTypeIdDuplicateCheckc;
        [JsonProperty(PropertyName = "Account_Record_Type_Id_Duplicate_Check__c")]
        [EntityField(true)]
        public System.String AccountRecordTypeIdDuplicateCheckc
        {
            get { return __AccountRecordTypeIdDuplicateCheckc; }
            set { SetField(ref __AccountRecordTypeIdDuplicateCheckc, value, "Account_Record_Type_Id_Duplicate_Check__c"); }
        }
        private System.String __AccountSiteDatacomc;
        [JsonProperty(PropertyName = "Account_Site_Data_com__c")]
        [EntityField(true)]
        public System.String AccountSiteDatacomc
        {
            get { return __AccountSiteDatacomc; }
            set { SetField(ref __AccountSiteDatacomc, value, "Account_Site_Data_com__c"); }
        }
        private System.Double? __AccountSizec;
        [JsonProperty(PropertyName = "Account_Size__c")]
        [EntityField(true)]
        public System.Double? AccountSizec
        {
            get { return __AccountSizec; }
            set { SetField(ref __AccountSizec, value, "Account_Size__c"); }
        }
        private System.String __AnnualRevenueGrowthc;
        [JsonProperty(PropertyName = "Annual_Revenue_Growth__c")]
        [EntityField(true)]
        public System.String AnnualRevenueGrowthc
        {
            get { return __AnnualRevenueGrowthc; }
            set { SetField(ref __AnnualRevenueGrowthc, value, "Annual_Revenue_Growth__c"); }
        }
        private System.String __DBANamec;
        [JsonProperty(PropertyName = "DBA_Name__c")]
        [EntityField(true)]
        public System.String DBANamec
        {
            get { return __DBANamec; }
            set { SetField(ref __DBANamec, value, "DBA_Name__c"); }
        }
        private System.Double? __EmployeeGrowthc;
        [JsonProperty(PropertyName = "Employee_Growth__c")]
        [EntityField(true)]
        public System.Double? EmployeeGrowthc
        {
            get { return __EmployeeGrowthc; }
            set { SetField(ref __EmployeeGrowthc, value, "Employee_Growth__c"); }
        }
        private System.Double? __Fortune1000Rankc;
        [JsonProperty(PropertyName = "Fortune_1000_Rank__c")]
        [EntityField(true)]
        public System.Double? Fortune1000Rankc
        {
            get { return __Fortune1000Rankc; }
            set { SetField(ref __Fortune1000Rankc, value, "Fortune_1000_Rank__c"); }
        }
        private System.Double? __PriorYearNumberofEmployeesc;
        [JsonProperty(PropertyName = "Prior_Year_Number_of_Employees__c")]
        [EntityField(true)]
        public System.Double? PriorYearNumberofEmployeesc
        {
            get { return __PriorYearNumberofEmployeesc; }
            set { SetField(ref __PriorYearNumberofEmployeesc, value, "Prior_Year_Number_of_Employees__c"); }
        }
        private System.String __PriorYearRevenuec;
        [JsonProperty(PropertyName = "Prior_Year_Revenue__c")]
        [EntityField(true)]
        public System.String PriorYearRevenuec
        {
            get { return __PriorYearRevenuec; }
            set { SetField(ref __PriorYearRevenuec, value, "Prior_Year_Revenue__c"); }
        }
        private System.String __SP500c;
        [JsonProperty(PropertyName = "S_P_500__c")]
        [EntityField(true)]
        public System.String SP500c
        {
            get { return __SP500c; }
            set { SetField(ref __SP500c, value, "S_P_500__c"); }
        }
        private System.String __SizeAccuracyc;
        [JsonProperty(PropertyName = "Size_Accuracy__c")]
        [EntityField(true)]
        public System.String SizeAccuracyc
        {
            get { return __SizeAccuracyc; }
            set { SetField(ref __SizeAccuracyc, value, "Size_Accuracy__c"); }
        }
        private System.String __SizeUnitofMeasurec;
        [JsonProperty(PropertyName = "Size_Unit_of_Measure__c")]
        [EntityField(true)]
        public System.String SizeUnitofMeasurec
        {
            get { return __SizeUnitofMeasurec; }
            set { SetField(ref __SizeUnitofMeasurec, value, "Size_Unit_of_Measure__c"); }
        }
        private PickAccountCountyEu __Countyeuc;
        [JsonProperty(PropertyName = "County_eu__c")]
        [EntityField(true)]
        public PickAccountCountyEu Countyeuc
        {
            get { return __Countyeuc; }
            set { SetField(ref __Countyeuc, value, "County_eu__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private System.String __ActualCFYAmountc;
        [JsonProperty(PropertyName = "Actual_CFY_Amount__c")]
        [EntityField(true)]
        public System.String ActualCFYAmountc
        {
            get { return __ActualCFYAmountc; }
        }
        private System.String __ActualCFYCostc;
        [JsonProperty(PropertyName = "Actual_CFY_Cost__c")]
        [EntityField(true)]
        public System.String ActualCFYCostc
        {
            get { return __ActualCFYCostc; }
        }
        private System.Double? __ActualCFYQuantityc;
        [JsonProperty(PropertyName = "Actual_CFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualCFYQuantityc
        {
            get { return __ActualCFYQuantityc; }
        }
        private System.String __ActualPFYAmountc;
        [JsonProperty(PropertyName = "Actual_PFY_Amount__c")]
        [EntityField(true)]
        public System.String ActualPFYAmountc
        {
            get { return __ActualPFYAmountc; }
        }
        private System.String __ActualPFYCostc;
        [JsonProperty(PropertyName = "Actual_PFY_Cost__c")]
        [EntityField(true)]
        public System.String ActualPFYCostc
        {
            get { return __ActualPFYCostc; }
        }
        private System.Double? __ActualPFYQuantityc;
        [JsonProperty(PropertyName = "Actual_PFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualPFYQuantityc
        {
            get { return __ActualPFYQuantityc; }
        }
        private System.String __ActualYBLAmountc;
        [JsonProperty(PropertyName = "Actual_YBL_Amount__c")]
        [EntityField(true)]
        public System.String ActualYBLAmountc
        {
            get { return __ActualYBLAmountc; }
        }
        private System.String __ActualYBLCostc;
        [JsonProperty(PropertyName = "Actual_YBL_Cost__c")]
        [EntityField(true)]
        public System.String ActualYBLCostc
        {
            get { return __ActualYBLCostc; }
        }
        private System.Double? __ActualYBLQuantityc;
        [JsonProperty(PropertyName = "Actual_YBL_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualYBLQuantityc
        {
            get { return __ActualYBLQuantityc; }
        }
        private System.Double? __JCIFamilyBrandsc;
        [JsonProperty(PropertyName = "JCI_Family_Brands__c")]
        [EntityField(true)]
        public System.Double? JCIFamilyBrandsc
        {
            get { return __JCIFamilyBrandsc; }
        }
        private System.String __PlannedCFYAmountc;
        [JsonProperty(PropertyName = "Planned_CFY_Amount__c")]
        [EntityField(true)]
        public System.String PlannedCFYAmountc
        {
            get { return __PlannedCFYAmountc; }
        }
        private System.String __PlannedCFYCostc;
        [JsonProperty(PropertyName = "Planned_CFY_Cost__c")]
        [EntityField(true)]
        public System.String PlannedCFYCostc
        {
            get { return __PlannedCFYCostc; }
        }
        private System.Double? __PlannedCFYQuantityc;
        [JsonProperty(PropertyName = "Planned_CFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedCFYQuantityc
        {
            get { return __PlannedCFYQuantityc; }
        }
        private System.String __HitachiVRFMarketc;
        [JsonProperty(PropertyName = "Hitachi_VRF_Market__c")]
        [EntityField(true)]
        public System.String HitachiVRFMarketc
        {
            get { return __HitachiVRFMarketc; }
            set { SetField(ref __HitachiVRFMarketc, value, "Hitachi_VRF_Market__c"); }
        }
        private System.String __HitachiVRFRegionc;
        [JsonProperty(PropertyName = "Hitachi_VRF_Region__c")]
        [EntityField(true)]
        public System.String HitachiVRFRegionc
        {
            get { return __HitachiVRFRegionc; }
            set { SetField(ref __HitachiVRFRegionc, value, "Hitachi_VRF_Region__c"); }
        }
        private System.String __SMEUCommercialCityc;
        [JsonProperty(PropertyName = "SM_EU_Commercial_City__c")]
        [EntityField(true)]
        public System.String SMEUCommercialCityc
        {
            get { return __SMEUCommercialCityc; }
            set { SetField(ref __SMEUCommercialCityc, value, "SM_EU_Commercial_City__c"); }
        }
        private System.Double? __SMEUUpdateCreditLimitCountc;
        [JsonProperty(PropertyName = "SM_EU_Update_Credit_Limit_Count__c")]
        [EntityField(true)]
        public System.Double? SMEUUpdateCreditLimitCountc
        {
            get { return __SMEUUpdateCreditLimitCountc; }
            set { SetField(ref __SMEUUpdateCreditLimitCountc, value, "SM_EU_Update_Credit_Limit_Count__c"); }
        }
        private System.String __SMEUCommercialStatec;
        [JsonProperty(PropertyName = "SM_EU_Commercial_State__c")]
        [EntityField(true)]
        public System.String SMEUCommercialStatec
        {
            get { return __SMEUCommercialStatec; }
            set { SetField(ref __SMEUCommercialStatec, value, "SM_EU_Commercial_State__c"); }
        }
        private System.String __SMEUCommercialStreetAddress1c;
        [JsonProperty(PropertyName = "SM_EU_Commercial_Street_Address_1__c")]
        [EntityField(true)]
        public System.String SMEUCommercialStreetAddress1c
        {
            get { return __SMEUCommercialStreetAddress1c; }
            set { SetField(ref __SMEUCommercialStreetAddress1c, value, "SM_EU_Commercial_Street_Address_1__c"); }
        }
        private System.String __SMEUCommercialStreetAddress2c;
        [JsonProperty(PropertyName = "SM_EU_Commercial_Street_Address_2__c")]
        [EntityField(true)]
        public System.String SMEUCommercialStreetAddress2c
        {
            get { return __SMEUCommercialStreetAddress2c; }
            set { SetField(ref __SMEUCommercialStreetAddress2c, value, "SM_EU_Commercial_Street_Address_2__c"); }
        }
        private System.String __SMEUCommercialZipPostalCodec;
        [JsonProperty(PropertyName = "SM_EU_Commercial_Zip_Postal_Code__c")]
        [EntityField(true)]
        public System.String SMEUCommercialZipPostalCodec
        {
            get { return __SMEUCommercialZipPostalCodec; }
            set { SetField(ref __SMEUCommercialZipPostalCodec, value, "SM_EU_Commercial_Zip_Postal_Code__c"); }
        }
        private PickAccountSMEUCommercialCountry __SMEUCommercialCountryc;
        [JsonProperty(PropertyName = "SM_EU_Commercial_Country__c")]
        [EntityField(true)]
        public PickAccountSMEUCommercialCountry SMEUCommercialCountryc
        {
            get { return __SMEUCommercialCountryc; }
            set { SetField(ref __SMEUCommercialCountryc, value, "SM_EU_Commercial_Country__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_1__c")]
        public RelationShip<Account,Account> Parent1__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_2__c")]
        public RelationShip<Account,Account> Parent2__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_3__c")]
        public RelationShip<Account,Account> Parent3__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_4__c")]
        public RelationShip<Account,Account> Parent4__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_5__c")]
        public RelationShip<Account,Account> Parent5__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_6__c")]
        public RelationShip<Account,Account> Parent6__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("L_Parent_7__c")]
        public RelationShip<Account,Account> Parent7__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Master_Parent__c")]
        public RelationShip<Account,Account> MasterAccounts__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,Account> ChildAccounts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Acct__c")]
        public RelationShip<Account,AccountTeam> Account_Teams__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account__c")]
        public RelationShip<Account,ActionPlan> Action_Plans__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Acct__c")]
        public RelationShip<Account,BillTo> SSNA_Bill_Tos__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account_to_Merge_With__c")]
        public RelationShip<Account,Case> Cases__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account_Name__c")]
        public RelationShip<Account,ChannelChange> Channel_Changes__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account__c")]
        public RelationShip<Account,ChannelLineCard> Channel_Line_Cards__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Contact> Contacts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Acct__c")]
        public RelationShip<Account,CustGoal> Customer_Goals__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Account,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account__c")]
        public RelationShip<Account,Financial> Financials__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Acct__c")]
        public RelationShip<Account,JCIBrand> JCI_Brands__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Assigned_Channel_Partner__c")]
        public RelationShip<Account,Lead> AssignedLeads__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Opportunity> Opportunities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Awarded_To__c")]
        public RelationShip<Account,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Engineer__c")]
        public RelationShip<Account,Opportunity> Opportunities1__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("General_Contractor__c")]
        public RelationShip<Account,Opportunity> Opportunities2__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Acct__c")]
        public RelationShip<Account,ProductLine> Product_Lines__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Acct__c")]
        public RelationShip<Account,StrategicGoal> Strategic_Goals__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Account,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Account,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Account_Team_Brand__Tag")]
    public class AccountTeamBrandTag : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountTeamBrandTag(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountTeamBrandTag()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __TagDefinitionId;
        [EntityField(false)]
        public System.String TagDefinitionId
        {
            get { return __TagDefinitionId; }
            set { SetField(ref __TagDefinitionId, value, "TagDefinitionId"); }
        }
        private System.String __ItemId;
        [EntityField(false)]
        public System.String ItemId
        {
            get { return __ItemId; }
            set { SetField(ref __ItemId, value, "ItemId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickAccountTeamBrandTagType __Type;
        [EntityField(false)]
        public PickAccountTeamBrandTagType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
    }
    [EntityName("Account_Team__c")]
    public class AccountTeam : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountTeam(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountTeam()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickAccountTeamCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickAccountTeamCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Acctc;
        [JsonProperty(PropertyName = "Acct__c")]
        [EntityField(false)]
        public System.String Acctc
        {
            get { return __Acctc; }
            set { SetField(ref __Acctc, value, "Acct__c"); }
        }
        private PickAccountTeamAcctAccessLevel __AcctAccessLevelc;
        [JsonProperty(PropertyName = "Acct_Access_Level__c")]
        [EntityField(true)]
        public PickAccountTeamAcctAccessLevel AcctAccessLevelc
        {
            get { return __AcctAccessLevelc; }
            set { SetField(ref __AcctAccessLevelc, value, "Acct_Access_Level__c"); }
        }
        private PickAccountTeamCaseAccessLevel __CaseAccessLevelc;
        [JsonProperty(PropertyName = "Case_Access_Level__c")]
        [EntityField(true)]
        public PickAccountTeamCaseAccessLevel CaseAccessLevelc
        {
            get { return __CaseAccessLevelc; }
            set { SetField(ref __CaseAccessLevelc, value, "Case_Access_Level__c"); }
        }
        private PickAccountTeamContactAccessLevel __ContactAccessLevelc;
        [JsonProperty(PropertyName = "Contact_Access_Level__c")]
        [EntityField(true)]
        public PickAccountTeamContactAccessLevel ContactAccessLevelc
        {
            get { return __ContactAccessLevelc; }
            set { SetField(ref __ContactAccessLevelc, value, "Contact_Access_Level__c"); }
        }
        private PickAccountTeamOpportunityAccessLevel __OpportunityAccessLevelc;
        [JsonProperty(PropertyName = "Opportunity_Access_Level__c")]
        [EntityField(true)]
        public PickAccountTeamOpportunityAccessLevel OpportunityAccessLevelc
        {
            get { return __OpportunityAccessLevelc; }
            set { SetField(ref __OpportunityAccessLevelc, value, "Opportunity_Access_Level__c"); }
        }
        private PickAccountTeamRole __Rolec;
        [JsonProperty(PropertyName = "Role__c")]
        [EntityField(true)]
        public PickAccountTeamRole Rolec
        {
            get { return __Rolec; }
            set { SetField(ref __Rolec, value, "Role__c"); }
        }
        private System.String __TeamMemberc;
        [JsonProperty(PropertyName = "Team_Member__c")]
        [EntityField(true)]
        public System.String TeamMemberc
        {
            get { return __TeamMemberc; }
            set { SetField(ref __TeamMemberc, value, "Team_Member__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickAccountTeamBrand> __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickAccountTeamBrand> Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private PickAccountTeamSellingEntity __SellingEntityc;
        [JsonProperty(PropertyName = "Selling_Entity__c")]
        [EntityField(true)]
        public PickAccountTeamSellingEntity SellingEntityc
        {
            get { return __SellingEntityc; }
            set { SetField(ref __SellingEntityc, value, "Selling_Entity__c"); }
        }
        private System.Boolean __Activec;
        [JsonProperty(PropertyName = "Active__c")]
        [EntityField(false)]
        public System.Boolean Activec
        {
            get { return __Activec; }
            set { SetField(ref __Activec, value, "Active__c"); }
        }
        private System.DateTime? __EffectiveEndDatec;
        [JsonProperty(PropertyName = "Effective_End_Date__c")]
        [EntityField(true)]
        public System.DateTime? EffectiveEndDatec
        {
            get { return __EffectiveEndDatec; }
            set { SetField(ref __EffectiveEndDatec, value, "Effective_End_Date__c"); }
        }
        private System.DateTime? __EffectiveStartDatec;
        [JsonProperty(PropertyName = "Effective_Start_Date__c")]
        [EntityField(true)]
        public System.DateTime? EffectiveStartDatec
        {
            get { return __EffectiveStartDatec; }
            set { SetField(ref __EffectiveStartDatec, value, "Effective_Start_Date__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<AccountTeam,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("ActionPlan__c")]
    public class ActionPlan : ISalesforceEntity
    {
    [JsonConstructor]
        private ActionPlan(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ActionPlan()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickActionPlanCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickActionPlanCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __Accountc;
        [JsonProperty(PropertyName = "Account__c")]
        [EntityField(false)]
        public System.String Accountc
        {
            get { return __Accountc; }
            set { SetField(ref __Accountc, value, "Account__c"); }
        }
        private System.String __ActionPlanTemplatec;
        [JsonProperty(PropertyName = "Action_Plan_Template__c")]
        [EntityField(true)]
        public System.String ActionPlanTemplatec
        {
            get { return __ActionPlanTemplatec; }
            set { SetField(ref __ActionPlanTemplatec, value, "Action_Plan_Template__c"); }
        }
        private System.String __ActionPlanc;
        [JsonProperty(PropertyName = "Action_Plan__c")]
        [EntityField(true)]
        public System.String ActionPlanc
        {
            get { return __ActionPlanc; }
            set { SetField(ref __ActionPlanc, value, "Action_Plan__c"); }
        }
        private System.String __Campaignc;
        [JsonProperty(PropertyName = "Campaign__c")]
        [EntityField(true)]
        public System.String Campaignc
        {
            get { return __Campaignc; }
            set { SetField(ref __Campaignc, value, "Campaign__c"); }
        }
        private System.String __Casec;
        [JsonProperty(PropertyName = "Case__c")]
        [EntityField(true)]
        public System.String Casec
        {
            get { return __Casec; }
            set { SetField(ref __Casec, value, "Case__c"); }
        }
        private System.String __Contactc;
        [JsonProperty(PropertyName = "Contact__c")]
        [EntityField(true)]
        public System.String Contactc
        {
            get { return __Contactc; }
            set { SetField(ref __Contactc, value, "Contact__c"); }
        }
        private System.String __Contractc;
        [JsonProperty(PropertyName = "Contract__c")]
        [EntityField(true)]
        public System.String Contractc
        {
            get { return __Contractc; }
            set { SetField(ref __Contractc, value, "Contract__c"); }
        }
        private System.String __Descriptionc;
        [JsonProperty(PropertyName = "Description__c")]
        [EntityField(true)]
        public System.String Descriptionc
        {
            get { return __Descriptionc; }
            set { SetField(ref __Descriptionc, value, "Description__c"); }
        }
        private System.String __Leadc;
        [JsonProperty(PropertyName = "Lead__c")]
        [EntityField(true)]
        public System.String Leadc
        {
            get { return __Leadc; }
            set { SetField(ref __Leadc, value, "Lead__c"); }
        }
        private System.String __Opportunityc;
        [JsonProperty(PropertyName = "Opportunity__c")]
        [EntityField(true)]
        public System.String Opportunityc
        {
            get { return __Opportunityc; }
            set { SetField(ref __Opportunityc, value, "Opportunity__c"); }
        }
        private System.String __Rgnc;
        [JsonProperty(PropertyName = "Rgn__c")]
        [EntityField(true)]
        public System.String Rgnc
        {
            get { return __Rgnc; }
            set { SetField(ref __Rgnc, value, "Rgn__c"); }
        }
        private PickActionPlanSkipDay __SkipDayc;
        [JsonProperty(PropertyName = "SkipDay__c")]
        [EntityField(true)]
        public PickActionPlanSkipDay SkipDayc
        {
            get { return __SkipDayc; }
            set { SetField(ref __SkipDayc, value, "SkipDay__c"); }
        }
        private System.Boolean __SkipWeekendsc;
        [JsonProperty(PropertyName = "SkipWeekends__c")]
        [EntityField(false)]
        public System.Boolean SkipWeekendsc
        {
            get { return __SkipWeekendsc; }
            set { SetField(ref __SkipWeekendsc, value, "SkipWeekends__c"); }
        }
        private System.DateTime? __StartDatec;
        [JsonProperty(PropertyName = "StartDate__c")]
        [EntityField(true)]
        public System.DateTime? StartDatec
        {
            get { return __StartDatec; }
            set { SetField(ref __StartDatec, value, "StartDate__c"); }
        }
        private System.String __StrategicGoalc;
        [JsonProperty(PropertyName = "Strategic_Goal__c")]
        [EntityField(true)]
        public System.String StrategicGoalc
        {
            get { return __StrategicGoalc; }
            set { SetField(ref __StrategicGoalc, value, "Strategic_Goal__c"); }
        }
        private System.String __TaskRecordTypeIDc;
        [JsonProperty(PropertyName = "TaskRecordTypeID__c")]
        [EntityField(true)]
        public System.String TaskRecordTypeIDc
        {
            get { return __TaskRecordTypeIDc; }
            set { SetField(ref __TaskRecordTypeIDc, value, "TaskRecordTypeID__c"); }
        }
        private System.String __TaskStatusFormulac;
        [JsonProperty(PropertyName = "Task_Status_Formula__c")]
        [EntityField(true)]
        public System.String TaskStatusFormulac
        {
            get { return __TaskStatusFormulac; }
        }
        private System.String __WhatIdc;
        [JsonProperty(PropertyName = "WhatId__c")]
        [EntityField(true)]
        public System.String WhatIdc
        {
            get { return __WhatIdc; }
            set { SetField(ref __WhatIdc, value, "WhatId__c"); }
        }
        private System.Double? __Completedc;
        [JsonProperty(PropertyName = "Completed__c")]
        [EntityField(true)]
        public System.Double? Completedc
        {
            get { return __Completedc; }
        }
        private System.Double? __Totalc;
        [JsonProperty(PropertyName = "Total__c")]
        [EntityField(true)]
        public System.Double? Totalc
        {
            get { return __Totalc; }
        }
        private System.String __ExternalIdc;
        [JsonProperty(PropertyName = "External_Id__c")]
        [EntityField(true)]
        public System.String ExternalIdc
        {
            get { return __ExternalIdc; }
            set { SetField(ref __ExternalIdc, value, "External_Id__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Action_Plan__c")]
        public RelationShip<ActionPlan,ActionPlan> Action_Plans__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Action_Plan__c")]
        public RelationShip<ActionPlan,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ActionPlan,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("ActivityHistory")]
    public class ActivityHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ActivityHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ActivityHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.Boolean __IsTask;
        [EntityField(false)]
        public System.Boolean IsTask
        {
            get { return __IsTask; }
            set { SetField(ref __IsTask, value, "IsTask"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private System.String __OwnerId;
        [EntityField(true)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private PickActivityHistoryStatus __Status;
        [EntityField(true)]
        public PickActivityHistoryStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickActivityHistoryPriority __Priority;
        [EntityField(true)]
        public PickActivityHistoryPriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private PickActivityHistoryActivityType __ActivityType;
        [EntityField(true)]
        public PickActivityHistoryActivityType ActivityType
        {
            get { return __ActivityType; }
            set { SetField(ref __ActivityType, value, "ActivityType"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.Boolean __IsAllDayEvent;
        [EntityField(false)]
        public System.Boolean IsAllDayEvent
        {
            get { return __IsAllDayEvent; }
            set { SetField(ref __IsAllDayEvent, value, "IsAllDayEvent"); }
        }
        private System.Boolean __IsVisibleInSelfService;
        [EntityField(false)]
        public System.Boolean IsVisibleInSelfService
        {
            get { return __IsVisibleInSelfService; }
            set { SetField(ref __IsVisibleInSelfService, value, "IsVisibleInSelfService"); }
        }
        private System.Int32? __DurationInMinutes;
        [EntityField(true)]
        public System.Int32? DurationInMinutes
        {
            get { return __DurationInMinutes; }
            set { SetField(ref __DurationInMinutes, value, "DurationInMinutes"); }
        }
        private System.String __Location;
        [EntityField(true)]
        public System.String Location
        {
            get { return __Location; }
            set { SetField(ref __Location, value, "Location"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickActivityHistoryCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickActivityHistoryCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32? __CallDurationInSeconds;
        [EntityField(true)]
        public System.Int32? CallDurationInSeconds
        {
            get { return __CallDurationInSeconds; }
            set { SetField(ref __CallDurationInSeconds, value, "CallDurationInSeconds"); }
        }
        private PickActivityHistoryCallType __CallType;
        [EntityField(true)]
        public PickActivityHistoryCallType CallType
        {
            get { return __CallType; }
            set { SetField(ref __CallType, value, "CallType"); }
        }
        private System.String __CallDisposition;
        [EntityField(true)]
        public System.String CallDisposition
        {
            get { return __CallDisposition; }
            set { SetField(ref __CallDisposition, value, "CallDisposition"); }
        }
        private System.String __CallObject;
        [EntityField(true)]
        public System.String CallObject
        {
            get { return __CallObject; }
            set { SetField(ref __CallObject, value, "CallObject"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        private System.DateTime? __EndDateTime;
        [EntityField(true)]
        public System.DateTime? EndDateTime
        {
            get { return __EndDateTime; }
            set { SetField(ref __EndDateTime, value, "EndDateTime"); }
        }
        private System.DateTime? __StartDateTime;
        [EntityField(true)]
        public System.DateTime? StartDateTime
        {
            get { return __StartDateTime; }
            set { SetField(ref __StartDateTime, value, "StartDateTime"); }
        }
        private System.String __PrimaryWhoId;
        [EntityField(true)]
        public System.String PrimaryWhoId
        {
            get { return __PrimaryWhoId; }
            set { SetField(ref __PrimaryWhoId, value, "PrimaryWhoId"); }
        }
        private System.String __PrimaryAccountId;
        [EntityField(true)]
        public System.String PrimaryAccountId
        {
            get { return __PrimaryAccountId; }
            set { SetField(ref __PrimaryAccountId, value, "PrimaryAccountId"); }
        }
        private System.String __DBActivityTypec;
        [JsonProperty(PropertyName = "DB_Activity_Type__c")]
        [EntityField(true)]
        public System.String DBActivityTypec
        {
            get { return __DBActivityTypec; }
        }
        private PickActivityHistoryEventStatus __EventStatusc;
        [JsonProperty(PropertyName = "Event_Status__c")]
        [EntityField(true)]
        public PickActivityHistoryEventStatus EventStatusc
        {
            get { return __EventStatusc; }
            set { SetField(ref __EventStatusc, value, "Event_Status__c"); }
        }
        private PickActivityHistoryJCIActivitySubTypes __JCIActivitySubTypesc;
        [JsonProperty(PropertyName = "JCI_Activity_Sub_Types__c")]
        [EntityField(true)]
        public PickActivityHistoryJCIActivitySubTypes JCIActivitySubTypesc
        {
            get { return __JCIActivitySubTypesc; }
            set { SetField(ref __JCIActivitySubTypesc, value, "JCI_Activity_Sub_Types__c"); }
        }
        private PickActivityHistoryJCIActivityTypes __JCIActivityTypesc;
        [JsonProperty(PropertyName = "JCI_Activity_Types__c")]
        [EntityField(true)]
        public PickActivityHistoryJCIActivityTypes JCIActivityTypesc
        {
            get { return __JCIActivityTypesc; }
            set { SetField(ref __JCIActivityTypesc, value, "JCI_Activity_Types__c"); }
        }
        private System.String __NACCreatedByUserManagerNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Manager_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserManagerNamec
        {
            get { return __NACCreatedByUserManagerNamec; }
        }
        private System.String __NACCreatedByUserProfileNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Profile_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserProfileNamec
        {
            get { return __NACCreatedByUserProfileNamec; }
        }
        private PickActivityHistoryObservedUnobserved __ObservedUnobservedc;
        [JsonProperty(PropertyName = "Observed_Unobserved__c")]
        [EntityField(true)]
        public PickActivityHistoryObservedUnobserved ObservedUnobservedc
        {
            get { return __ObservedUnobservedc; }
            set { SetField(ref __ObservedUnobservedc, value, "Observed_Unobserved__c"); }
        }
        private System.String __TaskTemplateIdc;
        [JsonProperty(PropertyName = "TaskTemplateId__c")]
        [EntityField(true)]
        public System.String TaskTemplateIdc
        {
            get { return __TaskTemplateIdc; }
            set { SetField(ref __TaskTemplateIdc, value, "TaskTemplateId__c"); }
        }
        private System.String __NACCreatedByUserRoleNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Role_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserRoleNamec
        {
            get { return __NACCreatedByUserRoleNamec; }
        }
        private System.String __KeyIssuesc;
        [JsonProperty(PropertyName = "Key_Issues__c")]
        [EntityField(true)]
        public System.String KeyIssuesc
        {
            get { return __KeyIssuesc; }
            set { SetField(ref __KeyIssuesc, value, "Key_Issues__c"); }
        }
        private System.String __MainTopicc;
        [JsonProperty(PropertyName = "Main_Topic__c")]
        [EntityField(true)]
        public System.String MainTopicc
        {
            get { return __MainTopicc; }
            set { SetField(ref __MainTopicc, value, "Main_Topic__c"); }
        }
        private System.Boolean __PastDuec;
        [JsonProperty(PropertyName = "Past_Due__c")]
        [EntityField(false)]
        public System.Boolean PastDuec
        {
            get { return __PastDuec; }
        }
        private System.String __AACCSFCNTRCalledc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Called__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRCalledc
        {
            get { return __AACCSFCNTRCalledc; }
            set { SetField(ref __AACCSFCNTRCalledc, value, "AACC_SF_CNTR__Called__c"); }
        }
        private System.String __AACCSFCNTRCallerc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Caller__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRCallerc
        {
            get { return __AACCSFCNTRCallerc; }
            set { SetField(ref __AACCSFCNTRCallerc, value, "AACC_SF_CNTR__Caller__c"); }
        }
        private System.String __AACCSFCNTRQueuec;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Queue__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRQueuec
        {
            get { return __AACCSFCNTRQueuec; }
            set { SetField(ref __AACCSFCNTRQueuec, value, "AACC_SF_CNTR__Queue__c"); }
        }
        private System.String __AACCSFCNTRUUIc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__UUI__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRUUIc
        {
            get { return __AACCSFCNTRUUIc; }
            set { SetField(ref __AACCSFCNTRUUIc, value, "AACC_SF_CNTR__UUI__c"); }
        }
        private System.Double? __Attendedc;
        [JsonProperty(PropertyName = "Attended__c")]
        [EntityField(true)]
        public System.Double? Attendedc
        {
            get { return __Attendedc; }
            set { SetField(ref __Attendedc, value, "Attended__c"); }
        }
        private System.Double? __Invitedc;
        [JsonProperty(PropertyName = "Invited__c")]
        [EntityField(true)]
        public System.Double? Invitedc
        {
            get { return __Invitedc; }
            set { SetField(ref __Invitedc, value, "Invited__c"); }
        }
        private System.String __AACCCNTRCalledc;
        [JsonProperty(PropertyName = "AACC_CNTR__Called__c")]
        [EntityField(true)]
        public System.String AACCCNTRCalledc
        {
            get { return __AACCCNTRCalledc; }
            set { SetField(ref __AACCCNTRCalledc, value, "AACC_CNTR__Called__c"); }
        }
        private System.String __AACCCNTRCallerc;
        [JsonProperty(PropertyName = "AACC_CNTR__Caller__c")]
        [EntityField(true)]
        public System.String AACCCNTRCallerc
        {
            get { return __AACCCNTRCallerc; }
            set { SetField(ref __AACCCNTRCallerc, value, "AACC_CNTR__Caller__c"); }
        }
        private System.String __AACCCNTRQueuec;
        [JsonProperty(PropertyName = "AACC_CNTR__Queue__c")]
        [EntityField(true)]
        public System.String AACCCNTRQueuec
        {
            get { return __AACCCNTRQueuec; }
            set { SetField(ref __AACCCNTRQueuec, value, "AACC_CNTR__Queue__c"); }
        }
        private System.String __AACCCNTRUUIc;
        [JsonProperty(PropertyName = "AACC_CNTR__UUI__c")]
        [EntityField(true)]
        public System.String AACCCNTRUUIc
        {
            get { return __AACCCNTRUUIc; }
            set { SetField(ref __AACCCNTRUUIc, value, "AACC_CNTR__UUI__c"); }
        }
        private PickActivityHistoryEventTaskType __EventTaskTypec;
        [JsonProperty(PropertyName = "Event_Task_Type__c")]
        [EntityField(true)]
        public PickActivityHistoryEventTaskType EventTaskTypec
        {
            get { return __EventTaskTypec; }
            set { SetField(ref __EventTaskTypec, value, "Event_Task_Type__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private System.DateTime? __ClosedDatec;
        [JsonProperty(PropertyName = "Closed_Date__c")]
        [EntityField(true)]
        public System.DateTime? ClosedDatec
        {
            get { return __ClosedDatec; }
            set { SetField(ref __ClosedDatec, value, "Closed_Date__c"); }
        }
        private System.Boolean __KeyLeadingIndicatorc;
        [JsonProperty(PropertyName = "Key_Leading_Indicator__c")]
        [EntityField(false)]
        public System.Boolean KeyLeadingIndicatorc
        {
            get { return __KeyLeadingIndicatorc; }
            set { SetField(ref __KeyLeadingIndicatorc, value, "Key_Leading_Indicator__c"); }
        }
        private PickActivityHistoryCustomerPartnerType __CustomerPartnerTypec;
        [JsonProperty(PropertyName = "Customer_Partner_Type__c")]
        [EntityField(true)]
        public PickActivityHistoryCustomerPartnerType CustomerPartnerTypec
        {
            get { return __CustomerPartnerTypec; }
            set { SetField(ref __CustomerPartnerTypec, value, "Customer_Partner_Type__c"); }
        }
    }
    [EntityName("Bill_To__c")]
    public class BillTo : ISalesforceEntity
    {
    [JsonConstructor]
        private BillTo(string hack)
        {
            trackPropertyUpdates = false;
        }

        public BillTo()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickBillToCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickBillToCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __ARNbrc;
        [JsonProperty(PropertyName = "AR_Nbr__c")]
        [EntityField(false)]
        public System.String ARNbrc
        {
            get { return __ARNbrc; }
            set { SetField(ref __ARNbrc, value, "AR_Nbr__c"); }
        }
        private System.String __Acctc;
        [JsonProperty(PropertyName = "Acct__c")]
        [EntityField(true)]
        public System.String Acctc
        {
            get { return __Acctc; }
            set { SetField(ref __Acctc, value, "Acct__c"); }
        }
        private System.String __Ctryc;
        [JsonProperty(PropertyName = "Ctry__c")]
        [EntityField(true)]
        public System.String Ctryc
        {
            get { return __Ctryc; }
            set { SetField(ref __Ctryc, value, "Ctry__c"); }
        }
        private System.String __Ctyc;
        [JsonProperty(PropertyName = "Cty__c")]
        [EntityField(true)]
        public System.String Ctyc
        {
            get { return __Ctyc; }
            set { SetField(ref __Ctyc, value, "Cty__c"); }
        }
        private System.Boolean __GSAFlagc;
        [JsonProperty(PropertyName = "GSA_Flag__c")]
        [EntityField(false)]
        public System.Boolean GSAFlagc
        {
            get { return __GSAFlagc; }
            set { SetField(ref __GSAFlagc, value, "GSA_Flag__c"); }
        }
        private System.Boolean __IsActivec;
        [JsonProperty(PropertyName = "Is_Active__c")]
        [EntityField(false)]
        public System.Boolean IsActivec
        {
            get { return __IsActivec; }
            set { SetField(ref __IsActivec, value, "Is_Active__c"); }
        }
        private System.String __JCIInterCompanyCodec;
        [JsonProperty(PropertyName = "JCI_Inter_Company_Code__c")]
        [EntityField(true)]
        public System.String JCIInterCompanyCodec
        {
            get { return __JCIInterCompanyCodec; }
            set { SetField(ref __JCIInterCompanyCodec, value, "JCI_Inter_Company_Code__c"); }
        }
        private System.String __JCIOracleCreditStatusc;
        [JsonProperty(PropertyName = "JCI_Oracle_Credit_Status__c")]
        [EntityField(true)]
        public System.String JCIOracleCreditStatusc
        {
            get { return __JCIOracleCreditStatusc; }
            set { SetField(ref __JCIOracleCreditStatusc, value, "JCI_Oracle_Credit_Status__c"); }
        }
        private System.DateTime? __JCIOracleCustCreationDtc;
        [JsonProperty(PropertyName = "JCI_Oracle_Cust_Creation_Dt__c")]
        [EntityField(true)]
        public System.DateTime? JCIOracleCustCreationDtc
        {
            get { return __JCIOracleCustCreationDtc; }
            set { SetField(ref __JCIOracleCustCreationDtc, value, "JCI_Oracle_Cust_Creation_Dt__c"); }
        }
        private System.String __JCIOracleParentNbrc;
        [JsonProperty(PropertyName = "JCI_Oracle_Parent_Nbr__c")]
        [EntityField(true)]
        public System.String JCIOracleParentNbrc
        {
            get { return __JCIOracleParentNbrc; }
            set { SetField(ref __JCIOracleParentNbrc, value, "JCI_Oracle_Parent_Nbr__c"); }
        }
        private System.String __PostalCodec;
        [JsonProperty(PropertyName = "Postal_Code__c")]
        [EntityField(true)]
        public System.String PostalCodec
        {
            get { return __PostalCodec; }
            set { SetField(ref __PostalCodec, value, "Postal_Code__c"); }
        }
        private System.String __X18DigitBillToIdc;
        [JsonProperty(PropertyName = "X18_Digit_Bill_To_Id__c")]
        [EntityField(true)]
        public System.String X18DigitBillToIdc
        {
            get { return __X18DigitBillToIdc; }
        }
        private System.String __Statec;
        [JsonProperty(PropertyName = "State__c")]
        [EntityField(true)]
        public System.String Statec
        {
            get { return __Statec; }
            set { SetField(ref __Statec, value, "State__c"); }
        }
        private System.String __StreetAddr2c;
        [JsonProperty(PropertyName = "Street_Addr2__c")]
        [EntityField(true)]
        public System.String StreetAddr2c
        {
            get { return __StreetAddr2c; }
            set { SetField(ref __StreetAddr2c, value, "Street_Addr2__c"); }
        }
        private System.String __StreetAddr3c;
        [JsonProperty(PropertyName = "Street_Addr3__c")]
        [EntityField(true)]
        public System.String StreetAddr3c
        {
            get { return __StreetAddr3c; }
            set { SetField(ref __StreetAddr3c, value, "Street_Addr3__c"); }
        }
        private System.String __StreetAddrc;
        [JsonProperty(PropertyName = "Street_Addr__c")]
        [EntityField(true)]
        public System.String StreetAddrc
        {
            get { return __StreetAddrc; }
            set { SetField(ref __StreetAddrc, value, "Street_Addr__c"); }
        }
        private System.String __ERPIdc;
        [JsonProperty(PropertyName = "ERP_Id__c")]
        [EntityField(true)]
        public System.String ERPIdc
        {
            get { return __ERPIdc; }
            set { SetField(ref __ERPIdc, value, "ERP_Id__c"); }
        }
        private System.Boolean __LineOfCreditc;
        [JsonProperty(PropertyName = "Line_Of_Credit__c")]
        [EntityField(false)]
        public System.Boolean LineOfCreditc
        {
            get { return __LineOfCreditc; }
            set { SetField(ref __LineOfCreditc, value, "Line_Of_Credit__c"); }
        }
        private System.String __JCISMStreetAddr4c;
        [JsonProperty(PropertyName = "JCI_SM_Street_Addr4__c")]
        [EntityField(true)]
        public System.String JCISMStreetAddr4c
        {
            get { return __JCISMStreetAddr4c; }
            set { SetField(ref __JCISMStreetAddr4c, value, "JCI_SM_Street_Addr4__c"); }
        }
        private System.String __DunsNumberc;
        [JsonProperty(PropertyName = "Duns_Number__c")]
        [EntityField(true)]
        public System.String DunsNumberc
        {
            get { return __DunsNumberc; }
            set { SetField(ref __DunsNumberc, value, "Duns_Number__c"); }
        }
        private System.String __IntegrationAccountc;
        [JsonProperty(PropertyName = "Integration_Account__c")]
        [EntityField(true)]
        public System.String IntegrationAccountc
        {
            get { return __IntegrationAccountc; }
            set { SetField(ref __IntegrationAccountc, value, "Integration_Account__c"); }
        }
        private System.String __SourceChannelc;
        [JsonProperty(PropertyName = "Source_Channel__c")]
        [EntityField(true)]
        public System.String SourceChannelc
        {
            get { return __SourceChannelc; }
            set { SetField(ref __SourceChannelc, value, "Source_Channel__c"); }
        }
        private System.String __SourceERPSystemc;
        [JsonProperty(PropertyName = "Source_ERP_System__c")]
        [EntityField(true)]
        public System.String SourceERPSystemc
        {
            get { return __SourceERPSystemc; }
            set { SetField(ref __SourceERPSystemc, value, "Source_ERP_System__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<BillTo,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Brand__c")]
    public class Brand : ISalesforceEntity
    {
    [JsonConstructor]
        private Brand(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Brand()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickBrandCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickBrandCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __BrandVPc;
        [JsonProperty(PropertyName = "Brand_VP__c")]
        [EntityField(true)]
        public System.String BrandVPc
        {
            get { return __BrandVPc; }
            set { SetField(ref __BrandVPc, value, "Brand_VP__c"); }
        }
        private System.String __Descriptionc;
        [JsonProperty(PropertyName = "Description__c")]
        [EntityField(true)]
        public System.String Descriptionc
        {
            get { return __Descriptionc; }
            set { SetField(ref __Descriptionc, value, "Description__c"); }
        }
        private System.Boolean __IsCompetingBrandc;
        [JsonProperty(PropertyName = "Is_Competing_Brand__c")]
        [EntityField(false)]
        public System.Boolean IsCompetingBrandc
        {
            get { return __IsCompetingBrandc; }
            set { SetField(ref __IsCompetingBrandc, value, "Is_Competing_Brand__c"); }
        }
        private System.Boolean __Restrictedc;
        [JsonProperty(PropertyName = "Restricted__c")]
        [EntityField(false)]
        public System.Boolean Restrictedc
        {
            get { return __Restrictedc; }
            set { SetField(ref __Restrictedc, value, "Restricted__c"); }
        }
        private System.String __BrandLeadc;
        [JsonProperty(PropertyName = "Brand_Lead__c")]
        [EntityField(true)]
        public System.String BrandLeadc
        {
            get { return __BrandLeadc; }
            set { SetField(ref __BrandLeadc, value, "Brand_Lead__c"); }
        }
        private System.String __AccountTeamRolec;
        [JsonProperty(PropertyName = "Account_Team_Role__c")]
        [EntityField(true)]
        public System.String AccountTeamRolec
        {
            get { return __AccountTeamRolec; }
            set { SetField(ref __AccountTeamRolec, value, "Account_Team_Role__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickBrandParentBusiness> __ParentBusinessc;
        [JsonProperty(PropertyName = "Parent_Business__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickBrandParentBusiness> ParentBusinessc
        {
            get { return __ParentBusinessc; }
            set { SetField(ref __ParentBusinessc, value, "Parent_Business__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Brand__c")]
        public RelationShip<Brand,Case> Cases__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand__c")]
        public RelationShip<Brand,JCIBrand> JCI_Brands__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brands__c")]
        public RelationShip<Brand,Lead> Leads__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand__c")]
        public RelationShip<Brand,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand__c")]
        public RelationShip<Brand,Product2> Products__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand__c")]
        //public RelationShip<Brand,Program> Parent_Programs__r
        //{
        //    get;set;
        //}
        //[JsonIgnore]
        //[ReferencedByField("RelationId")]
        public RelationShip<Brand,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Case")]
    public class Case : ISalesforceEntity
    {
    [JsonConstructor]
        private Case(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Case()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CaseNumber;
        [EntityField(false)]
        public System.String CaseNumber
        {
            get { return __CaseNumber; }
            set { SetField(ref __CaseNumber, value, "CaseNumber"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __BusinessHoursId;
        [EntityField(false)]
        public System.String BusinessHoursId
        {
            get { return __BusinessHoursId; }
            set { SetField(ref __BusinessHoursId, value, "BusinessHoursId"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __SuppliedName;
        [EntityField(true)]
        public System.String SuppliedName
        {
            get { return __SuppliedName; }
            set { SetField(ref __SuppliedName, value, "SuppliedName"); }
        }
        private System.String __SuppliedEmail;
        [EntityField(true)]
        public System.String SuppliedEmail
        {
            get { return __SuppliedEmail; }
            set { SetField(ref __SuppliedEmail, value, "SuppliedEmail"); }
        }
        private System.String __SuppliedPhone;
        [EntityField(true)]
        public System.String SuppliedPhone
        {
            get { return __SuppliedPhone; }
            set { SetField(ref __SuppliedPhone, value, "SuppliedPhone"); }
        }
        private System.String __SuppliedCompany;
        [EntityField(true)]
        public System.String SuppliedCompany
        {
            get { return __SuppliedCompany; }
            set { SetField(ref __SuppliedCompany, value, "SuppliedCompany"); }
        }
        private PickCaseType __Type;
        [EntityField(true)]
        public PickCaseType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private PickCaseStatus __Status;
        [EntityField(true)]
        public PickCaseStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickCaseReason __Reason;
        [EntityField(true)]
        public PickCaseReason Reason
        {
            get { return __Reason; }
            set { SetField(ref __Reason, value, "Reason"); }
        }
        private PickCaseOrigin __Origin;
        [EntityField(true)]
        public PickCaseOrigin Origin
        {
            get { return __Origin; }
            set { SetField(ref __Origin, value, "Origin"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private PickCasePriority __Priority;
        [EntityField(true)]
        public PickCasePriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.DateTime? __ClosedDate;
        [EntityField(true)]
        public System.DateTime? ClosedDate
        {
            get { return __ClosedDate; }
            set { SetField(ref __ClosedDate, value, "ClosedDate"); }
        }
        private System.Boolean __IsEscalated;
        [EntityField(false)]
        public System.Boolean IsEscalated
        {
            get { return __IsEscalated; }
            set { SetField(ref __IsEscalated, value, "IsEscalated"); }
        }
        private PickCaseCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickCaseCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsClosedOnCreate;
        [EntityField(false)]
        public System.Boolean IsClosedOnCreate
        {
            get { return __IsClosedOnCreate; }
            set { SetField(ref __IsClosedOnCreate, value, "IsClosedOnCreate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __AccounttoMergeWithc;
        [JsonProperty(PropertyName = "Account_to_Merge_With__c")]
        [EntityField(true)]
        public System.String AccounttoMergeWithc
        {
            get { return __AccounttoMergeWithc; }
            set { SetField(ref __AccounttoMergeWithc, value, "Account_to_Merge_With__c"); }
        }
        private System.String __ContacttoMergeWithc;
        [JsonProperty(PropertyName = "Contact_to_Merge_With__c")]
        [EntityField(true)]
        public System.String ContacttoMergeWithc
        {
            get { return __ContacttoMergeWithc; }
            set { SetField(ref __ContacttoMergeWithc, value, "Contact_to_Merge_With__c"); }
        }
        private PickCaseType __Typec;
        [JsonProperty(PropertyName = "Type__c")]
        [EntityField(true)]
        public PickCaseType Typec
        {
            get { return __Typec; }
            set { SetField(ref __Typec, value, "Type__c"); }
        }
        private System.String __AlternativeOptionsConsideredc;
        [JsonProperty(PropertyName = "Alternative_Options_Considered__c")]
        [EntityField(true)]
        public System.String AlternativeOptionsConsideredc
        {
            get { return __AlternativeOptionsConsideredc; }
            set { SetField(ref __AlternativeOptionsConsideredc, value, "Alternative_Options_Considered__c"); }
        }
        private System.Boolean __ApprovedbyBrandVPc;
        [JsonProperty(PropertyName = "Approved_by_Brand_VP__c")]
        [EntityField(false)]
        public System.Boolean ApprovedbyBrandVPc
        {
            get { return __ApprovedbyBrandVPc; }
            set { SetField(ref __ApprovedbyBrandVPc, value, "Approved_by_Brand_VP__c"); }
        }
        private System.Boolean __ApprovedbyChannelVPc;
        [JsonProperty(PropertyName = "Approved_by_Channel_VP__c")]
        [EntityField(false)]
        public System.Boolean ApprovedbyChannelVPc
        {
            get { return __ApprovedbyChannelVPc; }
            set { SetField(ref __ApprovedbyChannelVPc, value, "Approved_by_Channel_VP__c"); }
        }
        private System.String __BrandVPc;
        [JsonProperty(PropertyName = "Brand_VP__c")]
        [EntityField(true)]
        public System.String BrandVPc
        {
            get { return __BrandVPc; }
            set { SetField(ref __BrandVPc, value, "Brand_VP__c"); }
        }
        private System.String __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(true)]
        public System.String Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private System.String __CFYMarginc;
        [JsonProperty(PropertyName = "CFY_Margin__c")]
        [EntityField(true)]
        public System.String CFYMarginc
        {
            get { return __CFYMarginc; }
            set { SetField(ref __CFYMarginc, value, "CFY_Margin__c"); }
        }
        private System.String __CFYSalesc;
        [JsonProperty(PropertyName = "CFY_Sales__c")]
        [EntityField(true)]
        public System.String CFYSalesc
        {
            get { return __CFYSalesc; }
            set { SetField(ref __CFYSalesc, value, "CFY_Sales__c"); }
        }
        private PickCaseChannelAction __ChannelActionc;
        [JsonProperty(PropertyName = "Channel_Action__c")]
        [EntityField(true)]
        public PickCaseChannelAction ChannelActionc
        {
            get { return __ChannelActionc; }
            set { SetField(ref __ChannelActionc, value, "Channel_Action__c"); }
        }
        private System.String __ChannelVPc;
        [JsonProperty(PropertyName = "Channel_VP__c")]
        [EntityField(true)]
        public System.String ChannelVPc
        {
            get { return __ChannelVPc; }
            set { SetField(ref __ChannelVPc, value, "Channel_VP__c"); }
        }
        private System.String __ConsofRecommendationc;
        [JsonProperty(PropertyName = "Cons_of_Recommendation__c")]
        [EntityField(true)]
        public System.String ConsofRecommendationc
        {
            get { return __ConsofRecommendationc; }
            set { SetField(ref __ConsofRecommendationc, value, "Cons_of_Recommendation__c"); }
        }
        private System.String __Distributorsc;
        [JsonProperty(PropertyName = "Distributor_s__c")]
        [EntityField(true)]
        public System.String Distributorsc
        {
            get { return __Distributorsc; }
            set { SetField(ref __Distributorsc, value, "Distributor_s__c"); }
        }
        private PickCaseFollowed3rdPartyProcess __Followed3rdPartyProcessc;
        [JsonProperty(PropertyName = "Followed_3rd_Party_Process__c")]
        [EntityField(true)]
        public PickCaseFollowed3rdPartyProcess Followed3rdPartyProcessc
        {
            get { return __Followed3rdPartyProcessc; }
            set { SetField(ref __Followed3rdPartyProcessc, value, "Followed_3rd_Party_Process__c"); }
        }
        private System.String __HighSalesEstc;
        [JsonProperty(PropertyName = "High_Sales_Est__c")]
        [EntityField(true)]
        public System.String HighSalesEstc
        {
            get { return __HighSalesEstc; }
            set { SetField(ref __HighSalesEstc, value, "High_Sales_Est__c"); }
        }
        private System.String __JCIBranchesc;
        [JsonProperty(PropertyName = "JCI_Branches__c")]
        [EntityField(true)]
        public System.String JCIBranchesc
        {
            get { return __JCIBranchesc; }
            set { SetField(ref __JCIBranchesc, value, "JCI_Branches__c"); }
        }
        private System.String __Locationsc;
        [JsonProperty(PropertyName = "Locations__c")]
        [EntityField(true)]
        public System.String Locationsc
        {
            get { return __Locationsc; }
            set { SetField(ref __Locationsc, value, "Locations__c"); }
        }
        private System.String __LowSalesEstc;
        [JsonProperty(PropertyName = "Low_Sales_Est__c")]
        [EntityField(true)]
        public System.String LowSalesEstc
        {
            get { return __LowSalesEstc; }
            set { SetField(ref __LowSalesEstc, value, "Low_Sales_Est__c"); }
        }
        private System.String __MajorCustImpactc;
        [JsonProperty(PropertyName = "Major_Cust_Impact__c")]
        [EntityField(true)]
        public System.String MajorCustImpactc
        {
            get { return __MajorCustImpactc; }
            set { SetField(ref __MajorCustImpactc, value, "Major_Cust_Impact__c"); }
        }
        private PickCaseNACTeamAndBrandTeamsAware __NACTeamandBrandTeamsAwarec;
        [JsonProperty(PropertyName = "NAC_Team_and_Brand_Teams_Aware__c")]
        [EntityField(true)]
        public PickCaseNACTeamAndBrandTeamsAware NACTeamandBrandTeamsAwarec
        {
            get { return __NACTeamandBrandTeamsAwarec; }
            set { SetField(ref __NACTeamandBrandTeamsAwarec, value, "NAC_Team_and_Brand_Teams_Aware__c"); }
        }
        private System.String __PFYMarginc;
        [JsonProperty(PropertyName = "PFY_Margin__c")]
        [EntityField(true)]
        public System.String PFYMarginc
        {
            get { return __PFYMarginc; }
            set { SetField(ref __PFYMarginc, value, "PFY_Margin__c"); }
        }
        private System.String __PFYSalesc;
        [JsonProperty(PropertyName = "PFY_Sales__c")]
        [EntityField(true)]
        public System.String PFYSalesc
        {
            get { return __PFYSalesc; }
            set { SetField(ref __PFYSalesc, value, "PFY_Sales__c"); }
        }
        private System.String __ProductsSelectedc;
        [JsonProperty(PropertyName = "Products_Selected__c")]
        [EntityField(true)]
        public System.String ProductsSelectedc
        {
            get { return __ProductsSelectedc; }
            set { SetField(ref __ProductsSelectedc, value, "Products_Selected__c"); }
        }
        private System.String __ProsofRecommendationc;
        [JsonProperty(PropertyName = "Pros_of_Recommendation__c")]
        [EntityField(true)]
        public System.String ProsofRecommendationc
        {
            get { return __ProsofRecommendationc; }
            set { SetField(ref __ProsofRecommendationc, value, "Pros_of_Recommendation__c"); }
        }
        private System.String __Representativesc;
        [JsonProperty(PropertyName = "Representative_s__c")]
        [EntityField(true)]
        public System.String Representativesc
        {
            get { return __Representativesc; }
            set { SetField(ref __Representativesc, value, "Representative_s__c"); }
        }
        private System.String __YBLMarginc;
        [JsonProperty(PropertyName = "YBL_Margin__c")]
        [EntityField(true)]
        public System.String YBLMarginc
        {
            get { return __YBLMarginc; }
            set { SetField(ref __YBLMarginc, value, "YBL_Margin__c"); }
        }
        private System.String __YBLSalesc;
        [JsonProperty(PropertyName = "YBL_Sales__c")]
        [EntityField(true)]
        public System.String YBLSalesc
        {
            get { return __YBLSalesc; }
            set { SetField(ref __YBLSalesc, value, "YBL_Sales__c"); }
        }
        private System.String __Year1SalesPlanc;
        [JsonProperty(PropertyName = "Year_1_Sales_Plan__c")]
        [EntityField(true)]
        public System.String Year1SalesPlanc
        {
            get { return __Year1SalesPlanc; }
            set { SetField(ref __Year1SalesPlanc, value, "Year_1_Sales_Plan__c"); }
        }
        private System.String __Year2SalesPlanc;
        [JsonProperty(PropertyName = "Year_2_Sales_Plan__c")]
        [EntityField(true)]
        public System.String Year2SalesPlanc
        {
            get { return __Year2SalesPlanc; }
            set { SetField(ref __Year2SalesPlanc, value, "Year_2_Sales_Plan__c"); }
        }
        private System.String __Year3SalesPlanc;
        [JsonProperty(PropertyName = "Year_3_Sales_Plan__c")]
        [EntityField(true)]
        public System.String Year3SalesPlanc
        {
            get { return __Year3SalesPlanc; }
            set { SetField(ref __Year3SalesPlanc, value, "Year_3_Sales_Plan__c"); }
        }
        private System.String __AcctTeamRolec;
        [JsonProperty(PropertyName = "Acct_Team_Role__c")]
        [EntityField(true)]
        public System.String AcctTeamRolec
        {
            get { return __AcctTeamRolec; }
            set { SetField(ref __AcctTeamRolec, value, "Acct_Team_Role__c"); }
        }
        private System.String __RSMc;
        [JsonProperty(PropertyName = "RSM__c")]
        [EntityField(true)]
        public System.String RSMc
        {
            get { return __RSMc; }
            set { SetField(ref __RSMc, value, "RSM__c"); }
        }
        private System.Double? __CaseAgeInBusinessHoursc;
        [JsonProperty(PropertyName = "Case_Age_In_Business_Hours__c")]
        [EntityField(true)]
        public System.Double? CaseAgeInBusinessHoursc
        {
            get { return __CaseAgeInBusinessHoursc; }
            set { SetField(ref __CaseAgeInBusinessHoursc, value, "Case_Age_In_Business_Hours__c"); }
        }
        private System.DateTime? __LastStatusChangec;
        [JsonProperty(PropertyName = "Last_Status_Change__c")]
        [EntityField(true)]
        public System.DateTime? LastStatusChangec
        {
            get { return __LastStatusChangec; }
            set { SetField(ref __LastStatusChangec, value, "Last_Status_Change__c"); }
        }
        private System.Double? __TimeWithCustomerc;
        [JsonProperty(PropertyName = "Time_With_Customer__c")]
        [EntityField(true)]
        public System.Double? TimeWithCustomerc
        {
            get { return __TimeWithCustomerc; }
            set { SetField(ref __TimeWithCustomerc, value, "Time_With_Customer__c"); }
        }
        private System.Double? __TimeWithSupportc;
        [JsonProperty(PropertyName = "Time_With_Support__c")]
        [EntityField(true)]
        public System.Double? TimeWithSupportc
        {
            get { return __TimeWithSupportc; }
            set { SetField(ref __TimeWithSupportc, value, "Time_With_Support__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private System.Boolean __IsSurveyCreatedc;
        [JsonProperty(PropertyName = "Is_Survey_Created__c")]
        [EntityField(false)]
        public System.Boolean IsSurveyCreatedc
        {
            get { return __IsSurveyCreatedc; }
            set { SetField(ref __IsSurveyCreatedc, value, "Is_Survey_Created__c"); }
        }
        private System.String __CustomerReferenceNumberc;
        [JsonProperty(PropertyName = "Customer_Reference_Number__c")]
        [EntityField(true)]
        public System.String CustomerReferenceNumberc
        {
            get { return __CustomerReferenceNumberc; }
            set { SetField(ref __CustomerReferenceNumberc, value, "Customer_Reference_Number__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickCaseBrandForNACAccountRequest> __BrandForNACAccountRequestc;
        [JsonProperty(PropertyName = "BrandForNACAccountRequest__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickCaseBrandForNACAccountRequest> BrandForNACAccountRequestc
        {
            get { return __BrandForNACAccountRequestc; }
            set { SetField(ref __BrandForNACAccountRequestc, value, "BrandForNACAccountRequest__c"); }
        }
        private PickCaseSellingEntity __SellingEntityc;
        [JsonProperty(PropertyName = "Selling_Entity__c")]
        [EntityField(true)]
        public PickCaseSellingEntity SellingEntityc
        {
            get { return __SellingEntityc; }
            set { SetField(ref __SellingEntityc, value, "Selling_Entity__c"); }
        }
        private System.String __CaseOwnerNamec;
        [JsonProperty(PropertyName = "Case_Owner_Name__c")]
        [EntityField(true)]
        public System.String CaseOwnerNamec
        {
            get { return __CaseOwnerNamec; }
            set { SetField(ref __CaseOwnerNamec, value, "Case_Owner_Name__c"); }
        }
        private System.Boolean __SMEULocationUnsafec;
        [JsonProperty(PropertyName = "SM_EU_Location_Unsafe__c")]
        [EntityField(false)]
        public System.Boolean SMEULocationUnsafec
        {
            get { return __SMEULocationUnsafec; }
            set { SetField(ref __SMEULocationUnsafec, value, "SM_EU_Location_Unsafe__c"); }
        }
        private System.String __SMEUTechnicianEmailforSafetyCasec;
        [JsonProperty(PropertyName = "SM_EU_Technician_Email_for_Safety_Case__c")]
        [EntityField(true)]
        public System.String SMEUTechnicianEmailforSafetyCasec
        {
            get { return __SMEUTechnicianEmailforSafetyCasec; }
            set { SetField(ref __SMEUTechnicianEmailforSafetyCasec, value, "SM_EU_Technician_Email_for_Safety_Case__c"); }
        }
        private System.String __SMEUTechnicianforSafetyCasec;
        [JsonProperty(PropertyName = "SM_EU_Technician_for_Safety_Case__c")]
        [EntityField(true)]
        public System.String SMEUTechnicianforSafetyCasec
        {
            get { return __SMEUTechnicianforSafetyCasec; }
            set { SetField(ref __SMEUTechnicianforSafetyCasec, value, "SM_EU_Technician_for_Safety_Case__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Case__c")]
        public RelationShip<Case,ActionPlan> Action_Plans__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CaseId")]
        public RelationShip<Case,CaseHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Case,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("CaseHistory")]
    public class CaseHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CaseId;
        [EntityField(false)]
        public System.String CaseId
        {
            get { return __CaseId; }
            set { SetField(ref __CaseId, value, "CaseId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickCaseHistoryField __Field;
        [EntityField(false)]
        public PickCaseHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Channel_Change_Brand_Leader__c")]
    public class ChannelChangeBrandLeader : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelChangeBrandLeader(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelChangeBrandLeader()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelChangeBrandLeaderCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickChannelChangeBrandLeaderCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __BrandLeaderc;
        [JsonProperty(PropertyName = "Brand_Leader__c")]
        [EntityField(true)]
        public System.String BrandLeaderc
        {
            get { return __BrandLeaderc; }
            set { SetField(ref __BrandLeaderc, value, "Brand_Leader__c"); }
        }
        private System.String __BrandNamec;
        [JsonProperty(PropertyName = "Brand_Name__c")]
        [EntityField(true)]
        public System.String BrandNamec
        {
            get { return __BrandNamec; }
            set { SetField(ref __BrandNamec, value, "Brand_Name__c"); }
        }
        private System.String __UserIdc;
        [JsonProperty(PropertyName = "User_Id__c")]
        [EntityField(true)]
        public System.String UserIdc
        {
            get { return __UserIdc; }
            set { SetField(ref __UserIdc, value, "User_Id__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ChannelChangeBrandLeader,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Channel_Change_Brand_VP__c")]
    public class ChannelChangeBrandVP : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelChangeBrandVP(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelChangeBrandVP()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelChangeBrandVPCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickChannelChangeBrandVPCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __BrandVPNamec;
        [JsonProperty(PropertyName = "Brand_VP_Name__c")]
        [EntityField(true)]
        public System.String BrandVPNamec
        {
            get { return __BrandVPNamec; }
            set { SetField(ref __BrandVPNamec, value, "Brand_VP_Name__c"); }
        }
        private System.String __BrandVPUserIdc;
        [JsonProperty(PropertyName = "Brand_VP_User_Id__c")]
        [EntityField(true)]
        public System.String BrandVPUserIdc
        {
            get { return __BrandVPUserIdc; }
            set { SetField(ref __BrandVPUserIdc, value, "Brand_VP_User_Id__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ChannelChangeBrandVP,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Channel_Change_Generic__c")]
    public class ChannelChangeGeneric : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelChangeGeneric(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelChangeGeneric()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelChangeGenericCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickChannelChangeGenericCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Valuec;
        [JsonProperty(PropertyName = "Value__c")]
        [EntityField(true)]
        public System.String Valuec
        {
            get { return __Valuec; }
            set { SetField(ref __Valuec, value, "Value__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ChannelChangeGeneric,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Channel_Change__History")]
    public class ChannelChangeHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelChangeHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelChangeHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickChannelChangeHistoryField __Field;
        [EntityField(false)]
        public PickChannelChangeHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Channel_Change__c")]
    public class ChannelChange : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelChange(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelChange()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelChangeCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickChannelChangeCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __AccountMarketc;
        [JsonProperty(PropertyName = "Account_Market__c")]
        [EntityField(true)]
        public System.String AccountMarketc
        {
            get { return __AccountMarketc; }
            set { SetField(ref __AccountMarketc, value, "Account_Market__c"); }
        }
        private System.String __AccountNamec;
        [JsonProperty(PropertyName = "Account_Name__c")]
        [EntityField(false)]
        public System.String AccountNamec
        {
            get { return __AccountNamec; }
            set { SetField(ref __AccountNamec, value, "Account_Name__c"); }
        }
        private System.String __AccountShippingLocationc;
        [JsonProperty(PropertyName = "Account_Shipping_Location__c")]
        [EntityField(true)]
        public System.String AccountShippingLocationc
        {
            get { return __AccountShippingLocationc; }
            set { SetField(ref __AccountShippingLocationc, value, "Account_Shipping_Location__c"); }
        }
        private System.String __AccountTeamMemberImpactedc;
        [JsonProperty(PropertyName = "Account_Team_Member_Impacted__c")]
        [EntityField(true)]
        public System.String AccountTeamMemberImpactedc
        {
            get { return __AccountTeamMemberImpactedc; }
            set { SetField(ref __AccountTeamMemberImpactedc, value, "Account_Team_Member_Impacted__c"); }
        }
        private System.String __AccountTeamMembersImpactedIDsc;
        [JsonProperty(PropertyName = "Account_Team_Member_s_Impacted_IDs__c")]
        [EntityField(true)]
        public System.String AccountTeamMembersImpactedIDsc
        {
            get { return __AccountTeamMembersImpactedIDsc; }
            set { SetField(ref __AccountTeamMembersImpactedIDsc, value, "Account_Team_Member_s_Impacted_IDs__c"); }
        }
        private System.String __AccountTeamMemberstobeaddedc;
        [JsonProperty(PropertyName = "Account_Team_Members_to_be_added__c")]
        [EntityField(true)]
        public System.String AccountTeamMemberstobeaddedc
        {
            get { return __AccountTeamMemberstobeaddedc; }
            set { SetField(ref __AccountTeamMemberstobeaddedc, value, "Account_Team_Members_to_be_added__c"); }
        }
        private System.String __ActualPhysicalLocationAddressc;
        [JsonProperty(PropertyName = "Actual_Physical_Location_Address__c")]
        [EntityField(true)]
        public System.String ActualPhysicalLocationAddressc
        {
            get { return __ActualPhysicalLocationAddressc; }
            set { SetField(ref __ActualPhysicalLocationAddressc, value, "Actual_Physical_Location_Address__c"); }
        }
        private System.String __AlternativeOptionsConsideredc;
        [JsonProperty(PropertyName = "Alternative_Options_Considered__c")]
        [EntityField(true)]
        public System.String AlternativeOptionsConsideredc
        {
            get { return __AlternativeOptionsConsideredc; }
            set { SetField(ref __AlternativeOptionsConsideredc, value, "Alternative_Options_Considered__c"); }
        }
        private System.String __BrandLeaderc;
        [JsonProperty(PropertyName = "Brand_Leader__c")]
        [EntityField(true)]
        public System.String BrandLeaderc
        {
            get { return __BrandLeaderc; }
            set { SetField(ref __BrandLeaderc, value, "Brand_Leader__c"); }
        }
        private System.Boolean __BrandRestrictionc;
        [JsonProperty(PropertyName = "Brand_Restriction__c")]
        [EntityField(false)]
        public System.Boolean BrandRestrictionc
        {
            get { return __BrandRestrictionc; }
            set { SetField(ref __BrandRestrictionc, value, "Brand_Restriction__c"); }
        }
        private System.String __BrandVPc;
        [JsonProperty(PropertyName = "Brand_VP__c")]
        [EntityField(true)]
        public System.String BrandVPc
        {
            get { return __BrandVPc; }
            set { SetField(ref __BrandVPc, value, "Brand_VP__c"); }
        }
        private PickChannelChangeBrand __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(false)]
        public PickChannelChangeBrand Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private PickChannelChangeBusinessSourceSystemProcessStatus __BusinessSourceSystemProcessStatusc;
        [JsonProperty(PropertyName = "Business_Source_System_Process_Status__c")]
        [EntityField(true)]
        public PickChannelChangeBusinessSourceSystemProcessStatus BusinessSourceSystemProcessStatusc
        {
            get { return __BusinessSourceSystemProcessStatusc; }
            set { SetField(ref __BusinessSourceSystemProcessStatusc, value, "Business_Source_System_Process_Status__c"); }
        }
        private PickChannelChangeChannelAction __ChannelActionc;
        [JsonProperty(PropertyName = "Channel_Action__c")]
        [EntityField(false)]
        public PickChannelChangeChannelAction ChannelActionc
        {
            get { return __ChannelActionc; }
            set { SetField(ref __ChannelActionc, value, "Channel_Action__c"); }
        }
        private PickChannelChangeChannelChangeProcessStatus __ChannelChangeProcessStatusc;
        [JsonProperty(PropertyName = "Channel_Change_Process_Status__c")]
        [EntityField(true)]
        public PickChannelChangeChannelChangeProcessStatus ChannelChangeProcessStatusc
        {
            get { return __ChannelChangeProcessStatusc; }
            set { SetField(ref __ChannelChangeProcessStatusc, value, "Channel_Change_Process_Status__c"); }
        }
        private PickChannelChangeChannelChangeType __ChannelChangeTypec;
        [JsonProperty(PropertyName = "Channel_Change_Type__c")]
        [EntityField(true)]
        public PickChannelChangeChannelChangeType ChannelChangeTypec
        {
            get { return __ChannelChangeTypec; }
            set { SetField(ref __ChannelChangeTypec, value, "Channel_Change_Type__c"); }
        }
        private System.String __ComplianceRepc;
        [JsonProperty(PropertyName = "Compliance_Rep__c")]
        [EntityField(true)]
        public System.String ComplianceRepc
        {
            get { return __ComplianceRepc; }
            set { SetField(ref __ComplianceRepc, value, "Compliance_Rep__c"); }
        }
        private System.String __ConsofRecommendationc;
        [JsonProperty(PropertyName = "Cons_of_Recommendation__c")]
        [EntityField(true)]
        public System.String ConsofRecommendationc
        {
            get { return __ConsofRecommendationc; }
            set { SetField(ref __ConsofRecommendationc, value, "Cons_of_Recommendation__c"); }
        }
        private PickChannelChangeContractAttached __ContractAttachedc;
        [JsonProperty(PropertyName = "Contract_Attached__c")]
        [EntityField(true)]
        public PickChannelChangeContractAttached ContractAttachedc
        {
            get { return __ContractAttachedc; }
            set { SetField(ref __ContractAttachedc, value, "Contract_Attached__c"); }
        }
        private PickChannelChangeContractStatus __ContractStatusc;
        [JsonProperty(PropertyName = "Contract_Status__c")]
        [EntityField(true)]
        public PickChannelChangeContractStatus ContractStatusc
        {
            get { return __ContractStatusc; }
            set { SetField(ref __ContractStatusc, value, "Contract_Status__c"); }
        }
        private System.String __CurrentAccountERPIDc;
        [JsonProperty(PropertyName = "Current_Account_ERP_ID__c")]
        [EntityField(true)]
        public System.String CurrentAccountERPIDc
        {
            get { return __CurrentAccountERPIDc; }
            set { SetField(ref __CurrentAccountERPIDc, value, "Current_Account_ERP_ID__c"); }
        }
        private System.String __CurrentAccountNamec;
        [JsonProperty(PropertyName = "Current_Account_Name__c")]
        [EntityField(true)]
        public System.String CurrentAccountNamec
        {
            get { return __CurrentAccountNamec; }
            set { SetField(ref __CurrentAccountNamec, value, "Current_Account_Name__c"); }
        }
        private System.String __CurrentAccountOpenGlobeIDc;
        [JsonProperty(PropertyName = "Current_Account_OpenGlobe_ID__c")]
        [EntityField(true)]
        public System.String CurrentAccountOpenGlobeIDc
        {
            get { return __CurrentAccountOpenGlobeIDc; }
            set { SetField(ref __CurrentAccountOpenGlobeIDc, value, "Current_Account_OpenGlobe_ID__c"); }
        }
        private System.String __CustomerNamec;
        [JsonProperty(PropertyName = "Customer_Name__c")]
        [EntityField(true)]
        public System.String CustomerNamec
        {
            get { return __CustomerNamec; }
            set { SetField(ref __CustomerNamec, value, "Customer_Name__c"); }
        }
        private PickChannelChangeDueDiligenceDecision __DueDiligenceDecisionc;
        [JsonProperty(PropertyName = "Due_Diligence_Decision__c")]
        [EntityField(true)]
        public PickChannelChangeDueDiligenceDecision DueDiligenceDecisionc
        {
            get { return __DueDiligenceDecisionc; }
            set { SetField(ref __DueDiligenceDecisionc, value, "Due_Diligence_Decision__c"); }
        }
        private System.DateTime? __EffectiveDateofContractc;
        [JsonProperty(PropertyName = "Effective_Date_of_Contract__c")]
        [EntityField(true)]
        public System.DateTime? EffectiveDateofContractc
        {
            get { return __EffectiveDateofContractc; }
            set { SetField(ref __EffectiveDateofContractc, value, "Effective_Date_of_Contract__c"); }
        }
        private System.String __FullFiscalYearRevenueEstimatec;
        [JsonProperty(PropertyName = "Full_Fiscal_Year_Revenue_Estimate__c")]
        [EntityField(false)]
        public System.String FullFiscalYearRevenueEstimatec
        {
            get { return __FullFiscalYearRevenueEstimatec; }
            set { SetField(ref __FullFiscalYearRevenueEstimatec, value, "Full_Fiscal_Year_Revenue_Estimate__c"); }
        }
        private PickChannelChangeHasLegalApprovedThisContract __HasLegalapprovedthiscontractc;
        [JsonProperty(PropertyName = "Has_Legal_approved_this_contract__c")]
        [EntityField(true)]
        public PickChannelChangeHasLegalApprovedThisContract HasLegalapprovedthiscontractc
        {
            get { return __HasLegalapprovedthiscontractc; }
            set { SetField(ref __HasLegalapprovedthiscontractc, value, "Has_Legal_approved_this_contract__c"); }
        }
        private PickChannelChangeHasTheContractBeenTerminated __Hasthecontractbeenterminatedc;
        [JsonProperty(PropertyName = "Has_the_contract_been_terminated__c")]
        [EntityField(true)]
        public PickChannelChangeHasTheContractBeenTerminated Hasthecontractbeenterminatedc
        {
            get { return __Hasthecontractbeenterminatedc; }
            set { SetField(ref __Hasthecontractbeenterminatedc, value, "Has_the_contract_been_terminated__c"); }
        }
        private System.String __ImpactedCustomersc;
        [JsonProperty(PropertyName = "Impacted_Customers__c")]
        [EntityField(true)]
        public System.String ImpactedCustomersc
        {
            get { return __ImpactedCustomersc; }
            set { SetField(ref __ImpactedCustomersc, value, "Impacted_Customers__c"); }
        }
        private PickChannelChangeIsTheLegalContractCompleteSigned __IstheLegalContractCompleteSignedc;
        [JsonProperty(PropertyName = "Is_the_Legal_Contract_Complete_Signed__c")]
        [EntityField(true)]
        public PickChannelChangeIsTheLegalContractCompleteSigned IstheLegalContractCompleteSignedc
        {
            get { return __IstheLegalContractCompleteSignedc; }
            set { SetField(ref __IstheLegalContractCompleteSignedc, value, "Is_the_Legal_Contract_Complete_Signed__c"); }
        }
        private PickChannelChangeIsThereAnExistingThirdPartySelling __Isthereanexistingthirdpartysellingc;
        [JsonProperty(PropertyName = "Is_there_an_existing_third_party_selling__c")]
        [EntityField(true)]
        public PickChannelChangeIsThereAnExistingThirdPartySelling Isthereanexistingthirdpartysellingc
        {
            get { return __Isthereanexistingthirdpartysellingc; }
            set { SetField(ref __Isthereanexistingthirdpartysellingc, value, "Is_there_an_existing_third_party_selling__c"); }
        }
        private PickChannelChangeIsbrandLineCardBeingTransferred __Isbrandlinecardbeingtransferredc;
        [JsonProperty(PropertyName = "Isbrand_line_card_being_transferred__c")]
        [EntityField(true)]
        public PickChannelChangeIsbrandLineCardBeingTransferred Isbrandlinecardbeingtransferredc
        {
            get { return __Isbrandlinecardbeingtransferredc; }
            set { SetField(ref __Isbrandlinecardbeingtransferredc, value, "Isbrand_line_card_being_transferred__c"); }
        }
        private System.String __JCIBranchesc;
        [JsonProperty(PropertyName = "JCI_Branches__c")]
        [EntityField(true)]
        public System.String JCIBranchesc
        {
            get { return __JCIBranchesc; }
            set { SetField(ref __JCIBranchesc, value, "JCI_Branches__c"); }
        }
        private System.String __LegalCommentsc;
        [JsonProperty(PropertyName = "Legal_Comments__c")]
        [EntityField(true)]
        public System.String LegalCommentsc
        {
            get { return __LegalCommentsc; }
            set { SetField(ref __LegalCommentsc, value, "Legal_Comments__c"); }
        }
        private PickChannelChangeLegalContractModificationRequested __LegalContractmodificationrequestedc;
        [JsonProperty(PropertyName = "Legal_Contract_modification_requested__c")]
        [EntityField(true)]
        public PickChannelChangeLegalContractModificationRequested LegalContractmodificationrequestedc
        {
            get { return __LegalContractmodificationrequestedc; }
            set { SetField(ref __LegalContractmodificationrequestedc, value, "Legal_Contract_modification_requested__c"); }
        }
        private PickChannelChangeLegalApproved __Legalapprovedc;
        [JsonProperty(PropertyName = "Legal_approved__c")]
        [EntityField(true)]
        public PickChannelChangeLegalApproved Legalapprovedc
        {
            get { return __Legalapprovedc; }
            set { SetField(ref __Legalapprovedc, value, "Legal_approved__c"); }
        }
        private System.String __PlanDollarsUSDc;
        [JsonProperty(PropertyName = "Plan_Dollars_USD__c")]
        [EntityField(true)]
        public System.String PlanDollarsUSDc
        {
            get { return __PlanDollarsUSDc; }
            set { SetField(ref __PlanDollarsUSDc, value, "Plan_Dollars_USD__c"); }
        }
        private System.String __ProductIdsc;
        [JsonProperty(PropertyName = "Product_Ids__c")]
        [EntityField(true)]
        public System.String ProductIdsc
        {
            get { return __ProductIdsc; }
            set { SetField(ref __ProductIdsc, value, "Product_Ids__c"); }
        }
        private System.String __Productsc;
        [JsonProperty(PropertyName = "Products__c")]
        [EntityField(true)]
        public System.String Productsc
        {
            get { return __Productsc; }
            set { SetField(ref __Productsc, value, "Products__c"); }
        }
        private System.String __ProsofRecommendationc;
        [JsonProperty(PropertyName = "Pros_of_Recommendation__c")]
        [EntityField(true)]
        public System.String ProsofRecommendationc
        {
            get { return __ProsofRecommendationc; }
            set { SetField(ref __ProsofRecommendationc, value, "Pros_of_Recommendation__c"); }
        }
        private System.Boolean __RecordEditablec;
        [JsonProperty(PropertyName = "Record_Editable__c")]
        [EntityField(false)]
        public System.Boolean RecordEditablec
        {
            get { return __RecordEditablec; }
            set { SetField(ref __RecordEditablec, value, "Record_Editable__c"); }
        }
        private System.String __RecordLinkc;
        [JsonProperty(PropertyName = "Record_Link__c")]
        [EntityField(true)]
        public System.String RecordLinkc
        {
            get { return __RecordLinkc; }
        }
        private System.String __RegionalVPc;
        [JsonProperty(PropertyName = "Regional_VP__c")]
        [EntityField(true)]
        public System.String RegionalVPc
        {
            get { return __RegionalVPc; }
            set { SetField(ref __RegionalVPc, value, "Regional_VP__c"); }
        }
        private System.String __Representativesc;
        [JsonProperty(PropertyName = "Representatives__c")]
        [EntityField(true)]
        public System.String Representativesc
        {
            get { return __Representativesc; }
            set { SetField(ref __Representativesc, value, "Representatives__c"); }
        }
        private System.String __RevenueEstimatec;
        [JsonProperty(PropertyName = "Revenue_Estimate__c")]
        [EntityField(false)]
        public System.String RevenueEstimatec
        {
            get { return __RevenueEstimatec; }
            set { SetField(ref __RevenueEstimatec, value, "Revenue_Estimate__c"); }
        }
        private System.String __SSNARegionalLeaderc;
        [JsonProperty(PropertyName = "SSNA_Regional_Leader__c")]
        [EntityField(true)]
        public System.String SSNARegionalLeaderc
        {
            get { return __SSNARegionalLeaderc; }
            set { SetField(ref __SSNARegionalLeaderc, value, "SSNA_Regional_Leader__c"); }
        }
        private System.String __SSNARepc;
        [JsonProperty(PropertyName = "SSNA_Rep__c")]
        [EntityField(true)]
        public System.String SSNARepc
        {
            get { return __SSNARepc; }
            set { SetField(ref __SSNARepc, value, "SSNA_Rep__c"); }
        }
        private System.String __SalesOpsc;
        [JsonProperty(PropertyName = "Sales_Ops__c")]
        [EntityField(true)]
        public System.String SalesOpsc
        {
            get { return __SalesOpsc; }
            set { SetField(ref __SalesOpsc, value, "Sales_Ops__c"); }
        }
        private PickChannelChangeSellingEntity __SellingEntityc;
        [JsonProperty(PropertyName = "Selling_Entity__c")]
        [EntityField(false)]
        public PickChannelChangeSellingEntity SellingEntityc
        {
            get { return __SellingEntityc; }
            set { SetField(ref __SellingEntityc, value, "Selling_Entity__c"); }
        }
        private System.Boolean __ShowLegalFieldsRemovec;
        [JsonProperty(PropertyName = "Show_Legal_Fields_Remove__c")]
        [EntityField(false)]
        public System.Boolean ShowLegalFieldsRemovec
        {
            get { return __ShowLegalFieldsRemovec; }
            set { SetField(ref __ShowLegalFieldsRemovec, value, "Show_Legal_Fields_Remove__c"); }
        }
        private System.Boolean __ShowLegalFieldsc;
        [JsonProperty(PropertyName = "Show_Legal_Fields__c")]
        [EntityField(false)]
        public System.Boolean ShowLegalFieldsc
        {
            get { return __ShowLegalFieldsc; }
            set { SetField(ref __ShowLegalFieldsc, value, "Show_Legal_Fields__c"); }
        }
        private System.String __SourceERPc;
        [JsonProperty(PropertyName = "Source_ERP__c")]
        [EntityField(true)]
        public System.String SourceERPc
        {
            get { return __SourceERPc; }
            set { SetField(ref __SourceERPc, value, "Source_ERP__c"); }
        }
        private System.Boolean __StakeholdersReviewc;
        [JsonProperty(PropertyName = "Stakeholders_Review__c")]
        [EntityField(false)]
        public System.Boolean StakeholdersReviewc
        {
            get { return __StakeholdersReviewc; }
            set { SetField(ref __StakeholdersReviewc, value, "Stakeholders_Review__c"); }
        }
        private PickChannelChangeStatus __Statusc;
        [JsonProperty(PropertyName = "Status__c")]
        [EntityField(true)]
        public PickChannelChangeStatus Statusc
        {
            get { return __Statusc; }
            set { SetField(ref __Statusc, value, "Status__c"); }
        }
        private PickChannelChangeSubStatus __SubStatusc;
        [JsonProperty(PropertyName = "Sub_Status__c")]
        [EntityField(true)]
        public PickChannelChangeSubStatus SubStatusc
        {
            get { return __SubStatusc; }
            set { SetField(ref __SubStatusc, value, "Sub_Status__c"); }
        }
        private System.DateTime? __TerminationEffectiveDatec;
        [JsonProperty(PropertyName = "Termination_Effective_Date__c")]
        [EntityField(true)]
        public System.DateTime? TerminationEffectiveDatec
        {
            get { return __TerminationEffectiveDatec; }
            set { SetField(ref __TerminationEffectiveDatec, value, "Termination_Effective_Date__c"); }
        }
        private System.String __TerritoriestoAddc;
        [JsonProperty(PropertyName = "Territories_to_Add__c")]
        [EntityField(true)]
        public System.String TerritoriestoAddc
        {
            get { return __TerritoriestoAddc; }
            set { SetField(ref __TerritoriestoAddc, value, "Territories_to_Add__c"); }
        }
        private System.String __VPGMc;
        [JsonProperty(PropertyName = "VPGM__c")]
        [EntityField(true)]
        public System.String VPGMc
        {
            get { return __VPGMc; }
            set { SetField(ref __VPGMc, value, "VPGM__c"); }
        }
        private System.String __BusinessJustificationc;
        [JsonProperty(PropertyName = "Business_Justification__c")]
        [EntityField(true)]
        public System.String BusinessJustificationc
        {
            get { return __BusinessJustificationc; }
            set { SetField(ref __BusinessJustificationc, value, "Business_Justification__c"); }
        }
        private System.String __ChannelChangeNamec;
        [JsonProperty(PropertyName = "Channel_Change_Name__c")]
        [EntityField(true)]
        public System.String ChannelChangeNamec
        {
            get { return __ChannelChangeNamec; }
            set { SetField(ref __ChannelChangeNamec, value, "Channel_Change_Name__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<ChannelChange,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<ChannelChange,ChannelChangeHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<ChannelChange,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<ChannelChange,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ChannelChange,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Channel_Line_Card_Details__c")]
    public class ChannelLineCardDetails : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelLineCardDetails(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelLineCardDetails()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelLineCardDetailsCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickChannelLineCardDetailsCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ChannelLineCardc;
        [JsonProperty(PropertyName = "Channel_Line_Card__c")]
        [EntityField(false)]
        public System.String ChannelLineCardc
        {
            get { return __ChannelLineCardc; }
            set { SetField(ref __ChannelLineCardc, value, "Channel_Line_Card__c"); }
        }
        private System.String __ActualAmountc;
        [JsonProperty(PropertyName = "Actual_Amount__c")]
        [EntityField(true)]
        public System.String ActualAmountc
        {
            get { return __ActualAmountc; }
            set { SetField(ref __ActualAmountc, value, "Actual_Amount__c"); }
        }
        private System.String __ActualCostc;
        [JsonProperty(PropertyName = "Actual_Cost__c")]
        [EntityField(true)]
        public System.String ActualCostc
        {
            get { return __ActualCostc; }
            set { SetField(ref __ActualCostc, value, "Actual_Cost__c"); }
        }
        private System.Double? __ActualQuantityc;
        [JsonProperty(PropertyName = "Actual_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualQuantityc
        {
            get { return __ActualQuantityc; }
            set { SetField(ref __ActualQuantityc, value, "Actual_Quantity__c"); }
        }
        private System.String __CalendarQuarterc;
        [JsonProperty(PropertyName = "Calendar_Quarter__c")]
        [EntityField(true)]
        public System.String CalendarQuarterc
        {
            get { return __CalendarQuarterc; }
        }
        private System.String __CurrentFiscalQuarterc;
        [JsonProperty(PropertyName = "Current_Fiscal_Quarter__c")]
        [EntityField(true)]
        public System.String CurrentFiscalQuarterc
        {
            get { return __CurrentFiscalQuarterc; }
        }
        private System.String __FiscalQuarterc;
        [JsonProperty(PropertyName = "Fiscal_Quarter__c")]
        [EntityField(true)]
        public System.String FiscalQuarterc
        {
            get { return __FiscalQuarterc; }
        }
        private System.String __FiscalYearc;
        [JsonProperty(PropertyName = "Fiscal_Year__c")]
        [EntityField(true)]
        public System.String FiscalYearc
        {
            get { return __FiscalYearc; }
            set { SetField(ref __FiscalYearc, value, "Fiscal_Year__c"); }
        }
        private System.DateTime? __MonthYearc;
        [JsonProperty(PropertyName = "Month_Year__c")]
        [EntityField(true)]
        public System.DateTime? MonthYearc
        {
            get { return __MonthYearc; }
            set { SetField(ref __MonthYearc, value, "Month_Year__c"); }
        }
        private System.String __Monthc;
        [JsonProperty(PropertyName = "Month__c")]
        [EntityField(true)]
        public System.String Monthc
        {
            get { return __Monthc; }
        }
        private System.String __Percentagec;
        [JsonProperty(PropertyName = "Percentage__c")]
        [EntityField(true)]
        public System.String Percentagec
        {
            get { return __Percentagec; }
        }
        private System.String __PlanAmountc;
        [JsonProperty(PropertyName = "Plan_Amount__c")]
        [EntityField(true)]
        public System.String PlanAmountc
        {
            get { return __PlanAmountc; }
            set { SetField(ref __PlanAmountc, value, "Plan_Amount__c"); }
        }
        private System.String __PlanCostc;
        [JsonProperty(PropertyName = "Plan_Cost__c")]
        [EntityField(true)]
        public System.String PlanCostc
        {
            get { return __PlanCostc; }
            set { SetField(ref __PlanCostc, value, "Plan_Cost__c"); }
        }
        private System.Double? __PlanQuantityc;
        [JsonProperty(PropertyName = "Plan_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlanQuantityc
        {
            get { return __PlanQuantityc; }
            set { SetField(ref __PlanQuantityc, value, "Plan_Quantity__c"); }
        }
        private System.String __UniqueKeyc;
        [JsonProperty(PropertyName = "UniqueKey__c")]
        [EntityField(true)]
        public System.String UniqueKeyc
        {
            get { return __UniqueKeyc; }
            set { SetField(ref __UniqueKeyc, value, "UniqueKey__c"); }
        }
        private System.String __YearFiscalc;
        [JsonProperty(PropertyName = "Year_Fiscal__c")]
        [EntityField(true)]
        public System.String YearFiscalc
        {
            get { return __YearFiscalc; }
        }
        private System.String __Yearc;
        [JsonProperty(PropertyName = "Year__c")]
        [EntityField(true)]
        public System.String Yearc
        {
            get { return __Yearc; }
        }
        private System.String __FiscalMonthc;
        [JsonProperty(PropertyName = "Fiscal_Month__c")]
        [EntityField(true)]
        public System.String FiscalMonthc
        {
            get { return __FiscalMonthc; }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ChannelLineCardDetails,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Channel_Line_Card__c")]
    public class ChannelLineCard : ISalesforceEntity
    {
    [JsonConstructor]
        private ChannelLineCard(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChannelLineCard()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelLineCardCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickChannelLineCardCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __JCIFamilyBrandc;
        [JsonProperty(PropertyName = "JCI_Family_Brand__c")]
        [EntityField(false)]
        public System.String JCIFamilyBrandc
        {
            get { return __JCIFamilyBrandc; }
            set { SetField(ref __JCIFamilyBrandc, value, "JCI_Family_Brand__c"); }
        }
        private System.String __Accountc;
        [JsonProperty(PropertyName = "Account__c")]
        [EntityField(false)]
        public System.String Accountc
        {
            get { return __Accountc; }
            set { SetField(ref __Accountc, value, "Account__c"); }
        }
        private System.String __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(true)]
        public System.String Brandc
        {
            get { return __Brandc; }
        }
        private System.DateTime? __EndDatec;
        [JsonProperty(PropertyName = "End_Date__c")]
        [EntityField(true)]
        public System.DateTime? EndDatec
        {
            get { return __EndDatec; }
            set { SetField(ref __EndDatec, value, "End_Date__c"); }
        }
        private System.String __IsCompetingBrandc;
        [JsonProperty(PropertyName = "Is_Competing_Brand__c")]
        [EntityField(true)]
        public System.String IsCompetingBrandc
        {
            get { return __IsCompetingBrandc; }
        }
        private System.String __Orgc;
        [JsonProperty(PropertyName = "Org__c")]
        [EntityField(true)]
        public System.String Orgc
        {
            get { return __Orgc; }
            set { SetField(ref __Orgc, value, "Org__c"); }
        }
        private System.String __Productc;
        [JsonProperty(PropertyName = "Product__c")]
        [EntityField(true)]
        public System.String Productc
        {
            get { return __Productc; }
            set { SetField(ref __Productc, value, "Product__c"); }
        }
        private System.String __SellingEntityc;
        [JsonProperty(PropertyName = "Selling_Entity__c")]
        [EntityField(true)]
        public System.String SellingEntityc
        {
            get { return __SellingEntityc; }
            set { SetField(ref __SellingEntityc, value, "Selling_Entity__c"); }
        }
        private System.DateTime? __StartDatec;
        [JsonProperty(PropertyName = "Start_Date__c")]
        [EntityField(true)]
        public System.DateTime? StartDatec
        {
            get { return __StartDatec; }
            set { SetField(ref __StartDatec, value, "Start_Date__c"); }
        }
        private System.String __SubOrgc;
        [JsonProperty(PropertyName = "Sub_Org__c")]
        [EntityField(true)]
        public System.String SubOrgc
        {
            get { return __SubOrgc; }
            set { SetField(ref __SubOrgc, value, "Sub_Org__c"); }
        }
        private System.String __SubSellingEntityc;
        [JsonProperty(PropertyName = "Sub_Selling_Entity__c")]
        [EntityField(true)]
        public System.String SubSellingEntityc
        {
            get { return __SubSellingEntityc; }
            set { SetField(ref __SubSellingEntityc, value, "Sub_Selling_Entity__c"); }
        }
        private System.String __UniqueKeyc;
        [JsonProperty(PropertyName = "UniqueKey__c")]
        [EntityField(true)]
        public System.String UniqueKeyc
        {
            get { return __UniqueKeyc; }
            set { SetField(ref __UniqueKeyc, value, "UniqueKey__c"); }
        }
        private System.String __ACtualPFYCostc;
        [JsonProperty(PropertyName = "ACtual_PFY_Cost__c")]
        [EntityField(true)]
        public System.String ACtualPFYCostc
        {
            get { return __ACtualPFYCostc; }
        }
        private System.String __ActualCFYAmountc;
        [JsonProperty(PropertyName = "Actual_CFY_Amount__c")]
        [EntityField(true)]
        public System.String ActualCFYAmountc
        {
            get { return __ActualCFYAmountc; }
        }
        private System.String __ActualCFYCostc;
        [JsonProperty(PropertyName = "Actual_CFY_Cost__c")]
        [EntityField(true)]
        public System.String ActualCFYCostc
        {
            get { return __ActualCFYCostc; }
        }
        private System.Double? __ActualCFYQuantityc;
        [JsonProperty(PropertyName = "Actual_CFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualCFYQuantityc
        {
            get { return __ActualCFYQuantityc; }
        }
        private System.String __ActualPFYAmountc;
        [JsonProperty(PropertyName = "Actual_PFY_Amount__c")]
        [EntityField(true)]
        public System.String ActualPFYAmountc
        {
            get { return __ActualPFYAmountc; }
        }
        private System.Double? __ActualPFYQuantityc;
        [JsonProperty(PropertyName = "Actual_PFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualPFYQuantityc
        {
            get { return __ActualPFYQuantityc; }
        }
        private System.String __ActualYBLAmountc;
        [JsonProperty(PropertyName = "Actual_YBL_Amount__c")]
        [EntityField(true)]
        public System.String ActualYBLAmountc
        {
            get { return __ActualYBLAmountc; }
        }
        private System.String __ActualYBLCostc;
        [JsonProperty(PropertyName = "Actual_YBL_Cost__c")]
        [EntityField(true)]
        public System.String ActualYBLCostc
        {
            get { return __ActualYBLCostc; }
        }
        private System.Double? __ActualYBLQuantityc;
        [JsonProperty(PropertyName = "Actual_YBL_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualYBLQuantityc
        {
            get { return __ActualYBLQuantityc; }
        }
        private System.String __PlannedCFYAmountc;
        [JsonProperty(PropertyName = "Planned_CFY_Amount__c")]
        [EntityField(true)]
        public System.String PlannedCFYAmountc
        {
            get { return __PlannedCFYAmountc; }
        }
        private System.String __PlannedCFYCostc;
        [JsonProperty(PropertyName = "Planned_CFY_Cost__c")]
        [EntityField(true)]
        public System.String PlannedCFYCostc
        {
            get { return __PlannedCFYCostc; }
        }
        private System.Double? __PlannedCFYQuantityc;
        [JsonProperty(PropertyName = "Planned_CFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedCFYQuantityc
        {
            get { return __PlannedCFYQuantityc; }
        }
        private System.String __PlannedPFYAmountc;
        [JsonProperty(PropertyName = "Planned_PFY_Amount__c")]
        [EntityField(true)]
        public System.String PlannedPFYAmountc
        {
            get { return __PlannedPFYAmountc; }
        }
        private System.String __PlannedPFYCostc;
        [JsonProperty(PropertyName = "Planned_PFY_Cost__c")]
        [EntityField(true)]
        public System.String PlannedPFYCostc
        {
            get { return __PlannedPFYCostc; }
        }
        private System.Double? __PlannedPFYQuantityc;
        [JsonProperty(PropertyName = "Planned_PFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedPFYQuantityc
        {
            get { return __PlannedPFYQuantityc; }
        }
        private System.String __PlannedYBLAmountc;
        [JsonProperty(PropertyName = "Planned_YBL_Amount__c")]
        [EntityField(true)]
        public System.String PlannedYBLAmountc
        {
            get { return __PlannedYBLAmountc; }
        }
        private System.String __PlannedYBLCostc;
        [JsonProperty(PropertyName = "Planned_YBL_Cost__c")]
        [EntityField(true)]
        public System.String PlannedYBLCostc
        {
            get { return __PlannedYBLCostc; }
        }
        private System.Double? __PlannedYBLQuantityc;
        [JsonProperty(PropertyName = "Planned_YBL_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedYBLQuantityc
        {
            get { return __PlannedYBLQuantityc; }
        }
        [JsonIgnore]
        [ReferencedByField("Channel_Line_Card__c")]
        public RelationShip<ChannelLineCard,ChannelLineCardDetails> Channel_Line_Card_Details__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Channel_Line_Card__c")]
        public RelationShip<ChannelLineCard,ProductLine> Channel_Line_Card__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ChannelLineCard,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Channel__c")]
    public class Channel : ISalesforceEntity
    {
    [JsonConstructor]
        private Channel(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Channel()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickChannelCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickChannelCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __Descriptionc;
        [JsonProperty(PropertyName = "Description__c")]
        [EntityField(true)]
        public System.String Descriptionc
        {
            get { return __Descriptionc; }
            set { SetField(ref __Descriptionc, value, "Description__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Primary_Channel__c")]
        public RelationShip<Channel,Account> Accounts__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Channel,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Channel,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Channel__c")]
        public RelationShip<Channel,JCIBrand> JCI_Brands__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Channel,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Channel,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Contact")]
    public class Contact : ISalesforceEntity
    {
    [JsonConstructor]
        private Contact(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Contact()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __MasterRecordId;
        [EntityField(true)]
        public System.String MasterRecordId
        {
            get { return __MasterRecordId; }
            set { SetField(ref __MasterRecordId, value, "MasterRecordId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private PickContactSalutation __Salutation;
        [EntityField(true)]
        public PickContactSalutation Salutation
        {
            get { return __Salutation; }
            set { SetField(ref __Salutation, value, "Salutation"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.String __OtherStreet;
        [EntityField(true)]
        public System.String OtherStreet
        {
            get { return __OtherStreet; }
            set { SetField(ref __OtherStreet, value, "OtherStreet"); }
        }
        private System.String __OtherCity;
        [EntityField(true)]
        public System.String OtherCity
        {
            get { return __OtherCity; }
            set { SetField(ref __OtherCity, value, "OtherCity"); }
        }
        private System.String __OtherState;
        [EntityField(true)]
        public System.String OtherState
        {
            get { return __OtherState; }
            set { SetField(ref __OtherState, value, "OtherState"); }
        }
        private System.String __OtherPostalCode;
        [EntityField(true)]
        public System.String OtherPostalCode
        {
            get { return __OtherPostalCode; }
            set { SetField(ref __OtherPostalCode, value, "OtherPostalCode"); }
        }
        private System.String __OtherCountry;
        [EntityField(true)]
        public System.String OtherCountry
        {
            get { return __OtherCountry; }
            set { SetField(ref __OtherCountry, value, "OtherCountry"); }
        }
        private PickContactOtherStateCode __OtherStateCode;
        [EntityField(true)]
        public PickContactOtherStateCode OtherStateCode
        {
            get { return __OtherStateCode; }
            set { SetField(ref __OtherStateCode, value, "OtherStateCode"); }
        }
        private PickContactOtherCountryCode __OtherCountryCode;
        [EntityField(true)]
        public PickContactOtherCountryCode OtherCountryCode
        {
            get { return __OtherCountryCode; }
            set { SetField(ref __OtherCountryCode, value, "OtherCountryCode"); }
        }
        private System.Double? __OtherLatitude;
        [EntityField(true)]
        public System.Double? OtherLatitude
        {
            get { return __OtherLatitude; }
            set { SetField(ref __OtherLatitude, value, "OtherLatitude"); }
        }
        private System.Double? __OtherLongitude;
        [EntityField(true)]
        public System.Double? OtherLongitude
        {
            get { return __OtherLongitude; }
            set { SetField(ref __OtherLongitude, value, "OtherLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __OtherAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address OtherAddress
        {
            get { return __OtherAddress; }
            set { SetField(ref __OtherAddress, value, "OtherAddress"); }
        }
        private System.String __MailingStreet;
        [EntityField(true)]
        public System.String MailingStreet
        {
            get { return __MailingStreet; }
            set { SetField(ref __MailingStreet, value, "MailingStreet"); }
        }
        private System.String __MailingCity;
        [EntityField(true)]
        public System.String MailingCity
        {
            get { return __MailingCity; }
            set { SetField(ref __MailingCity, value, "MailingCity"); }
        }
        private System.String __MailingState;
        [EntityField(true)]
        public System.String MailingState
        {
            get { return __MailingState; }
            set { SetField(ref __MailingState, value, "MailingState"); }
        }
        private System.String __MailingPostalCode;
        [EntityField(true)]
        public System.String MailingPostalCode
        {
            get { return __MailingPostalCode; }
            set { SetField(ref __MailingPostalCode, value, "MailingPostalCode"); }
        }
        private System.String __MailingCountry;
        [EntityField(true)]
        public System.String MailingCountry
        {
            get { return __MailingCountry; }
            set { SetField(ref __MailingCountry, value, "MailingCountry"); }
        }
        private PickContactMailingStateCode __MailingStateCode;
        [EntityField(true)]
        public PickContactMailingStateCode MailingStateCode
        {
            get { return __MailingStateCode; }
            set { SetField(ref __MailingStateCode, value, "MailingStateCode"); }
        }
        private PickContactMailingCountryCode __MailingCountryCode;
        [EntityField(true)]
        public PickContactMailingCountryCode MailingCountryCode
        {
            get { return __MailingCountryCode; }
            set { SetField(ref __MailingCountryCode, value, "MailingCountryCode"); }
        }
        private System.Double? __MailingLatitude;
        [EntityField(true)]
        public System.Double? MailingLatitude
        {
            get { return __MailingLatitude; }
            set { SetField(ref __MailingLatitude, value, "MailingLatitude"); }
        }
        private System.Double? __MailingLongitude;
        [EntityField(true)]
        public System.Double? MailingLongitude
        {
            get { return __MailingLongitude; }
            set { SetField(ref __MailingLongitude, value, "MailingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __MailingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address MailingAddress
        {
            get { return __MailingAddress; }
            set { SetField(ref __MailingAddress, value, "MailingAddress"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __HomePhone;
        [EntityField(true)]
        public System.String HomePhone
        {
            get { return __HomePhone; }
            set { SetField(ref __HomePhone, value, "HomePhone"); }
        }
        private System.String __OtherPhone;
        [EntityField(true)]
        public System.String OtherPhone
        {
            get { return __OtherPhone; }
            set { SetField(ref __OtherPhone, value, "OtherPhone"); }
        }
        private System.String __AssistantPhone;
        [EntityField(true)]
        public System.String AssistantPhone
        {
            get { return __AssistantPhone; }
            set { SetField(ref __AssistantPhone, value, "AssistantPhone"); }
        }
        private System.String __ReportsToId;
        [EntityField(true)]
        public System.String ReportsToId
        {
            get { return __ReportsToId; }
            set { SetField(ref __ReportsToId, value, "ReportsToId"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Department;
        [EntityField(true)]
        public System.String Department
        {
            get { return __Department; }
            set { SetField(ref __Department, value, "Department"); }
        }
        private System.String __AssistantName;
        [EntityField(true)]
        public System.String AssistantName
        {
            get { return __AssistantName; }
            set { SetField(ref __AssistantName, value, "AssistantName"); }
        }
        private PickContactLeadSource __LeadSource;
        [EntityField(true)]
        public PickContactLeadSource LeadSource
        {
            get { return __LeadSource; }
            set { SetField(ref __LeadSource, value, "LeadSource"); }
        }
        private System.DateTime? __Birthdate;
        [EntityField(true)]
        public System.DateTime? Birthdate
        {
            get { return __Birthdate; }
            set { SetField(ref __Birthdate, value, "Birthdate"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickContactCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickContactCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __HasOptedOutOfEmail;
        [EntityField(false)]
        public System.Boolean HasOptedOutOfEmail
        {
            get { return __HasOptedOutOfEmail; }
            set { SetField(ref __HasOptedOutOfEmail, value, "HasOptedOutOfEmail"); }
        }
        private System.Boolean __HasOptedOutOfFax;
        [EntityField(false)]
        public System.Boolean HasOptedOutOfFax
        {
            get { return __HasOptedOutOfFax; }
            set { SetField(ref __HasOptedOutOfFax, value, "HasOptedOutOfFax"); }
        }
        private System.Boolean __DoNotCall;
        [EntityField(false)]
        public System.Boolean DoNotCall
        {
            get { return __DoNotCall; }
            set { SetField(ref __DoNotCall, value, "DoNotCall"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastCURequestDate;
        [EntityField(true)]
        public System.DateTime? LastCURequestDate
        {
            get { return __LastCURequestDate; }
            set { SetField(ref __LastCURequestDate, value, "LastCURequestDate"); }
        }
        private System.DateTime? __LastCUUpdateDate;
        [EntityField(true)]
        public System.DateTime? LastCUUpdateDate
        {
            get { return __LastCUUpdateDate; }
            set { SetField(ref __LastCUUpdateDate, value, "LastCUUpdateDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __EmailBouncedReason;
        [EntityField(true)]
        public System.String EmailBouncedReason
        {
            get { return __EmailBouncedReason; }
            set { SetField(ref __EmailBouncedReason, value, "EmailBouncedReason"); }
        }
        private System.DateTime? __EmailBouncedDate;
        [EntityField(true)]
        public System.DateTime? EmailBouncedDate
        {
            get { return __EmailBouncedDate; }
            set { SetField(ref __EmailBouncedDate, value, "EmailBouncedDate"); }
        }
        private System.Boolean __IsEmailBounced;
        [EntityField(false)]
        public System.Boolean IsEmailBounced
        {
            get { return __IsEmailBounced; }
            set { SetField(ref __IsEmailBounced, value, "IsEmailBounced"); }
        }
        private System.String __PhotoUrl;
        [EntityField(true)]
        public System.String PhotoUrl
        {
            get { return __PhotoUrl; }
            set { SetField(ref __PhotoUrl, value, "PhotoUrl"); }
        }
        private System.String __Jigsaw;
        [EntityField(true)]
        public System.String Jigsaw
        {
            get { return __Jigsaw; }
            set { SetField(ref __Jigsaw, value, "Jigsaw"); }
        }
        private System.String __JigsawContactId;
        [EntityField(true)]
        public System.String JigsawContactId
        {
            get { return __JigsawContactId; }
            set { SetField(ref __JigsawContactId, value, "JigsawContactId"); }
        }
        private PickContactInfluenceLevel __InfluenceLevelc;
        [JsonProperty(PropertyName = "Influence_Level__c")]
        [EntityField(true)]
        public PickContactInfluenceLevel InfluenceLevelc
        {
            get { return __InfluenceLevelc; }
            set { SetField(ref __InfluenceLevelc, value, "Influence_Level__c"); }
        }
        private System.Boolean __IsActiveInactivec;
        [JsonProperty(PropertyName = "Is_Active_Inactive__c")]
        [EntityField(false)]
        public System.Boolean IsActiveInactivec
        {
            get { return __IsActiveInactivec; }
            set { SetField(ref __IsActiveInactivec, value, "Is_Active_Inactive__c"); }
        }
        private PickContactPreferredContactMethod __PreferredContactMethodc;
        [JsonProperty(PropertyName = "Preferred_Contact_Method__c")]
        [EntityField(true)]
        public PickContactPreferredContactMethod PreferredContactMethodc
        {
            get { return __PreferredContactMethodc; }
            set { SetField(ref __PreferredContactMethodc, value, "Preferred_Contact_Method__c"); }
        }
        private PickContactReasonForInactivation __ReasonforInactivationc;
        [JsonProperty(PropertyName = "Reason_for_Inactivation__c")]
        [EntityField(true)]
        public PickContactReasonForInactivation ReasonforInactivationc
        {
            get { return __ReasonforInactivationc; }
            set { SetField(ref __ReasonforInactivationc, value, "Reason_for_Inactivation__c"); }
        }
        private PickContactRelationshipStatus __RelationshipStatusc;
        [JsonProperty(PropertyName = "Relationship_Status__c")]
        [EntityField(true)]
        public PickContactRelationshipStatus RelationshipStatusc
        {
            get { return __RelationshipStatusc; }
            set { SetField(ref __RelationshipStatusc, value, "Relationship_Status__c"); }
        }
        private System.DateTime? __StartDtc;
        [JsonProperty(PropertyName = "Start_Dt__c")]
        [EntityField(true)]
        public System.DateTime? StartDtc
        {
            get { return __StartDtc; }
            set { SetField(ref __StartDtc, value, "Start_Dt__c"); }
        }
        private System.String __UserIdc;
        [JsonProperty(PropertyName = "User_Id__c")]
        [EntityField(true)]
        public System.String UserIdc
        {
            get { return __UserIdc; }
            set { SetField(ref __UserIdc, value, "User_Id__c"); }
        }
        private System.Double? __YrsatCurrentPositionc;
        [JsonProperty(PropertyName = "Yrs_at_Current_Position__c")]
        [EntityField(true)]
        public System.Double? YrsatCurrentPositionc
        {
            get { return __YrsatCurrentPositionc; }
        }
        private PickContactFunction __Functionc;
        [JsonProperty(PropertyName = "Function__c")]
        [EntityField(true)]
        public PickContactFunction Functionc
        {
            get { return __Functionc; }
            set { SetField(ref __Functionc, value, "Function__c"); }
        }
        private PickContactPrimaryContact __PrimaryContactc;
        [JsonProperty(PropertyName = "Primary_Contact__c")]
        [EntityField(true)]
        public PickContactPrimaryContact PrimaryContactc
        {
            get { return __PrimaryContactc; }
            set { SetField(ref __PrimaryContactc, value, "Primary_Contact__c"); }
        }
        private System.String __picampaignc;
        [JsonProperty(PropertyName = "pi__campaign__c")]
        [EntityField(true)]
        public System.String picampaignc
        {
            get { return __picampaignc; }
            set { SetField(ref __picampaignc, value, "pi__campaign__c"); }
        }
        private System.String __picommentsc;
        [JsonProperty(PropertyName = "pi__comments__c")]
        [EntityField(true)]
        public System.String picommentsc
        {
            get { return __picommentsc; }
            set { SetField(ref __picommentsc, value, "pi__comments__c"); }
        }
        private System.DateTime? __piconversiondatec;
        [JsonProperty(PropertyName = "pi__conversion_date__c")]
        [EntityField(true)]
        public System.DateTime? piconversiondatec
        {
            get { return __piconversiondatec; }
            set { SetField(ref __piconversiondatec, value, "pi__conversion_date__c"); }
        }
        private System.String __piconversionobjectnamec;
        [JsonProperty(PropertyName = "pi__conversion_object_name__c")]
        [EntityField(true)]
        public System.String piconversionobjectnamec
        {
            get { return __piconversionobjectnamec; }
            set { SetField(ref __piconversionobjectnamec, value, "pi__conversion_object_name__c"); }
        }
        private System.String __piconversionobjecttypec;
        [JsonProperty(PropertyName = "pi__conversion_object_type__c")]
        [EntityField(true)]
        public System.String piconversionobjecttypec
        {
            get { return __piconversionobjecttypec; }
            set { SetField(ref __piconversionobjecttypec, value, "pi__conversion_object_type__c"); }
        }
        private System.DateTime? __picreateddatec;
        [JsonProperty(PropertyName = "pi__created_date__c")]
        [EntityField(true)]
        public System.DateTime? picreateddatec
        {
            get { return __picreateddatec; }
            set { SetField(ref __picreateddatec, value, "pi__created_date__c"); }
        }
        private System.DateTime? __pifirstactivityc;
        [JsonProperty(PropertyName = "pi__first_activity__c")]
        [EntityField(true)]
        public System.DateTime? pifirstactivityc
        {
            get { return __pifirstactivityc; }
            set { SetField(ref __pifirstactivityc, value, "pi__first_activity__c"); }
        }
        private System.String __pifirstsearchtermc;
        [JsonProperty(PropertyName = "pi__first_search_term__c")]
        [EntityField(true)]
        public System.String pifirstsearchtermc
        {
            get { return __pifirstsearchtermc; }
            set { SetField(ref __pifirstsearchtermc, value, "pi__first_search_term__c"); }
        }
        private System.String __pifirstsearchtypec;
        [JsonProperty(PropertyName = "pi__first_search_type__c")]
        [EntityField(true)]
        public System.String pifirstsearchtypec
        {
            get { return __pifirstsearchtypec; }
            set { SetField(ref __pifirstsearchtypec, value, "pi__first_search_type__c"); }
        }
        private System.String __pifirsttouchurlc;
        [JsonProperty(PropertyName = "pi__first_touch_url__c")]
        [EntityField(true)]
        public System.String pifirsttouchurlc
        {
            get { return __pifirsttouchurlc; }
            set { SetField(ref __pifirsttouchurlc, value, "pi__first_touch_url__c"); }
        }
        private System.String __pigradec;
        [JsonProperty(PropertyName = "pi__grade__c")]
        [EntityField(true)]
        public System.String pigradec
        {
            get { return __pigradec; }
            set { SetField(ref __pigradec, value, "pi__grade__c"); }
        }
        private System.DateTime? __pilastactivityc;
        [JsonProperty(PropertyName = "pi__last_activity__c")]
        [EntityField(true)]
        public System.DateTime? pilastactivityc
        {
            get { return __pilastactivityc; }
            set { SetField(ref __pilastactivityc, value, "pi__last_activity__c"); }
        }
        private System.String __pinotesc;
        [JsonProperty(PropertyName = "pi__notes__c")]
        [EntityField(true)]
        public System.String pinotesc
        {
            get { return __pinotesc; }
            set { SetField(ref __pinotesc, value, "pi__notes__c"); }
        }
        private System.Boolean __pipardothardbouncedc;
        [JsonProperty(PropertyName = "pi__pardot_hard_bounced__c")]
        [EntityField(false)]
        public System.Boolean pipardothardbouncedc
        {
            get { return __pipardothardbouncedc; }
            set { SetField(ref __pipardothardbouncedc, value, "pi__pardot_hard_bounced__c"); }
        }
        private System.Double? __piscorec;
        [JsonProperty(PropertyName = "pi__score__c")]
        [EntityField(true)]
        public System.Double? piscorec
        {
            get { return __piscorec; }
            set { SetField(ref __piscorec, value, "pi__score__c"); }
        }
        private System.String __piurlc;
        [JsonProperty(PropertyName = "pi__url__c")]
        [EntityField(true)]
        public System.String piurlc
        {
            get { return __piurlc; }
            set { SetField(ref __piurlc, value, "pi__url__c"); }
        }
        private System.String __piutmcampaignc;
        [JsonProperty(PropertyName = "pi__utm_campaign__c")]
        [EntityField(true)]
        public System.String piutmcampaignc
        {
            get { return __piutmcampaignc; }
            set { SetField(ref __piutmcampaignc, value, "pi__utm_campaign__c"); }
        }
        private System.String __piutmcontentc;
        [JsonProperty(PropertyName = "pi__utm_content__c")]
        [EntityField(true)]
        public System.String piutmcontentc
        {
            get { return __piutmcontentc; }
            set { SetField(ref __piutmcontentc, value, "pi__utm_content__c"); }
        }
        private System.String __piutmmediumc;
        [JsonProperty(PropertyName = "pi__utm_medium__c")]
        [EntityField(true)]
        public System.String piutmmediumc
        {
            get { return __piutmmediumc; }
            set { SetField(ref __piutmmediumc, value, "pi__utm_medium__c"); }
        }
        private System.String __piutmsourcec;
        [JsonProperty(PropertyName = "pi__utm_source__c")]
        [EntityField(true)]
        public System.String piutmsourcec
        {
            get { return __piutmsourcec; }
            set { SetField(ref __piutmsourcec, value, "pi__utm_source__c"); }
        }
        private System.String __piutmtermc;
        [JsonProperty(PropertyName = "pi__utm_term__c")]
        [EntityField(true)]
        public System.String piutmtermc
        {
            get { return __piutmtermc; }
            set { SetField(ref __piutmtermc, value, "pi__utm_term__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickContactEventsSelectedEvents> __EventsSelectedEventsc;
        [JsonProperty(PropertyName = "Events_Selected_Events__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickContactEventsSelectedEvents> EventsSelectedEventsc
        {
            get { return __EventsSelectedEventsc; }
            set { SetField(ref __EventsSelectedEventsc, value, "Events_Selected_Events__c"); }
        }
        private System.String __Extensionc;
        [JsonProperty(PropertyName = "Extension__c")]
        [EntityField(true)]
        public System.String Extensionc
        {
            get { return __Extensionc; }
            set { SetField(ref __Extensionc, value, "Extension__c"); }
        }
        private System.Boolean __CustomerMailingc;
        [JsonProperty(PropertyName = "Customer_Mailing__c")]
        [EntityField(false)]
        public System.Boolean CustomerMailingc
        {
            get { return __CustomerMailingc; }
            set { SetField(ref __CustomerMailingc, value, "Customer_Mailing__c"); }
        }
        private System.String __DBEmailc;
        [JsonProperty(PropertyName = "D_B_Email__c")]
        [EntityField(true)]
        public System.String DBEmailc
        {
            get { return __DBEmailc; }
            set { SetField(ref __DBEmailc, value, "D_B_Email__c"); }
        }
        private System.String __DBPhonec;
        [JsonProperty(PropertyName = "D_B_Phone__c")]
        [EntityField(true)]
        public System.String DBPhonec
        {
            get { return __DBPhonec; }
            set { SetField(ref __DBPhonec, value, "D_B_Phone__c"); }
        }
        private System.String __ContactOwnerRolec;
        [JsonProperty(PropertyName = "Contact_Owner_Role__c")]
        [EntityField(true)]
        public System.String ContactOwnerRolec
        {
            get { return __ContactOwnerRolec; }
        }
        private System.String __MailingAddressforSearchc;
        [JsonProperty(PropertyName = "Mailing_Address_for_Search__c")]
        [EntityField(true)]
        public System.String MailingAddressforSearchc
        {
            get { return __MailingAddressforSearchc; }
        }
        [JsonIgnore]
        [ReferencedByField("Contact__c")]
        public RelationShip<Contact,ActionPlan> R00NR0000000VZZ8MAO__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Contact_to_Merge_With__c")]
        public RelationShip<Contact,Case> Contact__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,ContactHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Contact2__c")]
        public RelationShip<Contact,Opportunity> Opportunities1__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Contact3__c")]
        public RelationShip<Contact,Opportunity> Opportunities2__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Contact4__c")]
        public RelationShip<Contact,Opportunity> Opportunities3__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Contact_NAC__c")]
        public RelationShip<Contact,Opportunity> Opportunities4__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Contact__c")]
        public RelationShip<Contact,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Contact,TaskRelation> TaskRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Contact,TaskWhoRelation> TaskWhoRelations
        {
            get;set;
        }
    }
    [EntityName("ContactHistory")]
    public class ContactHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ContactHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContactHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickContactHistoryField __Field;
        [EntityField(false)]
        public PickContactHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Cust_Goal__c")]
    public class CustGoal : ISalesforceEntity
    {
    [JsonConstructor]
        private CustGoal(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CustGoal()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickCustGoalCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickCustGoalCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Acctc;
        [JsonProperty(PropertyName = "Acct__c")]
        [EntityField(false)]
        public System.String Acctc
        {
            get { return __Acctc; }
            set { SetField(ref __Acctc, value, "Acct__c"); }
        }
        private System.String __Descrc;
        [JsonProperty(PropertyName = "Descr__c")]
        [EntityField(true)]
        public System.String Descrc
        {
            get { return __Descrc; }
            set { SetField(ref __Descrc, value, "Descr__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickCustGoalJCIInternalBrands> __JCIInternalBrandsc;
        [JsonProperty(PropertyName = "JCI_Internal_Brands__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickCustGoalJCIInternalBrands> JCIInternalBrandsc
        {
            get { return __JCIInternalBrandsc; }
            set { SetField(ref __JCIInternalBrandsc, value, "JCI_Internal_Brands__c"); }
        }
        private PickCustGoalStatus __Statusc;
        [JsonProperty(PropertyName = "Status__c")]
        [EntityField(true)]
        public PickCustGoalStatus Statusc
        {
            get { return __Statusc; }
            set { SetField(ref __Statusc, value, "Status__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Cust_Goal2__c")]
        public RelationShip<CustGoal,StrategicGoal> Strategic_Initiatives__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<CustGoal,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Dashboard")]
    public class Dashboard : ISalesforceEntity
    {
    [JsonConstructor]
        private Dashboard(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Dashboard()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __FolderId;
        [EntityField(false)]
        public System.String FolderId
        {
            get { return __FolderId; }
            set { SetField(ref __FolderId, value, "FolderId"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickDashboardLeftSize __LeftSize;
        [EntityField(false)]
        public PickDashboardLeftSize LeftSize
        {
            get { return __LeftSize; }
            set { SetField(ref __LeftSize, value, "LeftSize"); }
        }
        private PickDashboardMiddleSize __MiddleSize;
        [EntityField(true)]
        public PickDashboardMiddleSize MiddleSize
        {
            get { return __MiddleSize; }
            set { SetField(ref __MiddleSize, value, "MiddleSize"); }
        }
        private PickDashboardRightSize __RightSize;
        [EntityField(false)]
        public PickDashboardRightSize RightSize
        {
            get { return __RightSize; }
            set { SetField(ref __RightSize, value, "RightSize"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __RunningUserId;
        [EntityField(false)]
        public System.String RunningUserId
        {
            get { return __RunningUserId; }
            set { SetField(ref __RunningUserId, value, "RunningUserId"); }
        }
        private System.Int32 __TitleColor;
        [EntityField(false)]
        public System.Int32 TitleColor
        {
            get { return __TitleColor; }
            set { SetField(ref __TitleColor, value, "TitleColor"); }
        }
        private System.Int32 __TitleSize;
        [EntityField(false)]
        public System.Int32 TitleSize
        {
            get { return __TitleSize; }
            set { SetField(ref __TitleSize, value, "TitleSize"); }
        }
        private System.Int32 __TextColor;
        [EntityField(false)]
        public System.Int32 TextColor
        {
            get { return __TextColor; }
            set { SetField(ref __TextColor, value, "TextColor"); }
        }
        private System.Int32 __BackgroundStart;
        [EntityField(false)]
        public System.Int32 BackgroundStart
        {
            get { return __BackgroundStart; }
            set { SetField(ref __BackgroundStart, value, "BackgroundStart"); }
        }
        private System.Int32 __BackgroundEnd;
        [EntityField(false)]
        public System.Int32 BackgroundEnd
        {
            get { return __BackgroundEnd; }
            set { SetField(ref __BackgroundEnd, value, "BackgroundEnd"); }
        }
        private PickDashboardBackgroundDirection __BackgroundDirection;
        [EntityField(false)]
        public PickDashboardBackgroundDirection BackgroundDirection
        {
            get { return __BackgroundDirection; }
            set { SetField(ref __BackgroundDirection, value, "BackgroundDirection"); }
        }
        private PickDashboardType __Type;
        [EntityField(false)]
        public PickDashboardType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
    }
    [EntityName("Event")]
    public class Event : ISalesforceEntity
    {
    [JsonConstructor]
        private Event(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Event()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.Int32? __WhoCount;
        [EntityField(true)]
        public System.Int32? WhoCount
        {
            get { return __WhoCount; }
            set { SetField(ref __WhoCount, value, "WhoCount"); }
        }
        private System.Int32? __WhatCount;
        [EntityField(true)]
        public System.Int32? WhatCount
        {
            get { return __WhatCount; }
            set { SetField(ref __WhatCount, value, "WhatCount"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.String __Location;
        [EntityField(true)]
        public System.String Location
        {
            get { return __Location; }
            set { SetField(ref __Location, value, "Location"); }
        }
        private System.Boolean __IsAllDayEvent;
        [EntityField(false)]
        public System.Boolean IsAllDayEvent
        {
            get { return __IsAllDayEvent; }
            set { SetField(ref __IsAllDayEvent, value, "IsAllDayEvent"); }
        }
        private System.DateTime? __ActivityDateTime;
        [EntityField(true)]
        public System.DateTime? ActivityDateTime
        {
            get { return __ActivityDateTime; }
            set { SetField(ref __ActivityDateTime, value, "ActivityDateTime"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private System.Int32? __DurationInMinutes;
        [EntityField(true)]
        public System.Int32? DurationInMinutes
        {
            get { return __DurationInMinutes; }
            set { SetField(ref __DurationInMinutes, value, "DurationInMinutes"); }
        }
        private System.DateTime? __StartDateTime;
        [EntityField(true)]
        public System.DateTime? StartDateTime
        {
            get { return __StartDateTime; }
            set { SetField(ref __StartDateTime, value, "StartDateTime"); }
        }
        private System.DateTime? __EndDateTime;
        [EntityField(true)]
        public System.DateTime? EndDateTime
        {
            get { return __EndDateTime; }
            set { SetField(ref __EndDateTime, value, "EndDateTime"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private PickEventCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickEventCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private PickEventType __Type;
        [EntityField(true)]
        public PickEventType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private PickEventShowAs __ShowAs;
        [EntityField(true)]
        public PickEventShowAs ShowAs
        {
            get { return __ShowAs; }
            set { SetField(ref __ShowAs, value, "ShowAs"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.Boolean __IsChild;
        [EntityField(false)]
        public System.Boolean IsChild
        {
            get { return __IsChild; }
            set { SetField(ref __IsChild, value, "IsChild"); }
        }
        private System.Boolean __IsGroupEvent;
        [EntityField(false)]
        public System.Boolean IsGroupEvent
        {
            get { return __IsGroupEvent; }
            set { SetField(ref __IsGroupEvent, value, "IsGroupEvent"); }
        }
        private PickEventGroupEventType __GroupEventType;
        [EntityField(true)]
        public PickEventGroupEventType GroupEventType
        {
            get { return __GroupEventType; }
            set { SetField(ref __GroupEventType, value, "GroupEventType"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsArchived;
        [EntityField(false)]
        public System.Boolean IsArchived
        {
            get { return __IsArchived; }
            set { SetField(ref __IsArchived, value, "IsArchived"); }
        }
        private System.Boolean __IsVisibleInSelfService;
        [EntityField(false)]
        public System.Boolean IsVisibleInSelfService
        {
            get { return __IsVisibleInSelfService; }
            set { SetField(ref __IsVisibleInSelfService, value, "IsVisibleInSelfService"); }
        }
        private System.String __RecurrenceActivityId;
        [EntityField(true)]
        public System.String RecurrenceActivityId
        {
            get { return __RecurrenceActivityId; }
            set { SetField(ref __RecurrenceActivityId, value, "RecurrenceActivityId"); }
        }
        private System.Boolean __IsRecurrence;
        [EntityField(false)]
        public System.Boolean IsRecurrence
        {
            get { return __IsRecurrence; }
            set { SetField(ref __IsRecurrence, value, "IsRecurrence"); }
        }
        private System.DateTime? __RecurrenceStartDateTime;
        [EntityField(true)]
        public System.DateTime? RecurrenceStartDateTime
        {
            get { return __RecurrenceStartDateTime; }
            set { SetField(ref __RecurrenceStartDateTime, value, "RecurrenceStartDateTime"); }
        }
        private System.DateTime? __RecurrenceEndDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceEndDateOnly
        {
            get { return __RecurrenceEndDateOnly; }
            set { SetField(ref __RecurrenceEndDateOnly, value, "RecurrenceEndDateOnly"); }
        }
        private PickEventRecurrenceTimeZoneSidKey __RecurrenceTimeZoneSidKey;
        [EntityField(true)]
        public PickEventRecurrenceTimeZoneSidKey RecurrenceTimeZoneSidKey
        {
            get { return __RecurrenceTimeZoneSidKey; }
            set { SetField(ref __RecurrenceTimeZoneSidKey, value, "RecurrenceTimeZoneSidKey"); }
        }
        private PickEventRecurrenceType __RecurrenceType;
        [EntityField(true)]
        public PickEventRecurrenceType RecurrenceType
        {
            get { return __RecurrenceType; }
            set { SetField(ref __RecurrenceType, value, "RecurrenceType"); }
        }
        private System.Int32? __RecurrenceInterval;
        [EntityField(true)]
        public System.Int32? RecurrenceInterval
        {
            get { return __RecurrenceInterval; }
            set { SetField(ref __RecurrenceInterval, value, "RecurrenceInterval"); }
        }
        private System.Int32? __RecurrenceDayOfWeekMask;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfWeekMask
        {
            get { return __RecurrenceDayOfWeekMask; }
            set { SetField(ref __RecurrenceDayOfWeekMask, value, "RecurrenceDayOfWeekMask"); }
        }
        private System.Int32? __RecurrenceDayOfMonth;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfMonth
        {
            get { return __RecurrenceDayOfMonth; }
            set { SetField(ref __RecurrenceDayOfMonth, value, "RecurrenceDayOfMonth"); }
        }
        private PickEventRecurrenceInstance __RecurrenceInstance;
        [EntityField(true)]
        public PickEventRecurrenceInstance RecurrenceInstance
        {
            get { return __RecurrenceInstance; }
            set { SetField(ref __RecurrenceInstance, value, "RecurrenceInstance"); }
        }
        private PickEventRecurrenceMonthOfYear __RecurrenceMonthOfYear;
        [EntityField(true)]
        public PickEventRecurrenceMonthOfYear RecurrenceMonthOfYear
        {
            get { return __RecurrenceMonthOfYear; }
            set { SetField(ref __RecurrenceMonthOfYear, value, "RecurrenceMonthOfYear"); }
        }
        private System.DateTime? __OriginalInstanceDateTime;
        [EntityField(true)]
        public System.DateTime? OriginalInstanceDateTime
        {
            get { return __OriginalInstanceDateTime; }
            set { SetField(ref __OriginalInstanceDateTime, value, "OriginalInstanceDateTime"); }
        }
        private System.Boolean __IsException;
        [EntityField(false)]
        public System.Boolean IsException
        {
            get { return __IsException; }
            set { SetField(ref __IsException, value, "IsException"); }
        }
        private System.Boolean __IsClientManaged;
        [EntityField(false)]
        public System.Boolean IsClientManaged
        {
            get { return __IsClientManaged; }
            set { SetField(ref __IsClientManaged, value, "IsClientManaged"); }
        }
        private System.String __ClientGuid;
        [EntityField(true)]
        public System.String ClientGuid
        {
            get { return __ClientGuid; }
            set { SetField(ref __ClientGuid, value, "ClientGuid"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        private System.String __DBActivityTypec;
        [JsonProperty(PropertyName = "DB_Activity_Type__c")]
        [EntityField(true)]
        public System.String DBActivityTypec
        {
            get { return __DBActivityTypec; }
        }
        private PickEventEventStatus __EventStatusc;
        [JsonProperty(PropertyName = "Event_Status__c")]
        [EntityField(true)]
        public PickEventEventStatus EventStatusc
        {
            get { return __EventStatusc; }
            set { SetField(ref __EventStatusc, value, "Event_Status__c"); }
        }
        private PickEventJCIActivitySubTypes __JCIActivitySubTypesc;
        [JsonProperty(PropertyName = "JCI_Activity_Sub_Types__c")]
        [EntityField(true)]
        public PickEventJCIActivitySubTypes JCIActivitySubTypesc
        {
            get { return __JCIActivitySubTypesc; }
            set { SetField(ref __JCIActivitySubTypesc, value, "JCI_Activity_Sub_Types__c"); }
        }
        private PickEventJCIActivityTypes __JCIActivityTypesc;
        [JsonProperty(PropertyName = "JCI_Activity_Types__c")]
        [EntityField(true)]
        public PickEventJCIActivityTypes JCIActivityTypesc
        {
            get { return __JCIActivityTypesc; }
            set { SetField(ref __JCIActivityTypesc, value, "JCI_Activity_Types__c"); }
        }
        private System.String __NACCreatedByUserManagerNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Manager_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserManagerNamec
        {
            get { return __NACCreatedByUserManagerNamec; }
        }
        private System.String __NACCreatedByUserProfileNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Profile_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserProfileNamec
        {
            get { return __NACCreatedByUserProfileNamec; }
        }
        private PickEventObservedUnobserved __ObservedUnobservedc;
        [JsonProperty(PropertyName = "Observed_Unobserved__c")]
        [EntityField(true)]
        public PickEventObservedUnobserved ObservedUnobservedc
        {
            get { return __ObservedUnobservedc; }
            set { SetField(ref __ObservedUnobservedc, value, "Observed_Unobserved__c"); }
        }
        private System.String __TaskTemplateIdc;
        [JsonProperty(PropertyName = "TaskTemplateId__c")]
        [EntityField(true)]
        public System.String TaskTemplateIdc
        {
            get { return __TaskTemplateIdc; }
            set { SetField(ref __TaskTemplateIdc, value, "TaskTemplateId__c"); }
        }
        private System.String __NACCreatedByUserRoleNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Role_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserRoleNamec
        {
            get { return __NACCreatedByUserRoleNamec; }
        }
        private System.String __KeyIssuesc;
        [JsonProperty(PropertyName = "Key_Issues__c")]
        [EntityField(true)]
        public System.String KeyIssuesc
        {
            get { return __KeyIssuesc; }
            set { SetField(ref __KeyIssuesc, value, "Key_Issues__c"); }
        }
        private System.String __MainTopicc;
        [JsonProperty(PropertyName = "Main_Topic__c")]
        [EntityField(true)]
        public System.String MainTopicc
        {
            get { return __MainTopicc; }
            set { SetField(ref __MainTopicc, value, "Main_Topic__c"); }
        }
        private System.Boolean __PastDuec;
        [JsonProperty(PropertyName = "Past_Due__c")]
        [EntityField(false)]
        public System.Boolean PastDuec
        {
            get { return __PastDuec; }
        }
        private System.String __AACCSFCNTRCalledc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Called__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRCalledc
        {
            get { return __AACCSFCNTRCalledc; }
            set { SetField(ref __AACCSFCNTRCalledc, value, "AACC_SF_CNTR__Called__c"); }
        }
        private System.String __AACCSFCNTRCallerc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Caller__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRCallerc
        {
            get { return __AACCSFCNTRCallerc; }
            set { SetField(ref __AACCSFCNTRCallerc, value, "AACC_SF_CNTR__Caller__c"); }
        }
        private System.String __AACCSFCNTRQueuec;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Queue__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRQueuec
        {
            get { return __AACCSFCNTRQueuec; }
            set { SetField(ref __AACCSFCNTRQueuec, value, "AACC_SF_CNTR__Queue__c"); }
        }
        private System.String __AACCSFCNTRUUIc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__UUI__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRUUIc
        {
            get { return __AACCSFCNTRUUIc; }
            set { SetField(ref __AACCSFCNTRUUIc, value, "AACC_SF_CNTR__UUI__c"); }
        }
        private System.Double? __Attendedc;
        [JsonProperty(PropertyName = "Attended__c")]
        [EntityField(true)]
        public System.Double? Attendedc
        {
            get { return __Attendedc; }
            set { SetField(ref __Attendedc, value, "Attended__c"); }
        }
        private System.Double? __Invitedc;
        [JsonProperty(PropertyName = "Invited__c")]
        [EntityField(true)]
        public System.Double? Invitedc
        {
            get { return __Invitedc; }
            set { SetField(ref __Invitedc, value, "Invited__c"); }
        }
        private System.String __AACCCNTRCalledc;
        [JsonProperty(PropertyName = "AACC_CNTR__Called__c")]
        [EntityField(true)]
        public System.String AACCCNTRCalledc
        {
            get { return __AACCCNTRCalledc; }
            set { SetField(ref __AACCCNTRCalledc, value, "AACC_CNTR__Called__c"); }
        }
        private System.String __AACCCNTRCallerc;
        [JsonProperty(PropertyName = "AACC_CNTR__Caller__c")]
        [EntityField(true)]
        public System.String AACCCNTRCallerc
        {
            get { return __AACCCNTRCallerc; }
            set { SetField(ref __AACCCNTRCallerc, value, "AACC_CNTR__Caller__c"); }
        }
        private System.String __AACCCNTRQueuec;
        [JsonProperty(PropertyName = "AACC_CNTR__Queue__c")]
        [EntityField(true)]
        public System.String AACCCNTRQueuec
        {
            get { return __AACCCNTRQueuec; }
            set { SetField(ref __AACCCNTRQueuec, value, "AACC_CNTR__Queue__c"); }
        }
        private System.String __AACCCNTRUUIc;
        [JsonProperty(PropertyName = "AACC_CNTR__UUI__c")]
        [EntityField(true)]
        public System.String AACCCNTRUUIc
        {
            get { return __AACCCNTRUUIc; }
            set { SetField(ref __AACCCNTRUUIc, value, "AACC_CNTR__UUI__c"); }
        }
        private PickEventEventTaskType __EventTaskTypec;
        [JsonProperty(PropertyName = "Event_Task_Type__c")]
        [EntityField(true)]
        public PickEventEventTaskType EventTaskTypec
        {
            get { return __EventTaskTypec; }
            set { SetField(ref __EventTaskTypec, value, "Event_Task_Type__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private System.DateTime? __ClosedDatec;
        [JsonProperty(PropertyName = "Closed_Date__c")]
        [EntityField(true)]
        public System.DateTime? ClosedDatec
        {
            get { return __ClosedDatec; }
            set { SetField(ref __ClosedDatec, value, "Closed_Date__c"); }
        }
        private System.Boolean __KeyLeadingIndicatorc;
        [JsonProperty(PropertyName = "Key_Leading_Indicator__c")]
        [EntityField(false)]
        public System.Boolean KeyLeadingIndicatorc
        {
            get { return __KeyLeadingIndicatorc; }
            set { SetField(ref __KeyLeadingIndicatorc, value, "Key_Leading_Indicator__c"); }
        }
        private PickEventCustomerPartnerType __CustomerPartnerTypec;
        [JsonProperty(PropertyName = "Customer_Partner_Type__c")]
        [EntityField(true)]
        public PickEventCustomerPartnerType CustomerPartnerTypec
        {
            get { return __CustomerPartnerTypec; }
            set { SetField(ref __CustomerPartnerTypec, value, "Customer_Partner_Type__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RecurrenceActivityId")]
        public RelationShip<Event,Event> RecurringEvents
        {
            get;set;
        }
    }
    [EntityName("Financial__c")]
    public class Financial : ISalesforceEntity
    {
    [JsonConstructor]
        private Financial(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Financial()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickFinancialCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickFinancialCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Accountc;
        [JsonProperty(PropertyName = "Account__c")]
        [EntityField(false)]
        public System.String Accountc
        {
            get { return __Accountc; }
            set { SetField(ref __Accountc, value, "Account__c"); }
        }
        private System.String __Amountc;
        [JsonProperty(PropertyName = "Amount__c")]
        [EntityField(true)]
        public System.String Amountc
        {
            get { return __Amountc; }
            set { SetField(ref __Amountc, value, "Amount__c"); }
        }
        private System.DateTime? __Datec;
        [JsonProperty(PropertyName = "Date__c")]
        [EntityField(true)]
        public System.DateTime? Datec
        {
            get { return __Datec; }
            set { SetField(ref __Datec, value, "Date__c"); }
        }
        private System.String __Descriptionc;
        [JsonProperty(PropertyName = "Description__c")]
        [EntityField(true)]
        public System.String Descriptionc
        {
            get { return __Descriptionc; }
            set { SetField(ref __Descriptionc, value, "Description__c"); }
        }
        private System.String __FiscalYearc;
        [JsonProperty(PropertyName = "Fiscal_Year__c")]
        [EntityField(true)]
        public System.String FiscalYearc
        {
            get { return __FiscalYearc; }
        }
        private System.String __GrossProfitc;
        [JsonProperty(PropertyName = "Gross_Profit__c")]
        [EntityField(true)]
        public System.String GrossProfitc
        {
            get { return __GrossProfitc; }
            set { SetField(ref __GrossProfitc, value, "Gross_Profit__c"); }
        }
        private System.String __Marginc;
        [JsonProperty(PropertyName = "Margin__c")]
        [EntityField(true)]
        public System.String Marginc
        {
            get { return __Marginc; }
        }
        private System.String __PYTDAmountc;
        [JsonProperty(PropertyName = "PYTD_Amount__c")]
        [EntityField(true)]
        public System.String PYTDAmountc
        {
            get { return __PYTDAmountc; }
            set { SetField(ref __PYTDAmountc, value, "PYTD_Amount__c"); }
        }
        private System.String __PercentofPlanc;
        [JsonProperty(PropertyName = "Percent_of_Plan__c")]
        [EntityField(true)]
        public System.String PercentofPlanc
        {
            get { return __PercentofPlanc; }
        }
        private System.String __PlanAmountc;
        [JsonProperty(PropertyName = "Plan_Amount__c")]
        [EntityField(true)]
        public System.String PlanAmountc
        {
            get { return __PlanAmountc; }
            set { SetField(ref __PlanAmountc, value, "Plan_Amount__c"); }
        }
        private System.String __YTDAmountc;
        [JsonProperty(PropertyName = "YTD_Amount__c")]
        [EntityField(true)]
        public System.String YTDAmountc
        {
            get { return __YTDAmountc; }
            set { SetField(ref __YTDAmountc, value, "YTD_Amount__c"); }
        }
        private System.String __YTDPlanc;
        [JsonProperty(PropertyName = "YTD_Plan__c")]
        [EntityField(true)]
        public System.String YTDPlanc
        {
            get { return __YTDPlanc; }
            set { SetField(ref __YTDPlanc, value, "YTD_Plan__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Financial,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Folder")]
    public class Folder : ISalesforceEntity
    {
    [JsonConstructor]
        private Folder(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Folder()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(true)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickFolderAccessType __AccessType;
        [EntityField(false)]
        public PickFolderAccessType AccessType
        {
            get { return __AccessType; }
            set { SetField(ref __AccessType, value, "AccessType"); }
        }
        private System.Boolean __IsReadonly;
        [EntityField(false)]
        public System.Boolean IsReadonly
        {
            get { return __IsReadonly; }
            set { SetField(ref __IsReadonly, value, "IsReadonly"); }
        }
        private PickFolderType __Type;
        [EntityField(false)]
        public PickFolderType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Group")]
    public class Group : ISalesforceEntity
    {
    [JsonConstructor]
        private Group(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Group()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(true)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __RelatedId;
        [EntityField(true)]
        public System.String RelatedId
        {
            get { return __RelatedId; }
            set { SetField(ref __RelatedId, value, "RelatedId"); }
        }
        private PickGroupType __Type;
        [EntityField(false)]
        public PickGroupType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __DoesSendEmailToMembers;
        [EntityField(false)]
        public System.Boolean DoesSendEmailToMembers
        {
            get { return __DoesSendEmailToMembers; }
            set { SetField(ref __DoesSendEmailToMembers, value, "DoesSendEmailToMembers"); }
        }
        private System.Boolean __DoesIncludeBosses;
        [EntityField(false)]
        public System.Boolean DoesIncludeBosses
        {
            get { return __DoesIncludeBosses; }
            set { SetField(ref __DoesIncludeBosses, value, "DoesIncludeBosses"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("GroupId")]
        public RelationShip<Group,GroupMember> GroupMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("DelegatedApproverId")]
        public RelationShip<Group,User> DelegatedUsers
        {
            get;set;
        }
    }
    [EntityName("GroupMember")]
    public class GroupMember : ISalesforceEntity
    {
    [JsonConstructor]
        private GroupMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public GroupMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __GroupId;
        [EntityField(false)]
        public System.String GroupId
        {
            get { return __GroupId; }
            set { SetField(ref __GroupId, value, "GroupId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("JCI_Brand__History")]
    public class JCIBrandHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private JCIBrandHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public JCIBrandHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickJCIBrandHistoryField __Field;
        [EntityField(false)]
        public PickJCIBrandHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("JCI_Brand__c")]
    public class JCIBrand : ISalesforceEntity
    {
    [JsonConstructor]
        private JCIBrand(string hack)
        {
            trackPropertyUpdates = false;
        }

        public JCIBrand()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickJCIBrandCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickJCIBrandCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Acctc;
        [JsonProperty(PropertyName = "Acct__c")]
        [EntityField(false)]
        public System.String Acctc
        {
            get { return __Acctc; }
            set { SetField(ref __Acctc, value, "Acct__c"); }
        }
        private System.String __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(false)]
        public System.String Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private System.String __Channelc;
        [JsonProperty(PropertyName = "Channel__c")]
        [EntityField(true)]
        public System.String Channelc
        {
            get { return __Channelc; }
            set { SetField(ref __Channelc, value, "Channel__c"); }
        }
        private System.Boolean __IsActivec;
        [JsonProperty(PropertyName = "Is_Active__c")]
        [EntityField(false)]
        public System.Boolean IsActivec
        {
            get { return __IsActivec; }
            set { SetField(ref __IsActivec, value, "Is_Active__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickJCIBrandProductLinePicklist> __ProductLinePicklistc;
        [JsonProperty(PropertyName = "Product_Line_Picklist__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickJCIBrandProductLinePicklist> ProductLinePicklistc
        {
            get { return __ProductLinePicklistc; }
            set { SetField(ref __ProductLinePicklistc, value, "Product_Line_Picklist__c"); }
        }
        private System.String __fAcctPrimaryChannelSFIDc;
        [JsonProperty(PropertyName = "f_Acct_Primary_Channel_SFID__c")]
        [EntityField(true)]
        public System.String fAcctPrimaryChannelSFIDc
        {
            get { return __fAcctPrimaryChannelSFIDc; }
        }
        private System.String __fAcctPrimaryChannelc;
        [JsonProperty(PropertyName = "f_Acct_Primary_Channel__c")]
        [EntityField(true)]
        public System.String fAcctPrimaryChannelc
        {
            get { return __fAcctPrimaryChannelc; }
        }
        private PickJCIBrandInactiveReason __InactiveReasonc;
        [JsonProperty(PropertyName = "Inactive_Reason__c")]
        [EntityField(true)]
        public PickJCIBrandInactiveReason InactiveReasonc
        {
            get { return __InactiveReasonc; }
            set { SetField(ref __InactiveReasonc, value, "Inactive_Reason__c"); }
        }
        private System.String __ProductLinec;
        [JsonProperty(PropertyName = "Product_Line__c")]
        [EntityField(true)]
        public System.String ProductLinec
        {
            get { return __ProductLinec; }
            set { SetField(ref __ProductLinec, value, "Product_Line__c"); }
        }
        private System.String __TotActualAmtCFYc;
        [JsonProperty(PropertyName = "Tot_Actual_Amt_CFY__c")]
        [EntityField(true)]
        public System.String TotActualAmtCFYc
        {
            get { return __TotActualAmtCFYc; }
            set { SetField(ref __TotActualAmtCFYc, value, "Tot_Actual_Amt_CFY__c"); }
        }
        private System.String __TotActualAmtPFYc;
        [JsonProperty(PropertyName = "Tot_Actual_Amt_PFY__c")]
        [EntityField(true)]
        public System.String TotActualAmtPFYc
        {
            get { return __TotActualAmtPFYc; }
            set { SetField(ref __TotActualAmtPFYc, value, "Tot_Actual_Amt_PFY__c"); }
        }
        private System.String __TotActualAmtYBLc;
        [JsonProperty(PropertyName = "Tot_Actual_Amt_YBL__c")]
        [EntityField(true)]
        public System.String TotActualAmtYBLc
        {
            get { return __TotActualAmtYBLc; }
            set { SetField(ref __TotActualAmtYBLc, value, "Tot_Actual_Amt_YBL__c"); }
        }
        private System.String __TotalPlannedAmountCFYc;
        [JsonProperty(PropertyName = "Total_Planned_Amount_CFY__c")]
        [EntityField(true)]
        public System.String TotalPlannedAmountCFYc
        {
            get { return __TotalPlannedAmountCFYc; }
            set { SetField(ref __TotalPlannedAmountCFYc, value, "Total_Planned_Amount_CFY__c"); }
        }
        private System.String __BrandAccountIDConcatc;
        [JsonProperty(PropertyName = "Brand_Account_ID_Concat__c")]
        [EntityField(true)]
        public System.String BrandAccountIDConcatc
        {
            get { return __BrandAccountIDConcatc; }
            set { SetField(ref __BrandAccountIDConcatc, value, "Brand_Account_ID_Concat__c"); }
        }
        private System.String __OtherDetailc;
        [JsonProperty(PropertyName = "Other_Detail__c")]
        [EntityField(true)]
        public System.String OtherDetailc
        {
            get { return __OtherDetailc; }
            set { SetField(ref __OtherDetailc, value, "Other_Detail__c"); }
        }
        private System.Boolean __TotalLineCardsc;
        [JsonProperty(PropertyName = "Total_Line_Cards__c")]
        [EntityField(false)]
        public System.Boolean TotalLineCardsc
        {
            get { return __TotalLineCardsc; }
            set { SetField(ref __TotalLineCardsc, value, "Total_Line_Cards__c"); }
        }
        private System.String __ShareofWalletc;
        [JsonProperty(PropertyName = "Share_of_Wallet__c")]
        [EntityField(true)]
        public System.String ShareofWalletc
        {
            get { return __ShareofWalletc; }
            set { SetField(ref __ShareofWalletc, value, "Share_of_Wallet__c"); }
        }
        private System.String __TotalCYTDAmountc;
        [JsonProperty(PropertyName = "Total_CYTD_Amount__c")]
        [EntityField(true)]
        public System.String TotalCYTDAmountc
        {
            get { return __TotalCYTDAmountc; }
            set { SetField(ref __TotalCYTDAmountc, value, "Total_CYTD_Amount__c"); }
        }
        private System.String __TotalCYTDPlanc;
        [JsonProperty(PropertyName = "Total_CYTD_Plan__c")]
        [EntityField(true)]
        public System.String TotalCYTDPlanc
        {
            get { return __TotalCYTDPlanc; }
            set { SetField(ref __TotalCYTDPlanc, value, "Total_CYTD_Plan__c"); }
        }
        private System.String __TotalPYTDAmountc;
        [JsonProperty(PropertyName = "Total_PYTD_Amount__c")]
        [EntityField(true)]
        public System.String TotalPYTDAmountc
        {
            get { return __TotalPYTDAmountc; }
            set { SetField(ref __TotalPYTDAmountc, value, "Total_PYTD_Amount__c"); }
        }
        private System.String __AprCFYAmtc;
        [JsonProperty(PropertyName = "Apr_CFY_Amt__c")]
        [EntityField(true)]
        public System.String AprCFYAmtc
        {
            get { return __AprCFYAmtc; }
            set { SetField(ref __AprCFYAmtc, value, "Apr_CFY_Amt__c"); }
        }
        private System.String __AprCFYPlanAmtc;
        [JsonProperty(PropertyName = "Apr_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String AprCFYPlanAmtc
        {
            get { return __AprCFYPlanAmtc; }
            set { SetField(ref __AprCFYPlanAmtc, value, "Apr_CFY_Plan_Amt__c"); }
        }
        private System.String __AugCFYAmtc;
        [JsonProperty(PropertyName = "Aug_CFY_Amt__c")]
        [EntityField(true)]
        public System.String AugCFYAmtc
        {
            get { return __AugCFYAmtc; }
            set { SetField(ref __AugCFYAmtc, value, "Aug_CFY_Amt__c"); }
        }
        private System.String __AugCFYPlanAmtc;
        [JsonProperty(PropertyName = "Aug_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String AugCFYPlanAmtc
        {
            get { return __AugCFYPlanAmtc; }
            set { SetField(ref __AugCFYPlanAmtc, value, "Aug_CFY_Plan_Amt__c"); }
        }
        private System.String __DecCFYAmtc;
        [JsonProperty(PropertyName = "Dec_CFY_Amt__c")]
        [EntityField(true)]
        public System.String DecCFYAmtc
        {
            get { return __DecCFYAmtc; }
            set { SetField(ref __DecCFYAmtc, value, "Dec_CFY_Amt__c"); }
        }
        private System.String __DecCFYPlanAmtc;
        [JsonProperty(PropertyName = "Dec_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String DecCFYPlanAmtc
        {
            get { return __DecCFYPlanAmtc; }
            set { SetField(ref __DecCFYPlanAmtc, value, "Dec_CFY_Plan_Amt__c"); }
        }
        private System.String __FebCFYAmtc;
        [JsonProperty(PropertyName = "Feb_CFY_Amt__c")]
        [EntityField(true)]
        public System.String FebCFYAmtc
        {
            get { return __FebCFYAmtc; }
            set { SetField(ref __FebCFYAmtc, value, "Feb_CFY_Amt__c"); }
        }
        private System.String __FebCFYPlanAmtc;
        [JsonProperty(PropertyName = "Feb_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String FebCFYPlanAmtc
        {
            get { return __FebCFYPlanAmtc; }
            set { SetField(ref __FebCFYPlanAmtc, value, "Feb_CFY_Plan_Amt__c"); }
        }
        private System.String __JanCFYAmtc;
        [JsonProperty(PropertyName = "Jan_CFY_Amt__c")]
        [EntityField(true)]
        public System.String JanCFYAmtc
        {
            get { return __JanCFYAmtc; }
            set { SetField(ref __JanCFYAmtc, value, "Jan_CFY_Amt__c"); }
        }
        private System.String __JanCFYPlanAmtc;
        [JsonProperty(PropertyName = "Jan_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JanCFYPlanAmtc
        {
            get { return __JanCFYPlanAmtc; }
            set { SetField(ref __JanCFYPlanAmtc, value, "Jan_CFY_Plan_Amt__c"); }
        }
        private System.String __JulCFYAmtc;
        [JsonProperty(PropertyName = "Jul_CFY_Amt__c")]
        [EntityField(true)]
        public System.String JulCFYAmtc
        {
            get { return __JulCFYAmtc; }
            set { SetField(ref __JulCFYAmtc, value, "Jul_CFY_Amt__c"); }
        }
        private System.String __JulCFYPlanAmtc;
        [JsonProperty(PropertyName = "Jul_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JulCFYPlanAmtc
        {
            get { return __JulCFYPlanAmtc; }
            set { SetField(ref __JulCFYPlanAmtc, value, "Jul_CFY_Plan_Amt__c"); }
        }
        private System.String __JunCFYAmtc;
        [JsonProperty(PropertyName = "Jun_CFY_Amt__c")]
        [EntityField(true)]
        public System.String JunCFYAmtc
        {
            get { return __JunCFYAmtc; }
            set { SetField(ref __JunCFYAmtc, value, "Jun_CFY_Amt__c"); }
        }
        private System.String __JunCFYPlanAmtc;
        [JsonProperty(PropertyName = "Jun_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JunCFYPlanAmtc
        {
            get { return __JunCFYPlanAmtc; }
            set { SetField(ref __JunCFYPlanAmtc, value, "Jun_CFY_Plan_Amt__c"); }
        }
        private System.String __MarCFYAmtc;
        [JsonProperty(PropertyName = "Mar_CFY_Amt__c")]
        [EntityField(true)]
        public System.String MarCFYAmtc
        {
            get { return __MarCFYAmtc; }
            set { SetField(ref __MarCFYAmtc, value, "Mar_CFY_Amt__c"); }
        }
        private System.String __MarCFYPlanAmtc;
        [JsonProperty(PropertyName = "Mar_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String MarCFYPlanAmtc
        {
            get { return __MarCFYPlanAmtc; }
            set { SetField(ref __MarCFYPlanAmtc, value, "Mar_CFY_Plan_Amt__c"); }
        }
        private System.String __MayCFYAmtc;
        [JsonProperty(PropertyName = "May_CFY_Amt__c")]
        [EntityField(true)]
        public System.String MayCFYAmtc
        {
            get { return __MayCFYAmtc; }
            set { SetField(ref __MayCFYAmtc, value, "May_CFY_Amt__c"); }
        }
        private System.String __MayCFYPlanAmtc;
        [JsonProperty(PropertyName = "May_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String MayCFYPlanAmtc
        {
            get { return __MayCFYPlanAmtc; }
            set { SetField(ref __MayCFYPlanAmtc, value, "May_CFY_Plan_Amt__c"); }
        }
        private System.String __NovCFYAmtc;
        [JsonProperty(PropertyName = "Nov_CFY_Amt__c")]
        [EntityField(true)]
        public System.String NovCFYAmtc
        {
            get { return __NovCFYAmtc; }
            set { SetField(ref __NovCFYAmtc, value, "Nov_CFY_Amt__c"); }
        }
        private System.String __NovCFYPlanAmtc;
        [JsonProperty(PropertyName = "Nov_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String NovCFYPlanAmtc
        {
            get { return __NovCFYPlanAmtc; }
            set { SetField(ref __NovCFYPlanAmtc, value, "Nov_CFY_Plan_Amt__c"); }
        }
        private System.String __OctCFYAmtc;
        [JsonProperty(PropertyName = "Oct_CFY_Amt__c")]
        [EntityField(true)]
        public System.String OctCFYAmtc
        {
            get { return __OctCFYAmtc; }
            set { SetField(ref __OctCFYAmtc, value, "Oct_CFY_Amt__c"); }
        }
        private System.String __OctCFYPlanAmtc;
        [JsonProperty(PropertyName = "Oct_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String OctCFYPlanAmtc
        {
            get { return __OctCFYPlanAmtc; }
            set { SetField(ref __OctCFYPlanAmtc, value, "Oct_CFY_Plan_Amt__c"); }
        }
        private System.String __SepCFYAmtc;
        [JsonProperty(PropertyName = "Sep_CFY_Amt__c")]
        [EntityField(true)]
        public System.String SepCFYAmtc
        {
            get { return __SepCFYAmtc; }
            set { SetField(ref __SepCFYAmtc, value, "Sep_CFY_Amt__c"); }
        }
        private System.String __SepCFYPlanAmtc;
        [JsonProperty(PropertyName = "Sep_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String SepCFYPlanAmtc
        {
            get { return __SepCFYPlanAmtc; }
            set { SetField(ref __SepCFYPlanAmtc, value, "Sep_CFY_Plan_Amt__c"); }
        }
        private System.String __ActualCFYAmountc;
        [JsonProperty(PropertyName = "Actual_CFY_Amount__c")]
        [EntityField(true)]
        public System.String ActualCFYAmountc
        {
            get { return __ActualCFYAmountc; }
        }
        private System.String __ActualCFYCostc;
        [JsonProperty(PropertyName = "Actual_CFY_Cost__c")]
        [EntityField(true)]
        public System.String ActualCFYCostc
        {
            get { return __ActualCFYCostc; }
        }
        private System.Double? __ActualCFYQuantityc;
        [JsonProperty(PropertyName = "Actual_CFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualCFYQuantityc
        {
            get { return __ActualCFYQuantityc; }
        }
        private System.String __ActualPFYAmountc;
        [JsonProperty(PropertyName = "Actual_PFY_Amount__c")]
        [EntityField(true)]
        public System.String ActualPFYAmountc
        {
            get { return __ActualPFYAmountc; }
        }
        private System.String __ActualPFYCostc;
        [JsonProperty(PropertyName = "Actual_PFY_Cost__c")]
        [EntityField(true)]
        public System.String ActualPFYCostc
        {
            get { return __ActualPFYCostc; }
        }
        private System.Double? __ActualPFYQuantityc;
        [JsonProperty(PropertyName = "Actual_PFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualPFYQuantityc
        {
            get { return __ActualPFYQuantityc; }
        }
        private System.String __ActualYBLAmountc;
        [JsonProperty(PropertyName = "Actual_YBL_Amount__c")]
        [EntityField(true)]
        public System.String ActualYBLAmountc
        {
            get { return __ActualYBLAmountc; }
        }
        private System.String __ActualYBLCostc;
        [JsonProperty(PropertyName = "Actual_YBL_Cost__c")]
        [EntityField(true)]
        public System.String ActualYBLCostc
        {
            get { return __ActualYBLCostc; }
        }
        private System.Double? __ActualYBLQuantityc;
        [JsonProperty(PropertyName = "Actual_YBL_Quantity__c")]
        [EntityField(true)]
        public System.Double? ActualYBLQuantityc
        {
            get { return __ActualYBLQuantityc; }
        }
        private System.String __PlannedCFYAmountc;
        [JsonProperty(PropertyName = "Planned_CFY_Amount__c")]
        [EntityField(true)]
        public System.String PlannedCFYAmountc
        {
            get { return __PlannedCFYAmountc; }
        }
        private System.String __PlannedCFYCostc;
        [JsonProperty(PropertyName = "Planned_CFY_Cost__c")]
        [EntityField(true)]
        public System.String PlannedCFYCostc
        {
            get { return __PlannedCFYCostc; }
        }
        private System.Double? __PlannedCFYQuantityc;
        [JsonProperty(PropertyName = "Planned_CFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedCFYQuantityc
        {
            get { return __PlannedCFYQuantityc; }
        }
        private System.String __PlannedPFYAmountc;
        [JsonProperty(PropertyName = "Planned_PFY_Amount__c")]
        [EntityField(true)]
        public System.String PlannedPFYAmountc
        {
            get { return __PlannedPFYAmountc; }
        }
        private System.String __PlannedPFYCostc;
        [JsonProperty(PropertyName = "Planned_PFY_Cost__c")]
        [EntityField(true)]
        public System.String PlannedPFYCostc
        {
            get { return __PlannedPFYCostc; }
        }
        private System.Double? __PlannedPFYQuantityc;
        [JsonProperty(PropertyName = "Planned_PFY_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedPFYQuantityc
        {
            get { return __PlannedPFYQuantityc; }
        }
        private System.String __PlannedYBLAmountc;
        [JsonProperty(PropertyName = "Planned_YBL_Amount__c")]
        [EntityField(true)]
        public System.String PlannedYBLAmountc
        {
            get { return __PlannedYBLAmountc; }
        }
        private System.String __PlannedYBLCostc;
        [JsonProperty(PropertyName = "Planned_YBL_Cost__c")]
        [EntityField(true)]
        public System.String PlannedYBLCostc
        {
            get { return __PlannedYBLCostc; }
        }
        private System.Double? __PlannedYBLQuantityc;
        [JsonProperty(PropertyName = "Planned_YBL_Quantity__c")]
        [EntityField(true)]
        public System.Double? PlannedYBLQuantityc
        {
            get { return __PlannedYBLQuantityc; }
        }
        [JsonIgnore]
        [ReferencedByField("JCI_Family_Brand__c")]
        public RelationShip<JCIBrand,ChannelLineCard> Channel_Line_Cards__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<JCIBrand,JCIBrandHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("JCI_Brand__c")]
        public RelationShip<JCIBrand,ProductLine> Product_Lines__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("JCI_Brand__c")]
        public RelationShip<JCIBrand,StrategicGoal> Strategic_Goals__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<JCIBrand,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Lead")]
    public class Lead : ISalesforceEntity
    {
    [JsonConstructor]
        private Lead(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Lead()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __MasterRecordId;
        [EntityField(true)]
        public System.String MasterRecordId
        {
            get { return __MasterRecordId; }
            set { SetField(ref __MasterRecordId, value, "MasterRecordId"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private PickLeadSalutation __Salutation;
        [EntityField(true)]
        public PickLeadSalutation Salutation
        {
            get { return __Salutation; }
            set { SetField(ref __Salutation, value, "Salutation"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Company;
        [EntityField(false)]
        public System.String Company
        {
            get { return __Company; }
            set { SetField(ref __Company, value, "Company"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private PickLeadStateCode __StateCode;
        [EntityField(true)]
        public PickLeadStateCode StateCode
        {
            get { return __StateCode; }
            set { SetField(ref __StateCode, value, "StateCode"); }
        }
        private PickLeadCountryCode __CountryCode;
        [EntityField(true)]
        public PickLeadCountryCode CountryCode
        {
            get { return __CountryCode; }
            set { SetField(ref __CountryCode, value, "CountryCode"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Website;
        [EntityField(true)]
        public System.String Website
        {
            get { return __Website; }
            set { SetField(ref __Website, value, "Website"); }
        }
        private System.String __PhotoUrl;
        [EntityField(true)]
        public System.String PhotoUrl
        {
            get { return __PhotoUrl; }
            set { SetField(ref __PhotoUrl, value, "PhotoUrl"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickLeadLeadSource __LeadSource;
        [EntityField(true)]
        public PickLeadLeadSource LeadSource
        {
            get { return __LeadSource; }
            set { SetField(ref __LeadSource, value, "LeadSource"); }
        }
        private PickLeadStatus __Status;
        [EntityField(false)]
        public PickLeadStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickLeadIndustry __Industry;
        [EntityField(true)]
        public PickLeadIndustry Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private PickLeadRating __Rating;
        [EntityField(true)]
        public PickLeadRating Rating
        {
            get { return __Rating; }
            set { SetField(ref __Rating, value, "Rating"); }
        }
        private PickLeadCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickLeadCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __HasOptedOutOfEmail;
        [EntityField(false)]
        public System.Boolean HasOptedOutOfEmail
        {
            get { return __HasOptedOutOfEmail; }
            set { SetField(ref __HasOptedOutOfEmail, value, "HasOptedOutOfEmail"); }
        }
        private System.Boolean __IsConverted;
        [EntityField(false)]
        public System.Boolean IsConverted
        {
            get { return __IsConverted; }
            set { SetField(ref __IsConverted, value, "IsConverted"); }
        }
        private System.DateTime? __ConvertedDate;
        [EntityField(true)]
        public System.DateTime? ConvertedDate
        {
            get { return __ConvertedDate; }
            set { SetField(ref __ConvertedDate, value, "ConvertedDate"); }
        }
        private System.String __ConvertedAccountId;
        [EntityField(true)]
        public System.String ConvertedAccountId
        {
            get { return __ConvertedAccountId; }
            set { SetField(ref __ConvertedAccountId, value, "ConvertedAccountId"); }
        }
        private System.String __ConvertedContactId;
        [EntityField(true)]
        public System.String ConvertedContactId
        {
            get { return __ConvertedContactId; }
            set { SetField(ref __ConvertedContactId, value, "ConvertedContactId"); }
        }
        private System.String __ConvertedOpportunityId;
        [EntityField(true)]
        public System.String ConvertedOpportunityId
        {
            get { return __ConvertedOpportunityId; }
            set { SetField(ref __ConvertedOpportunityId, value, "ConvertedOpportunityId"); }
        }
        private System.Boolean __IsUnreadByOwner;
        [EntityField(false)]
        public System.Boolean IsUnreadByOwner
        {
            get { return __IsUnreadByOwner; }
            set { SetField(ref __IsUnreadByOwner, value, "IsUnreadByOwner"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.Boolean __DoNotCall;
        [EntityField(false)]
        public System.Boolean DoNotCall
        {
            get { return __DoNotCall; }
            set { SetField(ref __DoNotCall, value, "DoNotCall"); }
        }
        private System.Boolean __HasOptedOutOfFax;
        [EntityField(false)]
        public System.Boolean HasOptedOutOfFax
        {
            get { return __HasOptedOutOfFax; }
            set { SetField(ref __HasOptedOutOfFax, value, "HasOptedOutOfFax"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.DateTime? __LastTransferDate;
        [EntityField(true)]
        public System.DateTime? LastTransferDate
        {
            get { return __LastTransferDate; }
            set { SetField(ref __LastTransferDate, value, "LastTransferDate"); }
        }
        private System.String __PartnerAccountId;
        [EntityField(true)]
        public System.String PartnerAccountId
        {
            get { return __PartnerAccountId; }
            set { SetField(ref __PartnerAccountId, value, "PartnerAccountId"); }
        }
        private System.String __Jigsaw;
        [EntityField(true)]
        public System.String Jigsaw
        {
            get { return __Jigsaw; }
            set { SetField(ref __Jigsaw, value, "Jigsaw"); }
        }
        private System.String __JigsawContactId;
        [EntityField(true)]
        public System.String JigsawContactId
        {
            get { return __JigsawContactId; }
            set { SetField(ref __JigsawContactId, value, "JigsawContactId"); }
        }
        private System.String __CompanyDunsNumber;
        [EntityField(true)]
        public System.String CompanyDunsNumber
        {
            get { return __CompanyDunsNumber; }
            set { SetField(ref __CompanyDunsNumber, value, "CompanyDunsNumber"); }
        }
        private System.String __DandbCompanyId;
        [EntityField(true)]
        public System.String DandbCompanyId
        {
            get { return __DandbCompanyId; }
            set { SetField(ref __DandbCompanyId, value, "DandbCompanyId"); }
        }
        private System.String __EmailBouncedReason;
        [EntityField(true)]
        public System.String EmailBouncedReason
        {
            get { return __EmailBouncedReason; }
            set { SetField(ref __EmailBouncedReason, value, "EmailBouncedReason"); }
        }
        private System.DateTime? __EmailBouncedDate;
        [EntityField(true)]
        public System.DateTime? EmailBouncedDate
        {
            get { return __EmailBouncedDate; }
            set { SetField(ref __EmailBouncedDate, value, "EmailBouncedDate"); }
        }
        private System.DateTime? __DBCreatedDatewithoutTimec;
        [JsonProperty(PropertyName = "DB_Created_Date_without_Time__c")]
        [EntityField(true)]
        public System.DateTime? DBCreatedDatewithoutTimec
        {
            get { return __DBCreatedDatewithoutTimec; }
        }
        private System.Double? __DBLeadAgec;
        [JsonProperty(PropertyName = "DB_Lead_Age__c")]
        [EntityField(true)]
        public System.Double? DBLeadAgec
        {
            get { return __DBLeadAgec; }
        }
        private System.String __picampaignc;
        [JsonProperty(PropertyName = "pi__campaign__c")]
        [EntityField(true)]
        public System.String picampaignc
        {
            get { return __picampaignc; }
            set { SetField(ref __picampaignc, value, "pi__campaign__c"); }
        }
        private System.String __picommentsc;
        [JsonProperty(PropertyName = "pi__comments__c")]
        [EntityField(true)]
        public System.String picommentsc
        {
            get { return __picommentsc; }
            set { SetField(ref __picommentsc, value, "pi__comments__c"); }
        }
        private System.DateTime? __piconversiondatec;
        [JsonProperty(PropertyName = "pi__conversion_date__c")]
        [EntityField(true)]
        public System.DateTime? piconversiondatec
        {
            get { return __piconversiondatec; }
            set { SetField(ref __piconversiondatec, value, "pi__conversion_date__c"); }
        }
        private System.String __piconversionobjectnamec;
        [JsonProperty(PropertyName = "pi__conversion_object_name__c")]
        [EntityField(true)]
        public System.String piconversionobjectnamec
        {
            get { return __piconversionobjectnamec; }
            set { SetField(ref __piconversionobjectnamec, value, "pi__conversion_object_name__c"); }
        }
        private System.String __piconversionobjecttypec;
        [JsonProperty(PropertyName = "pi__conversion_object_type__c")]
        [EntityField(true)]
        public System.String piconversionobjecttypec
        {
            get { return __piconversionobjecttypec; }
            set { SetField(ref __piconversionobjecttypec, value, "pi__conversion_object_type__c"); }
        }
        private System.DateTime? __picreateddatec;
        [JsonProperty(PropertyName = "pi__created_date__c")]
        [EntityField(true)]
        public System.DateTime? picreateddatec
        {
            get { return __picreateddatec; }
            set { SetField(ref __picreateddatec, value, "pi__created_date__c"); }
        }
        private System.DateTime? __pifirstactivityc;
        [JsonProperty(PropertyName = "pi__first_activity__c")]
        [EntityField(true)]
        public System.DateTime? pifirstactivityc
        {
            get { return __pifirstactivityc; }
            set { SetField(ref __pifirstactivityc, value, "pi__first_activity__c"); }
        }
        private System.String __pifirstsearchtermc;
        [JsonProperty(PropertyName = "pi__first_search_term__c")]
        [EntityField(true)]
        public System.String pifirstsearchtermc
        {
            get { return __pifirstsearchtermc; }
            set { SetField(ref __pifirstsearchtermc, value, "pi__first_search_term__c"); }
        }
        private System.String __pifirstsearchtypec;
        [JsonProperty(PropertyName = "pi__first_search_type__c")]
        [EntityField(true)]
        public System.String pifirstsearchtypec
        {
            get { return __pifirstsearchtypec; }
            set { SetField(ref __pifirstsearchtypec, value, "pi__first_search_type__c"); }
        }
        private System.String __pifirsttouchurlc;
        [JsonProperty(PropertyName = "pi__first_touch_url__c")]
        [EntityField(true)]
        public System.String pifirsttouchurlc
        {
            get { return __pifirsttouchurlc; }
            set { SetField(ref __pifirsttouchurlc, value, "pi__first_touch_url__c"); }
        }
        private System.String __pigradec;
        [JsonProperty(PropertyName = "pi__grade__c")]
        [EntityField(true)]
        public System.String pigradec
        {
            get { return __pigradec; }
            set { SetField(ref __pigradec, value, "pi__grade__c"); }
        }
        private System.DateTime? __pilastactivityc;
        [JsonProperty(PropertyName = "pi__last_activity__c")]
        [EntityField(true)]
        public System.DateTime? pilastactivityc
        {
            get { return __pilastactivityc; }
            set { SetField(ref __pilastactivityc, value, "pi__last_activity__c"); }
        }
        private System.String __pinotesc;
        [JsonProperty(PropertyName = "pi__notes__c")]
        [EntityField(true)]
        public System.String pinotesc
        {
            get { return __pinotesc; }
            set { SetField(ref __pinotesc, value, "pi__notes__c"); }
        }
        private System.Boolean __pipardothardbouncedc;
        [JsonProperty(PropertyName = "pi__pardot_hard_bounced__c")]
        [EntityField(false)]
        public System.Boolean pipardothardbouncedc
        {
            get { return __pipardothardbouncedc; }
            set { SetField(ref __pipardothardbouncedc, value, "pi__pardot_hard_bounced__c"); }
        }
        private System.Double? __piscorec;
        [JsonProperty(PropertyName = "pi__score__c")]
        [EntityField(true)]
        public System.Double? piscorec
        {
            get { return __piscorec; }
            set { SetField(ref __piscorec, value, "pi__score__c"); }
        }
        private System.String __piurlc;
        [JsonProperty(PropertyName = "pi__url__c")]
        [EntityField(true)]
        public System.String piurlc
        {
            get { return __piurlc; }
            set { SetField(ref __piurlc, value, "pi__url__c"); }
        }
        private System.String __piutmcampaignc;
        [JsonProperty(PropertyName = "pi__utm_campaign__c")]
        [EntityField(true)]
        public System.String piutmcampaignc
        {
            get { return __piutmcampaignc; }
            set { SetField(ref __piutmcampaignc, value, "pi__utm_campaign__c"); }
        }
        private System.String __piutmcontentc;
        [JsonProperty(PropertyName = "pi__utm_content__c")]
        [EntityField(true)]
        public System.String piutmcontentc
        {
            get { return __piutmcontentc; }
            set { SetField(ref __piutmcontentc, value, "pi__utm_content__c"); }
        }
        private System.String __piutmmediumc;
        [JsonProperty(PropertyName = "pi__utm_medium__c")]
        [EntityField(true)]
        public System.String piutmmediumc
        {
            get { return __piutmmediumc; }
            set { SetField(ref __piutmmediumc, value, "pi__utm_medium__c"); }
        }
        private System.String __piutmsourcec;
        [JsonProperty(PropertyName = "pi__utm_source__c")]
        [EntityField(true)]
        public System.String piutmsourcec
        {
            get { return __piutmsourcec; }
            set { SetField(ref __piutmsourcec, value, "pi__utm_source__c"); }
        }
        private System.String __piutmtermc;
        [JsonProperty(PropertyName = "pi__utm_term__c")]
        [EntityField(true)]
        public System.String piutmtermc
        {
            get { return __piutmtermc; }
            set { SetField(ref __piutmtermc, value, "pi__utm_term__c"); }
        }
        private System.String __AssignedChannelPartnerc;
        [JsonProperty(PropertyName = "Assigned_Channel_Partner__c")]
        [EntityField(true)]
        public System.String AssignedChannelPartnerc
        {
            get { return __AssignedChannelPartnerc; }
            set { SetField(ref __AssignedChannelPartnerc, value, "Assigned_Channel_Partner__c"); }
        }
        private System.String __Brandsc;
        [JsonProperty(PropertyName = "Brands__c")]
        [EntityField(true)]
        public System.String Brandsc
        {
            get { return __Brandsc; }
            set { SetField(ref __Brandsc, value, "Brands__c"); }
        }
        private System.String __LeadNamec;
        [JsonProperty(PropertyName = "Lead_Name__c")]
        [EntityField(true)]
        public System.String LeadNamec
        {
            get { return __LeadNamec; }
            set { SetField(ref __LeadNamec, value, "Lead_Name__c"); }
        }
        private PickLeadNACLeadType __NACLeadTypec;
        [JsonProperty(PropertyName = "NAC_Lead_Type__c")]
        [EntityField(true)]
        public PickLeadNACLeadType NACLeadTypec
        {
            get { return __NACLeadTypec; }
            set { SetField(ref __NACLeadTypec, value, "NAC_Lead_Type__c"); }
        }
        private PickLeadPardotRecordType __PardotRecordTypec;
        [JsonProperty(PropertyName = "Pardot_Record_Type__c")]
        [EntityField(true)]
        public PickLeadPardotRecordType PardotRecordTypec
        {
            get { return __PardotRecordTypec; }
            set { SetField(ref __PardotRecordTypec, value, "Pardot_Record_Type__c"); }
        }
        private System.String __ParentProgramc;
        [JsonProperty(PropertyName = "Parent_Program__c")]
        [EntityField(true)]
        public System.String ParentProgramc
        {
            get { return __ParentProgramc; }
            set { SetField(ref __ParentProgramc, value, "Parent_Program__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Lead__c")]
        public RelationShip<Lead,ActionPlan> R00NR0000000VZZDMA4__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LeadId")]
        public RelationShip<Lead,LeadHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Lead,TaskRelation> TaskRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Lead,TaskWhoRelation> TaskWhoRelations
        {
            get;set;
        }
    }
    [EntityName("LeadHistory")]
    public class LeadHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private LeadHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LeadHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __LeadId;
        [EntityField(false)]
        public System.String LeadId
        {
            get { return __LeadId; }
            set { SetField(ref __LeadId, value, "LeadId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickLeadHistoryField __Field;
        [EntityField(false)]
        public PickLeadHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Market_Intelligence__c")]
    public class MarketIntelligence : ISalesforceEntity
    {
    [JsonConstructor]
        private MarketIntelligence(string hack)
        {
            trackPropertyUpdates = false;
        }

        public MarketIntelligence()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickMarketIntelligenceCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickMarketIntelligenceCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Marketc;
        [JsonProperty(PropertyName = "Market__c")]
        [EntityField(false)]
        public System.String Marketc
        {
            get { return __Marketc; }
            set { SetField(ref __Marketc, value, "Market__c"); }
        }
        private System.DateTime? __ReportDtc;
        [JsonProperty(PropertyName = "Report_Dt__c")]
        [EntityField(true)]
        public System.DateTime? ReportDtc
        {
            get { return __ReportDtc; }
            set { SetField(ref __ReportDtc, value, "Report_Dt__c"); }
        }
        private System.String __AHUCentralStnandBlowerCoilc;
        [JsonProperty(PropertyName = "AHU_Central_Stn_and_Blower_Coil__c")]
        [EntityField(true)]
        public System.String AHUCentralStnandBlowerCoilc
        {
            get { return __AHUCentralStnandBlowerCoilc; }
            set { SetField(ref __AHUCentralStnandBlowerCoilc, value, "AHU_Central_Stn_and_Blower_Coil__c"); }
        }
        private System.String __AHUCustomc;
        [JsonProperty(PropertyName = "AHU_Custom__c")]
        [EntityField(true)]
        public System.String AHUCustomc
        {
            get { return __AHUCustomc; }
            set { SetField(ref __AHUCustomc, value, "AHU_Custom__c"); }
        }
        private System.String __AccessPanelsc;
        [JsonProperty(PropertyName = "Access_Panels__c")]
        [EntityField(true)]
        public System.String AccessPanelsc
        {
            get { return __AccessPanelsc; }
            set { SetField(ref __AccessPanelsc, value, "Access_Panels__c"); }
        }
        private System.String __BuildingAutomationSystemsc;
        [JsonProperty(PropertyName = "Building_Automation_Systems__c")]
        [EntityField(true)]
        public System.String BuildingAutomationSystemsc
        {
            get { return __BuildingAutomationSystemsc; }
            set { SetField(ref __BuildingAutomationSystemsc, value, "Building_Automation_Systems__c"); }
        }
        private System.String __ChilledBeamsc;
        [JsonProperty(PropertyName = "Chilled_Beams__c")]
        [EntityField(true)]
        public System.String ChilledBeamsc
        {
            get { return __ChilledBeamsc; }
            set { SetField(ref __ChilledBeamsc, value, "Chilled_Beams__c"); }
        }
        private System.String __ChillersAirCooledc;
        [JsonProperty(PropertyName = "Chillers_Air_Cooled__c")]
        [EntityField(true)]
        public System.String ChillersAirCooledc
        {
            get { return __ChillersAirCooledc; }
            set { SetField(ref __ChillersAirCooledc, value, "Chillers_Air_Cooled__c"); }
        }
        private System.String __ChillersModularc;
        [JsonProperty(PropertyName = "Chillers_Modular__c")]
        [EntityField(true)]
        public System.String ChillersModularc
        {
            get { return __ChillersModularc; }
            set { SetField(ref __ChillersModularc, value, "Chillers_Modular__c"); }
        }
        private System.String __ChillersWaterCooledc;
        [JsonProperty(PropertyName = "Chillers_Water_Cooled__c")]
        [EntityField(true)]
        public System.String ChillersWaterCooledc
        {
            get { return __ChillersWaterCooledc; }
            set { SetField(ref __ChillersWaterCooledc, value, "Chillers_Water_Cooled__c"); }
        }
        private System.String __Coilsc;
        [JsonProperty(PropertyName = "Coils__c")]
        [EntityField(true)]
        public System.String Coilsc
        {
            get { return __Coilsc; }
            set { SetField(ref __Coilsc, value, "Coils__c"); }
        }
        private System.String __CommercialSplitc;
        [JsonProperty(PropertyName = "Commercial_Split__c")]
        [EntityField(true)]
        public System.String CommercialSplitc
        {
            get { return __CommercialSplitc; }
            set { SetField(ref __CommercialSplitc, value, "Commercial_Split__c"); }
        }
        private System.String __Drivesc;
        [JsonProperty(PropertyName = "Drives__c")]
        [EntityField(true)]
        public System.String Drivesc
        {
            get { return __Drivesc; }
            set { SetField(ref __Drivesc, value, "Drives__c"); }
        }
        private System.String __DuctlessSplitc;
        [JsonProperty(PropertyName = "Ductless_Split__c")]
        [EntityField(true)]
        public System.String DuctlessSplitc
        {
            get { return __DuctlessSplitc; }
            set { SetField(ref __DuctlessSplitc, value, "Ductless_Split__c"); }
        }
        private System.String __ERVc;
        [JsonProperty(PropertyName = "ERV__c")]
        [EntityField(true)]
        public System.String ERVc
        {
            get { return __ERVc; }
            set { SetField(ref __ERVc, value, "ERV__c"); }
        }
        private System.String __FCUc;
        [JsonProperty(PropertyName = "FCU__c")]
        [EntityField(true)]
        public System.String FCUc
        {
            get { return __FCUc; }
            set { SetField(ref __FCUc, value, "FCU__c"); }
        }
        private System.String __Fansc;
        [JsonProperty(PropertyName = "Fans__c")]
        [EntityField(true)]
        public System.String Fansc
        {
            get { return __Fansc; }
            set { SetField(ref __Fansc, value, "Fans__c"); }
        }
        private System.String __Filtersc;
        [JsonProperty(PropertyName = "Filters__c")]
        [EntityField(true)]
        public System.String Filtersc
        {
            get { return __Filtersc; }
            set { SetField(ref __Filtersc, value, "Filters__c"); }
        }
        private System.String __FlexDuctc;
        [JsonProperty(PropertyName = "Flex_Duct__c")]
        [EntityField(true)]
        public System.String FlexDuctc
        {
            get { return __FlexDuctc; }
            set { SetField(ref __FlexDuctc, value, "Flex_Duct__c"); }
        }
        private System.String __GRDsc;
        [JsonProperty(PropertyName = "GRD_s__c")]
        [EntityField(true)]
        public System.String GRDsc
        {
            get { return __GRDsc; }
            set { SetField(ref __GRDsc, value, "GRD_s__c"); }
        }
        private System.String __HVACComponentsc;
        [JsonProperty(PropertyName = "HVAC_Components__c")]
        [EntityField(true)]
        public System.String HVACComponentsc
        {
            get { return __HVACComponentsc; }
            set { SetField(ref __HVACComponentsc, value, "HVAC_Components__c"); }
        }
        private System.String __Hearthc;
        [JsonProperty(PropertyName = "Hearth__c")]
        [EntityField(true)]
        public System.String Hearthc
        {
            get { return __Hearthc; }
            set { SetField(ref __Hearthc, value, "Hearth__c"); }
        }
        private System.String __Louversc;
        [JsonProperty(PropertyName = "Louvers__c")]
        [EntityField(true)]
        public System.String Louversc
        {
            get { return __Louversc; }
            set { SetField(ref __Louversc, value, "Louvers__c"); }
        }
        private System.String __RTUAccessoriesc;
        [JsonProperty(PropertyName = "RTU_Accessories__c")]
        [EntityField(true)]
        public System.String RTUAccessoriesc
        {
            get { return __RTUAccessoriesc; }
            set { SetField(ref __RTUAccessoriesc, value, "RTU_Accessories__c"); }
        }
        private System.String __RTUc;
        [JsonProperty(PropertyName = "RTU__c")]
        [EntityField(true)]
        public System.String RTUc
        {
            get { return __RTUc; }
            set { SetField(ref __RTUc, value, "RTU__c"); }
        }
        private System.String __RefrigerationControlsc;
        [JsonProperty(PropertyName = "Refrigeration_Controls__c")]
        [EntityField(true)]
        public System.String RefrigerationControlsc
        {
            get { return __RefrigerationControlsc; }
            set { SetField(ref __RefrigerationControlsc, value, "Refrigeration_Controls__c"); }
        }
        private System.String __ResidentialFurnacesc;
        [JsonProperty(PropertyName = "Residential_Furnaces__c")]
        [EntityField(true)]
        public System.String ResidentialFurnacesc
        {
            get { return __ResidentialFurnacesc; }
            set { SetField(ref __ResidentialFurnacesc, value, "Residential_Furnaces__c"); }
        }
        private System.String __ResidentialLightCommAHUc;
        [JsonProperty(PropertyName = "Residential_Light_Comm_AHU__c")]
        [EntityField(true)]
        public System.String ResidentialLightCommAHUc
        {
            get { return __ResidentialLightCommAHUc; }
            set { SetField(ref __ResidentialLightCommAHUc, value, "Residential_Light_Comm_AHU__c"); }
        }
        private System.String __ResidentialRTUc;
        [JsonProperty(PropertyName = "Residential_RTU__c")]
        [EntityField(true)]
        public System.String ResidentialRTUc
        {
            get { return __ResidentialRTUc; }
            set { SetField(ref __ResidentialRTUc, value, "Residential_RTU__c"); }
        }
        private System.String __ResidentialWSHPc;
        [JsonProperty(PropertyName = "Residential_WSHP__c")]
        [EntityField(true)]
        public System.String ResidentialWSHPc
        {
            get { return __ResidentialWSHPc; }
            set { SetField(ref __ResidentialWSHPc, value, "Residential_WSHP__c"); }
        }
        private System.String __Securityc;
        [JsonProperty(PropertyName = "Security__c")]
        [EntityField(true)]
        public System.String Securityc
        {
            get { return __Securityc; }
            set { SetField(ref __Securityc, value, "Security__c"); }
        }
        private System.String __TStatsc;
        [JsonProperty(PropertyName = "T_Stats__c")]
        [EntityField(true)]
        public System.String TStatsc
        {
            get { return __TStatsc; }
            set { SetField(ref __TStatsc, value, "T_Stats__c"); }
        }
        private System.String __TotEstSizeofAHUCustomc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_AHU_Custom__c")]
        [EntityField(true)]
        public System.String TotEstSizeofAHUCustomc
        {
            get { return __TotEstSizeofAHUCustomc; }
            set { SetField(ref __TotEstSizeofAHUCustomc, value, "Tot_Est_Size_of_AHU_Custom__c"); }
        }
        private System.String __TotEstSizeofAHUc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_AHU__c")]
        [EntityField(true)]
        public System.String TotEstSizeofAHUc
        {
            get { return __TotEstSizeofAHUc; }
            set { SetField(ref __TotEstSizeofAHUc, value, "Tot_Est_Size_of_AHU__c"); }
        }
        private System.String __TotEstSizeofAccessPanelsc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Access_Panels__c")]
        [EntityField(true)]
        public System.String TotEstSizeofAccessPanelsc
        {
            get { return __TotEstSizeofAccessPanelsc; }
            set { SetField(ref __TotEstSizeofAccessPanelsc, value, "Tot_Est_Size_of_Access_Panels__c"); }
        }
        private System.String __TotEstSizeofBuildingAutoSystemc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Building_Auto_System__c")]
        [EntityField(true)]
        public System.String TotEstSizeofBuildingAutoSystemc
        {
            get { return __TotEstSizeofBuildingAutoSystemc; }
            set { SetField(ref __TotEstSizeofBuildingAutoSystemc, value, "Tot_Est_Size_of_Building_Auto_System__c"); }
        }
        private System.String __TotEstSizeofChilledBeamsc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Chilled_Beams__c")]
        [EntityField(true)]
        public System.String TotEstSizeofChilledBeamsc
        {
            get { return __TotEstSizeofChilledBeamsc; }
            set { SetField(ref __TotEstSizeofChilledBeamsc, value, "Tot_Est_Size_of_Chilled_Beams__c"); }
        }
        private System.String __TotEstSizeofChillersModularc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Chillers_Modular__c")]
        [EntityField(true)]
        public System.String TotEstSizeofChillersModularc
        {
            get { return __TotEstSizeofChillersModularc; }
            set { SetField(ref __TotEstSizeofChillersModularc, value, "Tot_Est_Size_of_Chillers_Modular__c"); }
        }
        private System.String __TotEstSizeofChillersc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Chillers__c")]
        [EntityField(true)]
        public System.String TotEstSizeofChillersc
        {
            get { return __TotEstSizeofChillersc; }
            set { SetField(ref __TotEstSizeofChillersc, value, "Tot_Est_Size_of_Chillers__c"); }
        }
        private System.String __TotEstSizeofCoilsc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Coils__c")]
        [EntityField(true)]
        public System.String TotEstSizeofCoilsc
        {
            get { return __TotEstSizeofCoilsc; }
            set { SetField(ref __TotEstSizeofCoilsc, value, "Tot_Est_Size_of_Coils__c"); }
        }
        private System.String __TotEstSizeofDrivesc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Drives__c")]
        [EntityField(true)]
        public System.String TotEstSizeofDrivesc
        {
            get { return __TotEstSizeofDrivesc; }
            set { SetField(ref __TotEstSizeofDrivesc, value, "Tot_Est_Size_of_Drives__c"); }
        }
        private System.String __TotEstSizeofERVc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_ERV__c")]
        [EntityField(true)]
        public System.String TotEstSizeofERVc
        {
            get { return __TotEstSizeofERVc; }
            set { SetField(ref __TotEstSizeofERVc, value, "Tot_Est_Size_of_ERV__c"); }
        }
        private System.String __TotEstSizeofFCUc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_FCU__c")]
        [EntityField(true)]
        public System.String TotEstSizeofFCUc
        {
            get { return __TotEstSizeofFCUc; }
            set { SetField(ref __TotEstSizeofFCUc, value, "Tot_Est_Size_of_FCU__c"); }
        }
        private System.String __TotEstSizeofFansc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Fans__c")]
        [EntityField(true)]
        public System.String TotEstSizeofFansc
        {
            get { return __TotEstSizeofFansc; }
            set { SetField(ref __TotEstSizeofFansc, value, "Tot_Est_Size_of_Fans__c"); }
        }
        private System.String __TotEstSizeofFiltersc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Filters__c")]
        [EntityField(true)]
        public System.String TotEstSizeofFiltersc
        {
            get { return __TotEstSizeofFiltersc; }
            set { SetField(ref __TotEstSizeofFiltersc, value, "Tot_Est_Size_of_Filters__c"); }
        }
        private System.String __TotEstSizeofFlexDuctc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Flex_Duct__c")]
        [EntityField(true)]
        public System.String TotEstSizeofFlexDuctc
        {
            get { return __TotEstSizeofFlexDuctc; }
            set { SetField(ref __TotEstSizeofFlexDuctc, value, "Tot_Est_Size_of_Flex_Duct__c"); }
        }
        private System.String __TotEstSizeofGRDsc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_GRD_s__c")]
        [EntityField(true)]
        public System.String TotEstSizeofGRDsc
        {
            get { return __TotEstSizeofGRDsc; }
            set { SetField(ref __TotEstSizeofGRDsc, value, "Tot_Est_Size_of_GRD_s__c"); }
        }
        private System.String __TotEstSizeofHVACComponentsc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_HVAC_Components__c")]
        [EntityField(true)]
        public System.String TotEstSizeofHVACComponentsc
        {
            get { return __TotEstSizeofHVACComponentsc; }
            set { SetField(ref __TotEstSizeofHVACComponentsc, value, "Tot_Est_Size_of_HVAC_Components__c"); }
        }
        private System.String __TotEstSizeofHearthc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Hearth__c")]
        [EntityField(true)]
        public System.String TotEstSizeofHearthc
        {
            get { return __TotEstSizeofHearthc; }
            set { SetField(ref __TotEstSizeofHearthc, value, "Tot_Est_Size_of_Hearth__c"); }
        }
        private System.String __TotEstSizeofLouversc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Louvers__c")]
        [EntityField(true)]
        public System.String TotEstSizeofLouversc
        {
            get { return __TotEstSizeofLouversc; }
            set { SetField(ref __TotEstSizeofLouversc, value, "Tot_Est_Size_of_Louvers__c"); }
        }
        private System.String __TotEstSizeofRTUAccessoriesc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_RTU_Accessories__c")]
        [EntityField(true)]
        public System.String TotEstSizeofRTUAccessoriesc
        {
            get { return __TotEstSizeofRTUAccessoriesc; }
            set { SetField(ref __TotEstSizeofRTUAccessoriesc, value, "Tot_Est_Size_of_RTU_Accessories__c"); }
        }
        private System.String __TotEstSizeofRTUc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_RTU__c")]
        [EntityField(true)]
        public System.String TotEstSizeofRTUc
        {
            get { return __TotEstSizeofRTUc; }
            set { SetField(ref __TotEstSizeofRTUc, value, "Tot_Est_Size_of_RTU__c"); }
        }
        private System.String __TotEstSizeofRefrigerationControlc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Refrigeration_Control__c")]
        [EntityField(true)]
        public System.String TotEstSizeofRefrigerationControlc
        {
            get { return __TotEstSizeofRefrigerationControlc; }
            set { SetField(ref __TotEstSizeofRefrigerationControlc, value, "Tot_Est_Size_of_Refrigeration_Control__c"); }
        }
        private System.String __TotEstSizeofResidentialAHUc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Residential_AHU__c")]
        [EntityField(true)]
        public System.String TotEstSizeofResidentialAHUc
        {
            get { return __TotEstSizeofResidentialAHUc; }
            set { SetField(ref __TotEstSizeofResidentialAHUc, value, "Tot_Est_Size_of_Residential_AHU__c"); }
        }
        private System.String __TotEstSizeofResidentialFurnacesc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Residential_Furnaces__c")]
        [EntityField(true)]
        public System.String TotEstSizeofResidentialFurnacesc
        {
            get { return __TotEstSizeofResidentialFurnacesc; }
            set { SetField(ref __TotEstSizeofResidentialFurnacesc, value, "Tot_Est_Size_of_Residential_Furnaces__c"); }
        }
        private System.String __TotEstSizeofResidentialRTUc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Residential_RTU__c")]
        [EntityField(true)]
        public System.String TotEstSizeofResidentialRTUc
        {
            get { return __TotEstSizeofResidentialRTUc; }
            set { SetField(ref __TotEstSizeofResidentialRTUc, value, "Tot_Est_Size_of_Residential_RTU__c"); }
        }
        private System.String __TotEstSizeofResidentialWSHPc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Residential_WSHP__c")]
        [EntityField(true)]
        public System.String TotEstSizeofResidentialWSHPc
        {
            get { return __TotEstSizeofResidentialWSHPc; }
            set { SetField(ref __TotEstSizeofResidentialWSHPc, value, "Tot_Est_Size_of_Residential_WSHP__c"); }
        }
        private System.String __TotEstSizeofSecurityc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Security__c")]
        [EntityField(true)]
        public System.String TotEstSizeofSecurityc
        {
            get { return __TotEstSizeofSecurityc; }
            set { SetField(ref __TotEstSizeofSecurityc, value, "Tot_Est_Size_of_Security__c"); }
        }
        private System.String __TotEstSizeofTStatsc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_T_Stats__c")]
        [EntityField(true)]
        public System.String TotEstSizeofTStatsc
        {
            get { return __TotEstSizeofTStatsc; }
            set { SetField(ref __TotEstSizeofTStatsc, value, "Tot_Est_Size_of_T_Stats__c"); }
        }
        private System.String __TotEstSizeofUnderfloorAirDisc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Underfloor_Air_Dis__c")]
        [EntityField(true)]
        public System.String TotEstSizeofUnderfloorAirDisc
        {
            get { return __TotEstSizeofUnderfloorAirDisc; }
            set { SetField(ref __TotEstSizeofUnderfloorAirDisc, value, "Tot_Est_Size_of_Underfloor_Air_Dis__c"); }
        }
        private System.String __TotEstSizeofVAVc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_VAV__c")]
        [EntityField(true)]
        public System.String TotEstSizeofVAVc
        {
            get { return __TotEstSizeofVAVc; }
            set { SetField(ref __TotEstSizeofVAVc, value, "Tot_Est_Size_of_VAV__c"); }
        }
        private System.String __TotEstSizeofVRFc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_VRF__c")]
        [EntityField(true)]
        public System.String TotEstSizeofVRFc
        {
            get { return __TotEstSizeofVRFc; }
            set { SetField(ref __TotEstSizeofVRFc, value, "Tot_Est_Size_of_VRF__c"); }
        }
        private System.String __TotEstSizeofVentc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_Vent__c")]
        [EntityField(true)]
        public System.String TotEstSizeofVentc
        {
            get { return __TotEstSizeofVentc; }
            set { SetField(ref __TotEstSizeofVentc, value, "Tot_Est_Size_of_Vent__c"); }
        }
        private System.String __TotEstSizeofWSHPc;
        [JsonProperty(PropertyName = "Tot_Est_Size_of_WSHP__c")]
        [EntityField(true)]
        public System.String TotEstSizeofWSHPc
        {
            get { return __TotEstSizeofWSHPc; }
            set { SetField(ref __TotEstSizeofWSHPc, value, "Tot_Est_Size_of_WSHP__c"); }
        }
        private System.String __UnderfloorAirDistc;
        [JsonProperty(PropertyName = "Underfloor_Air_Dist__c")]
        [EntityField(true)]
        public System.String UnderfloorAirDistc
        {
            get { return __UnderfloorAirDistc; }
            set { SetField(ref __UnderfloorAirDistc, value, "Underfloor_Air_Dist__c"); }
        }
        private System.String __VAVc;
        [JsonProperty(PropertyName = "VAV__c")]
        [EntityField(true)]
        public System.String VAVc
        {
            get { return __VAVc; }
            set { SetField(ref __VAVc, value, "VAV__c"); }
        }
        private System.String __VRFc;
        [JsonProperty(PropertyName = "VRF__c")]
        [EntityField(true)]
        public System.String VRFc
        {
            get { return __VRFc; }
            set { SetField(ref __VRFc, value, "VRF__c"); }
        }
        private System.String __Ventc;
        [JsonProperty(PropertyName = "Vent__c")]
        [EntityField(true)]
        public System.String Ventc
        {
            get { return __Ventc; }
            set { SetField(ref __Ventc, value, "Vent__c"); }
        }
        private System.String __WSHPc;
        [JsonProperty(PropertyName = "WSHP__c")]
        [EntityField(true)]
        public System.String WSHPc
        {
            get { return __WSHPc; }
            set { SetField(ref __WSHPc, value, "WSHP__c"); }
        }
        private System.String __fTotEstSizeofMarketc;
        [JsonProperty(PropertyName = "f_Tot_Est_Size_of_Market__c")]
        [EntityField(true)]
        public System.String fTotEstSizeofMarketc
        {
            get { return __fTotEstSizeofMarketc; }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<MarketIntelligence,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Market_Mapping__History")]
    public class MarketMappingHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private MarketMappingHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public MarketMappingHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickMarketMappingHistoryField __Field;
        [EntityField(false)]
        public PickMarketMappingHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Market_Mapping__c")]
    public class MarketMapping : ISalesforceEntity
    {
    [JsonConstructor]
        private MarketMapping(string hack)
        {
            trackPropertyUpdates = false;
        }

        public MarketMapping()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickMarketMappingCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickMarketMappingCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __AppliedSystemsMarketc;
        [JsonProperty(PropertyName = "Applied_Systems_Market__c")]
        [EntityField(true)]
        public System.String AppliedSystemsMarketc
        {
            get { return __AppliedSystemsMarketc; }
            set { SetField(ref __AppliedSystemsMarketc, value, "Applied_Systems_Market__c"); }
        }
        private System.String __AppliedSystemsRgnc;
        [JsonProperty(PropertyName = "Applied_Systems_Rgn__c")]
        [EntityField(true)]
        public System.String AppliedSystemsRgnc
        {
            get { return __AppliedSystemsRgnc; }
            set { SetField(ref __AppliedSystemsRgnc, value, "Applied_Systems_Rgn__c"); }
        }
        private System.String __Cntyc;
        [JsonProperty(PropertyName = "Cnty__c")]
        [EntityField(true)]
        public System.String Cntyc
        {
            get { return __Cntyc; }
            set { SetField(ref __Cntyc, value, "Cnty__c"); }
        }
        private System.String __ControlsProductsMarketc;
        [JsonProperty(PropertyName = "Controls_Products_Market__c")]
        [EntityField(true)]
        public System.String ControlsProductsMarketc
        {
            get { return __ControlsProductsMarketc; }
            set { SetField(ref __ControlsProductsMarketc, value, "Controls_Products_Market__c"); }
        }
        private System.String __ControlsProductsRgnc;
        [JsonProperty(PropertyName = "Controls_Products_Rgn__c")]
        [EntityField(true)]
        public System.String ControlsProductsRgnc
        {
            get { return __ControlsProductsRgnc; }
            set { SetField(ref __ControlsProductsRgnc, value, "Controls_Products_Rgn__c"); }
        }
        private System.String __HartCooleyMarketc;
        [JsonProperty(PropertyName = "Hart_Cooley_Market__c")]
        [EntityField(true)]
        public System.String HartCooleyMarketc
        {
            get { return __HartCooleyMarketc; }
            set { SetField(ref __HartCooleyMarketc, value, "Hart_Cooley_Market__c"); }
        }
        private System.String __HartCooleyRgnc;
        [JsonProperty(PropertyName = "Hart_Cooley_Rgn__c")]
        [EntityField(true)]
        public System.String HartCooleyRgnc
        {
            get { return __HartCooleyRgnc; }
            set { SetField(ref __HartCooleyRgnc, value, "Hart_Cooley_Rgn__c"); }
        }
        private System.String __KochMarketc;
        [JsonProperty(PropertyName = "Koch_Market__c")]
        [EntityField(true)]
        public System.String KochMarketc
        {
            get { return __KochMarketc; }
            set { SetField(ref __KochMarketc, value, "Koch_Market__c"); }
        }
        private System.String __KochRgnc;
        [JsonProperty(PropertyName = "Koch_Rgn__c")]
        [EntityField(true)]
        public System.String KochRgnc
        {
            get { return __KochRgnc; }
            set { SetField(ref __KochRgnc, value, "Koch_Rgn__c"); }
        }
        private System.String __KruegerMarketc;
        [JsonProperty(PropertyName = "Krueger_Market__c")]
        [EntityField(true)]
        public System.String KruegerMarketc
        {
            get { return __KruegerMarketc; }
            set { SetField(ref __KruegerMarketc, value, "Krueger_Market__c"); }
        }
        private System.String __KruegerRgnc;
        [JsonProperty(PropertyName = "Krueger_Rgn__c")]
        [EntityField(true)]
        public System.String KruegerRgnc
        {
            get { return __KruegerRgnc; }
            set { SetField(ref __KruegerRgnc, value, "Krueger_Rgn__c"); }
        }
        private System.String __NAChannelsMarketc;
        [JsonProperty(PropertyName = "NA_Channels_Market__c")]
        [EntityField(true)]
        public System.String NAChannelsMarketc
        {
            get { return __NAChannelsMarketc; }
            set { SetField(ref __NAChannelsMarketc, value, "NA_Channels_Market__c"); }
        }
        private System.String __NAChannelsRgnc;
        [JsonProperty(PropertyName = "NA_Channels_Rgn__c")]
        [EntityField(true)]
        public System.String NAChannelsRgnc
        {
            get { return __NAChannelsRgnc; }
        }
        private System.String __PennBarryMarketc;
        [JsonProperty(PropertyName = "PennBarry_Market__c")]
        [EntityField(true)]
        public System.String PennBarryMarketc
        {
            get { return __PennBarryMarketc; }
            set { SetField(ref __PennBarryMarketc, value, "PennBarry_Market__c"); }
        }
        private System.String __PennBarryRgnc;
        [JsonProperty(PropertyName = "PennBarry_Rgn__c")]
        [EntityField(true)]
        public System.String PennBarryRgnc
        {
            get { return __PennBarryRgnc; }
            set { SetField(ref __PennBarryRgnc, value, "PennBarry_Rgn__c"); }
        }
        private System.String __RuskinMarketc;
        [JsonProperty(PropertyName = "Ruskin_Market__c")]
        [EntityField(true)]
        public System.String RuskinMarketc
        {
            get { return __RuskinMarketc; }
            set { SetField(ref __RuskinMarketc, value, "Ruskin_Market__c"); }
        }
        private System.String __RuskinRgnc;
        [JsonProperty(PropertyName = "Ruskin_Rgn__c")]
        [EntityField(true)]
        public System.String RuskinRgnc
        {
            get { return __RuskinRgnc; }
            set { SetField(ref __RuskinRgnc, value, "Ruskin_Rgn__c"); }
        }
        private System.String __SSNAMarketc;
        [JsonProperty(PropertyName = "SSNA_Market__c")]
        [EntityField(true)]
        public System.String SSNAMarketc
        {
            get { return __SSNAMarketc; }
            set { SetField(ref __SSNAMarketc, value, "SSNA_Market__c"); }
        }
        private System.String __SSNARgnc;
        [JsonProperty(PropertyName = "SSNA_Rgn__c")]
        [EntityField(true)]
        public System.String SSNARgnc
        {
            get { return __SSNARgnc; }
            set { SetField(ref __SSNARgnc, value, "SSNA_Rgn__c"); }
        }
        private System.String __TitusMarketc;
        [JsonProperty(PropertyName = "Titus_Market__c")]
        [EntityField(true)]
        public System.String TitusMarketc
        {
            get { return __TitusMarketc; }
            set { SetField(ref __TitusMarketc, value, "Titus_Market__c"); }
        }
        private System.String __TitusRgnc;
        [JsonProperty(PropertyName = "Titus_Rgn__c")]
        [EntityField(true)]
        public System.String TitusRgnc
        {
            get { return __TitusRgnc; }
            set { SetField(ref __TitusRgnc, value, "Titus_Rgn__c"); }
        }
        private System.String __TrionMarketc;
        [JsonProperty(PropertyName = "Trion_Market__c")]
        [EntityField(true)]
        public System.String TrionMarketc
        {
            get { return __TrionMarketc; }
            set { SetField(ref __TrionMarketc, value, "Trion_Market__c"); }
        }
        private System.String __TrionRgnc;
        [JsonProperty(PropertyName = "Trion_Rgn__c")]
        [EntityField(true)]
        public System.String TrionRgnc
        {
            get { return __TrionRgnc; }
            set { SetField(ref __TrionRgnc, value, "Trion_Rgn__c"); }
        }
        private System.String __TuttleBaileyMarketc;
        [JsonProperty(PropertyName = "Tuttle_Bailey_Market__c")]
        [EntityField(true)]
        public System.String TuttleBaileyMarketc
        {
            get { return __TuttleBaileyMarketc; }
            set { SetField(ref __TuttleBaileyMarketc, value, "Tuttle_Bailey_Market__c"); }
        }
        private System.String __TuttleBaileyRgnc;
        [JsonProperty(PropertyName = "Tuttle_Bailey_Rgn__c")]
        [EntityField(true)]
        public System.String TuttleBaileyRgnc
        {
            get { return __TuttleBaileyRgnc; }
            set { SetField(ref __TuttleBaileyRgnc, value, "Tuttle_Bailey_Rgn__c"); }
        }
        private System.String __UPGMarketc;
        [JsonProperty(PropertyName = "UPG_Market__c")]
        [EntityField(true)]
        public System.String UPGMarketc
        {
            get { return __UPGMarketc; }
            set { SetField(ref __UPGMarketc, value, "UPG_Market__c"); }
        }
        private System.String __UPGRgnc;
        [JsonProperty(PropertyName = "UPG_Rgn__c")]
        [EntityField(true)]
        public System.String UPGRgnc
        {
            get { return __UPGRgnc; }
            set { SetField(ref __UPGRgnc, value, "UPG_Rgn__c"); }
        }
        private System.String __VRFMarketc;
        [JsonProperty(PropertyName = "VRF_Market__c")]
        [EntityField(true)]
        public System.String VRFMarketc
        {
            get { return __VRFMarketc; }
            set { SetField(ref __VRFMarketc, value, "VRF_Market__c"); }
        }
        private System.String __VRFRgnc;
        [JsonProperty(PropertyName = "VRF_Rgn__c")]
        [EntityField(true)]
        public System.String VRFRgnc
        {
            get { return __VRFRgnc; }
            set { SetField(ref __VRFRgnc, value, "VRF_Rgn__c"); }
        }
        private System.String __FIPSCodec;
        [JsonProperty(PropertyName = "FIPS_Code__c")]
        [EntityField(true)]
        public System.String FIPSCodec
        {
            get { return __FIPSCodec; }
            set { SetField(ref __FIPSCodec, value, "FIPS_Code__c"); }
        }
        private System.String __HitachiVRFMarketc;
        [JsonProperty(PropertyName = "Hitachi_VRF_Market__c")]
        [EntityField(true)]
        public System.String HitachiVRFMarketc
        {
            get { return __HitachiVRFMarketc; }
            set { SetField(ref __HitachiVRFMarketc, value, "Hitachi_VRF_Market__c"); }
        }
        private System.String __HitachiVRFRegionc;
        [JsonProperty(PropertyName = "Hitachi_VRF_Region__c")]
        [EntityField(true)]
        public System.String HitachiVRFRegionc
        {
            get { return __HitachiVRFRegionc; }
            set { SetField(ref __HitachiVRFRegionc, value, "Hitachi_VRF_Region__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Market_Mapping__c")]
        public RelationShip<MarketMapping,Account> Market_Mapping__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<MarketMapping,MarketMappingHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<MarketMapping,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Market__c")]
    public class Market : ISalesforceEntity
    {
    [JsonConstructor]
        private Market(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Market()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickMarketCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickMarketCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private PickMarketRgn __Rgnc;
        [JsonProperty(PropertyName = "Rgn__c")]
        [EntityField(true)]
        public PickMarketRgn Rgnc
        {
            get { return __Rgnc; }
            set { SetField(ref __Rgnc, value, "Rgn__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Market__c")]
        public RelationShip<Market,Account> Accounts__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Market,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account_Market__c")]
        public RelationShip<Market,ChannelChange> Channel_Changes__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Market,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Market__c")]
        public RelationShip<Market,MarketIntelligence> Market_Intelligence__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("NA_Channels_Market__c")]
        public RelationShip<Market,MarketMapping> Market_Mappings__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Market__c")]
        public RelationShip<Market,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Market__c")]
        //public RelationShip<Market,Program> Parent_Programs__r
        //{
        //    get;set;
        //}
        //[JsonIgnore]
        //[ReferencedByField("Market__c")]
        public RelationShip<Market,StrategicGoal> Strategic_Initiatives__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Market,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Market,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Opportunity")]
    public class Opportunity : ISalesforceEntity
    {
    [JsonConstructor]
        private Opportunity(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Opportunity()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickOpportunityStageName __StageName;
        [EntityField(false)]
        public PickOpportunityStageName StageName
        {
            get { return __StageName; }
            set { SetField(ref __StageName, value, "StageName"); }
        }
        private System.String __Amount;
        [EntityField(true)]
        public System.String Amount
        {
            get { return __Amount; }
            set { SetField(ref __Amount, value, "Amount"); }
        }
        private System.String __Probability;
        [EntityField(true)]
        public System.String Probability
        {
            get { return __Probability; }
            set { SetField(ref __Probability, value, "Probability"); }
        }
        private System.String __ExpectedRevenue;
        [EntityField(true)]
        public System.String ExpectedRevenue
        {
            get { return __ExpectedRevenue; }
            set { SetField(ref __ExpectedRevenue, value, "ExpectedRevenue"); }
        }
        private System.Double? __TotalOpportunityQuantity;
        [EntityField(true)]
        public System.Double? TotalOpportunityQuantity
        {
            get { return __TotalOpportunityQuantity; }
            set { SetField(ref __TotalOpportunityQuantity, value, "TotalOpportunityQuantity"); }
        }
        private System.DateTime __CloseDate;
        [EntityField(false)]
        public System.DateTime CloseDate
        {
            get { return __CloseDate; }
            set { SetField(ref __CloseDate, value, "CloseDate"); }
        }
        private PickOpportunityType __Type;
        [EntityField(true)]
        public PickOpportunityType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __NextStep;
        [EntityField(true)]
        public System.String NextStep
        {
            get { return __NextStep; }
            set { SetField(ref __NextStep, value, "NextStep"); }
        }
        private PickOpportunityLeadSource __LeadSource;
        [EntityField(true)]
        public PickOpportunityLeadSource LeadSource
        {
            get { return __LeadSource; }
            set { SetField(ref __LeadSource, value, "LeadSource"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.Boolean __IsWon;
        [EntityField(false)]
        public System.Boolean IsWon
        {
            get { return __IsWon; }
            set { SetField(ref __IsWon, value, "IsWon"); }
        }
        private PickOpportunityForecastCategory __ForecastCategory;
        [EntityField(false)]
        public PickOpportunityForecastCategory ForecastCategory
        {
            get { return __ForecastCategory; }
            set { SetField(ref __ForecastCategory, value, "ForecastCategory"); }
        }
        private PickOpportunityForecastCategoryName __ForecastCategoryName;
        [EntityField(true)]
        public PickOpportunityForecastCategoryName ForecastCategoryName
        {
            get { return __ForecastCategoryName; }
            set { SetField(ref __ForecastCategoryName, value, "ForecastCategoryName"); }
        }
        private PickOpportunityCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickOpportunityCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __CampaignId;
        [EntityField(true)]
        public System.String CampaignId
        {
            get { return __CampaignId; }
            set { SetField(ref __CampaignId, value, "CampaignId"); }
        }
        private System.Boolean __HasOpportunityLineItem;
        [EntityField(false)]
        public System.Boolean HasOpportunityLineItem
        {
            get { return __HasOpportunityLineItem; }
            set { SetField(ref __HasOpportunityLineItem, value, "HasOpportunityLineItem"); }
        }
        private System.Boolean __IsSplit;
        [EntityField(false)]
        public System.Boolean IsSplit
        {
            get { return __IsSplit; }
            set { SetField(ref __IsSplit, value, "IsSplit"); }
        }
        private System.String __Pricebook2Id;
        [EntityField(true)]
        public System.String Pricebook2Id
        {
            get { return __Pricebook2Id; }
            set { SetField(ref __Pricebook2Id, value, "Pricebook2Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.Int32? __FiscalQuarter;
        [EntityField(true)]
        public System.Int32? FiscalQuarter
        {
            get { return __FiscalQuarter; }
            set { SetField(ref __FiscalQuarter, value, "FiscalQuarter"); }
        }
        private System.Int32? __FiscalYear;
        [EntityField(true)]
        public System.Int32? FiscalYear
        {
            get { return __FiscalYear; }
            set { SetField(ref __FiscalYear, value, "FiscalYear"); }
        }
        private System.String __Fiscal;
        [EntityField(true)]
        public System.String Fiscal
        {
            get { return __Fiscal; }
            set { SetField(ref __Fiscal, value, "Fiscal"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __PartnerAccountId;
        [EntityField(true)]
        public System.String PartnerAccountId
        {
            get { return __PartnerAccountId; }
            set { SetField(ref __PartnerAccountId, value, "PartnerAccountId"); }
        }
        private System.String __AwardedToc;
        [JsonProperty(PropertyName = "Awarded_To__c")]
        [EntityField(true)]
        public System.String AwardedToc
        {
            get { return __AwardedToc; }
            set { SetField(ref __AwardedToc, value, "Awarded_To__c"); }
        }
        private System.DateTime? __BidDatec;
        [JsonProperty(PropertyName = "Bid_Date__c")]
        [EntityField(true)]
        public System.DateTime? BidDatec
        {
            get { return __BidDatec; }
            set { SetField(ref __BidDatec, value, "Bid_Date__c"); }
        }
        private System.String __Contactc;
        [JsonProperty(PropertyName = "Contact__c")]
        [EntityField(true)]
        public System.String Contactc
        {
            get { return __Contactc; }
            set { SetField(ref __Contactc, value, "Contact__c"); }
        }
        private System.String __ContractorFieldc;
        [JsonProperty(PropertyName = "Contractor_Field__c")]
        [EntityField(true)]
        public System.String ContractorFieldc
        {
            get { return __ContractorFieldc; }
            set { SetField(ref __ContractorFieldc, value, "Contractor_Field__c"); }
        }
        private System.String __CustomerIdc;
        [JsonProperty(PropertyName = "CustomerId__c")]
        [EntityField(true)]
        public System.String CustomerIdc
        {
            get { return __CustomerIdc; }
        }
        private PickOpportunityDBCompetitor __DBCompetitorc;
        [JsonProperty(PropertyName = "DB_Competitor__c")]
        [EntityField(true)]
        public PickOpportunityDBCompetitor DBCompetitorc
        {
            get { return __DBCompetitorc; }
            set { SetField(ref __DBCompetitorc, value, "DB_Competitor__c"); }
        }
        private System.String __OtherReasonLostc;
        [JsonProperty(PropertyName = "Other_Reason_Lost__c")]
        [EntityField(true)]
        public System.String OtherReasonLostc
        {
            get { return __OtherReasonLostc; }
            set { SetField(ref __OtherReasonLostc, value, "Other_Reason_Lost__c"); }
        }
        private System.String __Locationc;
        [JsonProperty(PropertyName = "Location__c")]
        [EntityField(true)]
        public System.String Locationc
        {
            get { return __Locationc; }
            set { SetField(ref __Locationc, value, "Location__c"); }
        }
        private System.Boolean __Modifiedc;
        [JsonProperty(PropertyName = "Modified__c")]
        [EntityField(false)]
        public System.Boolean Modifiedc
        {
            get { return __Modifiedc; }
        }
        private System.String __ProjectNamec;
        [JsonProperty(PropertyName = "Project_Name__c")]
        [EntityField(true)]
        public System.String ProjectNamec
        {
            get { return __ProjectNamec; }
            set { SetField(ref __ProjectNamec, value, "Project_Name__c"); }
        }
        private System.String __ProjectNumberc;
        [JsonProperty(PropertyName = "Project_Number__c")]
        [EntityField(true)]
        public System.String ProjectNumberc
        {
            get { return __ProjectNumberc; }
            set { SetField(ref __ProjectNumberc, value, "Project_Number__c"); }
        }
        private System.Boolean __PublicOpportunityc;
        [JsonProperty(PropertyName = "Public_Opportunity__c")]
        [EntityField(false)]
        public System.Boolean PublicOpportunityc
        {
            get { return __PublicOpportunityc; }
            set { SetField(ref __PublicOpportunityc, value, "Public_Opportunity__c"); }
        }
        private System.DateTime? __QuoteSubmittalDatec;
        [JsonProperty(PropertyName = "QuoteSubmittalDate__c")]
        [EntityField(true)]
        public System.DateTime? QuoteSubmittalDatec
        {
            get { return __QuoteSubmittalDatec; }
            set { SetField(ref __QuoteSubmittalDatec, value, "QuoteSubmittalDate__c"); }
        }
        private System.DateTime? __QuoteTestSubmittalc;
        [JsonProperty(PropertyName = "QuoteTestSubmittal__c")]
        [EntityField(true)]
        public System.DateTime? QuoteTestSubmittalc
        {
            get { return __QuoteTestSubmittalc; }
            set { SetField(ref __QuoteTestSubmittalc, value, "QuoteTestSubmittal__c"); }
        }
        private System.Boolean __RunValidationRulec;
        [JsonProperty(PropertyName = "Run_Validation_Rule__c")]
        [EntityField(false)]
        public System.Boolean RunValidationRulec
        {
            get { return __RunValidationRulec; }
            set { SetField(ref __RunValidationRulec, value, "Run_Validation_Rule__c"); }
        }
        private System.String __USTQuotePricec;
        [JsonProperty(PropertyName = "UST_Quote_Price__c")]
        [EntityField(true)]
        public System.String USTQuotePricec
        {
            get { return __USTQuotePricec; }
            set { SetField(ref __USTQuotePricec, value, "UST_Quote_Price__c"); }
        }
        private System.String __Userc;
        [JsonProperty(PropertyName = "User__c")]
        [EntityField(true)]
        public System.String Userc
        {
            get { return __Userc; }
            set { SetField(ref __Userc, value, "User__c"); }
        }
        private System.String __CommercialPackageAmountc;
        [JsonProperty(PropertyName = "Commercial_Package_Amount__c")]
        [EntityField(true)]
        public System.String CommercialPackageAmountc
        {
            get { return __CommercialPackageAmountc; }
            set { SetField(ref __CommercialPackageAmountc, value, "Commercial_Package_Amount__c"); }
        }
        private System.String __CommercialSplitAmountc;
        [JsonProperty(PropertyName = "Commercial_Split_Amount__c")]
        [EntityField(true)]
        public System.String CommercialSplitAmountc
        {
            get { return __CommercialSplitAmountc; }
            set { SetField(ref __CommercialSplitAmountc, value, "Commercial_Split_Amount__c"); }
        }
        private System.String __DocumentURLc;
        [JsonProperty(PropertyName = "Document_URL__c")]
        [EntityField(true)]
        public System.String DocumentURLc
        {
            get { return __DocumentURLc; }
            set { SetField(ref __DocumentURLc, value, "Document_URL__c"); }
        }
        private PickOpportunityLostReason __LostReasonc;
        [JsonProperty(PropertyName = "Lost_Reason__c")]
        [EntityField(true)]
        public PickOpportunityLostReason LostReasonc
        {
            get { return __LostReasonc; }
            set { SetField(ref __LostReasonc, value, "Lost_Reason__c"); }
        }
        private System.String __ResidentialPackageAmountc;
        [JsonProperty(PropertyName = "Residential_Package_Amount__c")]
        [EntityField(true)]
        public System.String ResidentialPackageAmountc
        {
            get { return __ResidentialPackageAmountc; }
            set { SetField(ref __ResidentialPackageAmountc, value, "Residential_Package_Amount__c"); }
        }
        private System.String __SalesRankc;
        [JsonProperty(PropertyName = "Sales_Rank__c")]
        [EntityField(true)]
        public System.String SalesRankc
        {
            get { return __SalesRankc; }
            set { SetField(ref __SalesRankc, value, "Sales_Rank__c"); }
        }
        private System.String __ThirdPartyAmountc;
        [JsonProperty(PropertyName = "Third_Party_Amount__c")]
        [EntityField(true)]
        public System.String ThirdPartyAmountc
        {
            get { return __ThirdPartyAmountc; }
            set { SetField(ref __ThirdPartyAmountc, value, "Third_Party_Amount__c"); }
        }
        private System.String __Engineerc;
        [JsonProperty(PropertyName = "Engineer__c")]
        [EntityField(true)]
        public System.String Engineerc
        {
            get { return __Engineerc; }
            set { SetField(ref __Engineerc, value, "Engineer__c"); }
        }
        private System.String __GeneralContractorc;
        [JsonProperty(PropertyName = "General_Contractor__c")]
        [EntityField(true)]
        public System.String GeneralContractorc
        {
            get { return __GeneralContractorc; }
            set { SetField(ref __GeneralContractorc, value, "General_Contractor__c"); }
        }
        private System.String __CustomerIdOwnerDepartmentc;
        [JsonProperty(PropertyName = "CustomerId_OwnerDepartment__c")]
        [EntityField(true)]
        public System.String CustomerIdOwnerDepartmentc
        {
            get { return __CustomerIdOwnerDepartmentc; }
        }
        private System.String __Commentc;
        [JsonProperty(PropertyName = "Comment__c")]
        [EntityField(true)]
        public System.String Commentc
        {
            get { return __Commentc; }
            set { SetField(ref __Commentc, value, "Comment__c"); }
        }
        private PickOpportunityProduct __Productc;
        [JsonProperty(PropertyName = "Product__c")]
        [EntityField(true)]
        public PickOpportunityProduct Productc
        {
            get { return __Productc; }
            set { SetField(ref __Productc, value, "Product__c"); }
        }
        private System.String __PONumberc;
        [JsonProperty(PropertyName = "P_O_Number__c")]
        [EntityField(true)]
        public System.String PONumberc
        {
            get { return __PONumberc; }
            set { SetField(ref __PONumberc, value, "P_O_Number__c"); }
        }
        private System.String __ProductDescriptionc;
        [JsonProperty(PropertyName = "Product_Description__c")]
        [EntityField(true)]
        public System.String ProductDescriptionc
        {
            get { return __ProductDescriptionc; }
            set { SetField(ref __ProductDescriptionc, value, "Product_Description__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickOpportunityDesignBasis> __DesignBasisc;
        [JsonProperty(PropertyName = "Design_Basis__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickOpportunityDesignBasis> DesignBasisc
        {
            get { return __DesignBasisc; }
            set { SetField(ref __DesignBasisc, value, "Design_Basis__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickOpportunityEquipmentType> __EquipmentTypec;
        [JsonProperty(PropertyName = "Equipment_Type__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickOpportunityEquipmentType> EquipmentTypec
        {
            get { return __EquipmentTypec; }
            set { SetField(ref __EquipmentTypec, value, "Equipment_Type__c"); }
        }
        private System.String __Contact2c;
        [JsonProperty(PropertyName = "Contact2__c")]
        [EntityField(true)]
        public System.String Contact2c
        {
            get { return __Contact2c; }
            set { SetField(ref __Contact2c, value, "Contact2__c"); }
        }
        private System.String __Contact3c;
        [JsonProperty(PropertyName = "Contact3__c")]
        [EntityField(true)]
        public System.String Contact3c
        {
            get { return __Contact3c; }
            set { SetField(ref __Contact3c, value, "Contact3__c"); }
        }
        private System.String __Contact4c;
        [JsonProperty(PropertyName = "Contact4__c")]
        [EntityField(true)]
        public System.String Contact4c
        {
            get { return __Contact4c; }
            set { SetField(ref __Contact4c, value, "Contact4__c"); }
        }
        private System.String __EngineerOwnerc;
        [JsonProperty(PropertyName = "Engineer_Owner__c")]
        [EntityField(true)]
        public System.String EngineerOwnerc
        {
            get { return __EngineerOwnerc; }
        }
        private System.String __EngineerFieldc;
        [JsonProperty(PropertyName = "Engineer_Field__c")]
        [EntityField(true)]
        public System.String EngineerFieldc
        {
            get { return __EngineerFieldc; }
            set { SetField(ref __EngineerFieldc, value, "Engineer_Field__c"); }
        }
        private System.String __BuyPricec;
        [JsonProperty(PropertyName = "Buy_Price__c")]
        [EntityField(true)]
        public System.String BuyPricec
        {
            get { return __BuyPricec; }
            set { SetField(ref __BuyPricec, value, "Buy_Price__c"); }
        }
        private System.String __Profitc;
        [JsonProperty(PropertyName = "Profit__c")]
        [EntityField(true)]
        public System.String Profitc
        {
            get { return __Profitc; }
            set { SetField(ref __Profitc, value, "Profit__c"); }
        }
        private System.String __IPAc;
        [JsonProperty(PropertyName = "IPA__c")]
        [EntityField(true)]
        public System.String IPAc
        {
            get { return __IPAc; }
            set { SetField(ref __IPAc, value, "IPA__c"); }
        }
        private System.String __OriginalContractorsc;
        [JsonProperty(PropertyName = "Original_Contractors__c")]
        [EntityField(true)]
        public System.String OriginalContractorsc
        {
            get { return __OriginalContractorsc; }
            set { SetField(ref __OriginalContractorsc, value, "Original_Contractors__c"); }
        }
        private System.String __Followupc;
        [JsonProperty(PropertyName = "Follow_up__c")]
        [EntityField(true)]
        public System.String Followupc
        {
            get { return __Followupc; }
            set { SetField(ref __Followupc, value, "Follow_up__c"); }
        }
        private System.String __Architecttxtc;
        [JsonProperty(PropertyName = "Architect_txt__c")]
        [EntityField(true)]
        public System.String Architecttxtc
        {
            get { return __Architecttxtc; }
            set { SetField(ref __Architecttxtc, value, "Architect_txt__c"); }
        }
        private System.DateTime? __CGBidDtc;
        [JsonProperty(PropertyName = "CG_Bid_Dt__c")]
        [EntityField(true)]
        public System.DateTime? CGBidDtc
        {
            get { return __CGBidDtc; }
            set { SetField(ref __CGBidDtc, value, "CG_Bid_Dt__c"); }
        }
        private System.DateTime? __CloseDatec;
        [JsonProperty(PropertyName = "Close_Date__c")]
        [EntityField(true)]
        public System.DateTime? CloseDatec
        {
            get { return __CloseDatec; }
            set { SetField(ref __CloseDatec, value, "Close_Date__c"); }
        }
        private System.DateTime? __DiscoverDatec;
        [JsonProperty(PropertyName = "Discover_Date__c")]
        [EntityField(true)]
        public System.DateTime? DiscoverDatec
        {
            get { return __DiscoverDatec; }
            set { SetField(ref __DiscoverDatec, value, "Discover_Date__c"); }
        }
        private System.String __Engineertxtc;
        [JsonProperty(PropertyName = "Engineer_txt__c")]
        [EntityField(true)]
        public System.String Engineertxtc
        {
            get { return __Engineertxtc; }
            set { SetField(ref __Engineertxtc, value, "Engineer_txt__c"); }
        }
        private System.DateTime? __EstShipDtc;
        [JsonProperty(PropertyName = "Est_Ship_Dt__c")]
        [EntityField(true)]
        public System.DateTime? EstShipDtc
        {
            get { return __EstShipDtc; }
            set { SetField(ref __EstShipDtc, value, "Est_Ship_Dt__c"); }
        }
        private System.String __GeneralContractortxtc;
        [JsonProperty(PropertyName = "General_Contractor_txt__c")]
        [EntityField(true)]
        public System.String GeneralContractortxtc
        {
            get { return __GeneralContractortxtc; }
            set { SetField(ref __GeneralContractortxtc, value, "General_Contractor_txt__c"); }
        }
        private System.String __InvoicedPricec;
        [JsonProperty(PropertyName = "Invoiced_Price__c")]
        [EntityField(true)]
        public System.String InvoicedPricec
        {
            get { return __InvoicedPricec; }
            set { SetField(ref __InvoicedPricec, value, "Invoiced_Price__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private System.String __Marketc;
        [JsonProperty(PropertyName = "Market__c")]
        [EntityField(true)]
        public System.String Marketc
        {
            get { return __Marketc; }
            set { SetField(ref __Marketc, value, "Market__c"); }
        }
        private System.DateTime? __PresentDatec;
        [JsonProperty(PropertyName = "Present_Date__c")]
        [EntityField(true)]
        public System.DateTime? PresentDatec
        {
            get { return __PresentDatec; }
            set { SetField(ref __PresentDatec, value, "Present_Date__c"); }
        }
        private System.DateTime? __QualifyDatec;
        [JsonProperty(PropertyName = "Qualify_Date__c")]
        [EntityField(true)]
        public System.DateTime? QualifyDatec
        {
            get { return __QualifyDatec; }
            set { SetField(ref __QualifyDatec, value, "Qualify_Date__c"); }
        }
        private System.String __VRFRSMc;
        [JsonProperty(PropertyName = "VRF_RSM__c")]
        [EntityField(true)]
        public System.String VRFRSMc
        {
            get { return __VRFRSMc; }
            set { SetField(ref __VRFRSMc, value, "VRF_RSM__c"); }
        }
        private System.DateTime? __VerifyDatec;
        [JsonProperty(PropertyName = "Verify_Date__c")]
        [EntityField(true)]
        public System.DateTime? VerifyDatec
        {
            get { return __VerifyDatec; }
            set { SetField(ref __VerifyDatec, value, "Verify_Date__c"); }
        }
        private System.Double? __BookingDesignerParticipantCountc;
        [JsonProperty(PropertyName = "Booking_Designer_Participant_Count__c")]
        [EntityField(true)]
        public System.Double? BookingDesignerParticipantCountc
        {
            get { return __BookingDesignerParticipantCountc; }
        }
        private System.Double? __BookingMechanicalConParticipantCountc;
        [JsonProperty(PropertyName = "Booking_Mechanical_Con_Participant_Count__c")]
        [EntityField(true)]
        public System.Double? BookingMechanicalConParticipantCountc
        {
            get { return __BookingMechanicalConParticipantCountc; }
        }
        private System.Double? __BookingOwnerParticipantCountc;
        [JsonProperty(PropertyName = "Booking_Owner_Participant_Count__c")]
        [EntityField(true)]
        public System.Double? BookingOwnerParticipantCountc
        {
            get { return __BookingOwnerParticipantCountc; }
        }
        private System.Double? __NoofParticipantsc;
        [JsonProperty(PropertyName = "No_of_Participants__c")]
        [EntityField(true)]
        public System.Double? NoofParticipantsc
        {
            get { return __NoofParticipantsc; }
        }
        private System.Double? __OpportunityTeamCountc;
        [JsonProperty(PropertyName = "Opportunity_Team_Count__c")]
        [EntityField(true)]
        public System.Double? OpportunityTeamCountc
        {
            get { return __OpportunityTeamCountc; }
        }
        private PickOpportunityApprovalStatus __ApprovalStatusc;
        [JsonProperty(PropertyName = "Approval_Status__c")]
        [EntityField(true)]
        public PickOpportunityApprovalStatus ApprovalStatusc
        {
            get { return __ApprovalStatusc; }
            set { SetField(ref __ApprovalStatusc, value, "Approval_Status__c"); }
        }
        private System.Boolean __IsVRFc;
        [JsonProperty(PropertyName = "Is_VRF__c")]
        [EntityField(false)]
        public System.Boolean IsVRFc
        {
            get { return __IsVRFc; }
            set { SetField(ref __IsVRFc, value, "Is_VRF__c"); }
        }
        private System.String __VRFAmtc;
        [JsonProperty(PropertyName = "VRF_Amt__c")]
        [EntityField(true)]
        public System.String VRFAmtc
        {
            get { return __VRFAmtc; }
            set { SetField(ref __VRFAmtc, value, "VRF_Amt__c"); }
        }
        private System.String __GrossMarginAmountc;
        [JsonProperty(PropertyName = "Gross_Margin_Amount__c")]
        [EntityField(true)]
        public System.String GrossMarginAmountc
        {
            get { return __GrossMarginAmountc; }
            set { SetField(ref __GrossMarginAmountc, value, "Gross_Margin_Amount__c"); }
        }
        private System.String __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(true)]
        public System.String Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private PickOpportunityNACLeadType __NACLeadTypec;
        [JsonProperty(PropertyName = "NAC_Lead_Type__c")]
        [EntityField(true)]
        public PickOpportunityNACLeadType NACLeadTypec
        {
            get { return __NACLeadTypec; }
            set { SetField(ref __NACLeadTypec, value, "NAC_Lead_Type__c"); }
        }
        private System.String __NACParentProgramc;
        [JsonProperty(PropertyName = "NAC_Parent_Program__c")]
        [EntityField(true)]
        public System.String NACParentProgramc
        {
            get { return __NACParentProgramc; }
            set { SetField(ref __NACParentProgramc, value, "NAC_Parent_Program__c"); }
        }
        private System.String __NACProductc;
        [JsonProperty(PropertyName = "NAC_Product__c")]
        [EntityField(true)]
        public System.String NACProductc
        {
            get { return __NACProductc; }
            set { SetField(ref __NACProductc, value, "NAC_Product__c"); }
        }
        private System.String __NACStrategicInitiativec;
        [JsonProperty(PropertyName = "NAC_Strategic_Initiative__c")]
        [EntityField(true)]
        public System.String NACStrategicInitiativec
        {
            get { return __NACStrategicInitiativec; }
            set { SetField(ref __NACStrategicInitiativec, value, "NAC_Strategic_Initiative__c"); }
        }
        private System.DateTime? __PlannedInvoiceDatec;
        [JsonProperty(PropertyName = "Planned_Invoice_Date__c")]
        [EntityField(true)]
        public System.DateTime? PlannedInvoiceDatec
        {
            get { return __PlannedInvoiceDatec; }
            set { SetField(ref __PlannedInvoiceDatec, value, "Planned_Invoice_Date__c"); }
        }
        private System.Boolean __BODc;
        [JsonProperty(PropertyName = "BOD__c")]
        [EntityField(false)]
        public System.Boolean BODc
        {
            get { return __BODc; }
            set { SetField(ref __BODc, value, "BOD__c"); }
        }
        private System.String __QuoteIDc;
        [JsonProperty(PropertyName = "Quote_ID__c")]
        [EntityField(true)]
        public System.String QuoteIDc
        {
            get { return __QuoteIDc; }
            set { SetField(ref __QuoteIDc, value, "Quote_ID__c"); }
        }
        private System.String __ActionPlanc;
        [JsonProperty(PropertyName = "Action_Plan__c")]
        [EntityField(true)]
        public System.String ActionPlanc
        {
            get { return __ActionPlanc; }
            set { SetField(ref __ActionPlanc, value, "Action_Plan__c"); }
        }
        private System.String __BODDescriptionc;
        [JsonProperty(PropertyName = "BOD_Description__c")]
        [EntityField(true)]
        public System.String BODDescriptionc
        {
            get { return __BODDescriptionc; }
            set { SetField(ref __BODDescriptionc, value, "BOD_Description__c"); }
        }
        private System.String __IPAQuoteNumberc;
        [JsonProperty(PropertyName = "IPA_Quote_Number__c")]
        [EntityField(true)]
        public System.String IPAQuoteNumberc
        {
            get { return __IPAQuoteNumberc; }
            set { SetField(ref __IPAQuoteNumberc, value, "IPA_Quote_Number__c"); }
        }
        private System.String __ContactNACc;
        [JsonProperty(PropertyName = "Contact_NAC__c")]
        [EntityField(true)]
        public System.String ContactNACc
        {
            get { return __ContactNACc; }
            set { SetField(ref __ContactNACc, value, "Contact_NAC__c"); }
        }
        private System.DateTime? __QuoteDatec;
        [JsonProperty(PropertyName = "Quote_Date__c")]
        [EntityField(true)]
        public System.DateTime? QuoteDatec
        {
            get { return __QuoteDatec; }
            set { SetField(ref __QuoteDatec, value, "Quote_Date__c"); }
        }
        private System.String __Contractorc;
        [JsonProperty(PropertyName = "Contractor__c")]
        [EntityField(true)]
        public System.String Contractorc
        {
            get { return __Contractorc; }
            set { SetField(ref __Contractorc, value, "Contractor__c"); }
        }
        private System.String __Ownerc;
        [JsonProperty(PropertyName = "Owner__c")]
        [EntityField(true)]
        public System.String Ownerc
        {
            get { return __Ownerc; }
            set { SetField(ref __Ownerc, value, "Owner__c"); }
        }
        private System.String __ConsultingEngineerc;
        [JsonProperty(PropertyName = "Consulting_Engineer__c")]
        [EntityField(true)]
        public System.String ConsultingEngineerc
        {
            get { return __ConsultingEngineerc; }
            set { SetField(ref __ConsultingEngineerc, value, "Consulting_Engineer__c"); }
        }
        private System.String __AmountExpectedtoRevenueinCFYc;
        [JsonProperty(PropertyName = "Amount_Expected_to_Revenue_in_CFY__c")]
        [EntityField(true)]
        public System.String AmountExpectedtoRevenueinCFYc
        {
            get { return __AmountExpectedtoRevenueinCFYc; }
            set { SetField(ref __AmountExpectedtoRevenueinCFYc, value, "Amount_Expected_to_Revenue_in_CFY__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Opportunity__c")]
        public RelationShip<Opportunity,ActionPlan> R00NR0000000VZZIMA4__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityFieldHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityHistory> OpportunityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityLineItem> OpportunityLineItems
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunitySplit> OpportunitySplits
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Opportunity,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("OpportunityFieldHistory")]
    public class OpportunityFieldHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityFieldHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityFieldHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickOpportunityFieldHistoryField __Field;
        [EntityField(false)]
        public PickOpportunityFieldHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("OpportunityHistory")]
    public class OpportunityHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickOpportunityHistoryStageName __StageName;
        [EntityField(false)]
        public PickOpportunityHistoryStageName StageName
        {
            get { return __StageName; }
            set { SetField(ref __StageName, value, "StageName"); }
        }
        private System.String __Amount;
        [EntityField(true)]
        public System.String Amount
        {
            get { return __Amount; }
            set { SetField(ref __Amount, value, "Amount"); }
        }
        private System.String __ExpectedRevenue;
        [EntityField(true)]
        public System.String ExpectedRevenue
        {
            get { return __ExpectedRevenue; }
            set { SetField(ref __ExpectedRevenue, value, "ExpectedRevenue"); }
        }
        private System.DateTime? __CloseDate;
        [EntityField(true)]
        public System.DateTime? CloseDate
        {
            get { return __CloseDate; }
            set { SetField(ref __CloseDate, value, "CloseDate"); }
        }
        private System.String __Probability;
        [EntityField(true)]
        public System.String Probability
        {
            get { return __Probability; }
            set { SetField(ref __Probability, value, "Probability"); }
        }
        private PickOpportunityHistoryForecastCategory __ForecastCategory;
        [EntityField(true)]
        public PickOpportunityHistoryForecastCategory ForecastCategory
        {
            get { return __ForecastCategory; }
            set { SetField(ref __ForecastCategory, value, "ForecastCategory"); }
        }
        private PickOpportunityHistoryCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickOpportunityHistoryCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("OpportunityLineItem")]
    public class OpportunityLineItem : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityLineItem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityLineItem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.String __PricebookEntryId;
        [EntityField(true)]
        public System.String PricebookEntryId
        {
            get { return __PricebookEntryId; }
            set { SetField(ref __PricebookEntryId, value, "PricebookEntryId"); }
        }
        private System.String __Product2Id;
        [EntityField(true)]
        public System.String Product2Id
        {
            get { return __Product2Id; }
            set { SetField(ref __Product2Id, value, "Product2Id"); }
        }
        private System.String __ProductCode;
        [EntityField(true)]
        public System.String ProductCode
        {
            get { return __ProductCode; }
            set { SetField(ref __ProductCode, value, "ProductCode"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickOpportunityLineItemCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickOpportunityLineItemCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.Double __Quantity;
        [EntityField(false)]
        public System.Double Quantity
        {
            get { return __Quantity; }
            set { SetField(ref __Quantity, value, "Quantity"); }
        }
        private System.String __Discount;
        [EntityField(true)]
        public System.String Discount
        {
            get { return __Discount; }
            set { SetField(ref __Discount, value, "Discount"); }
        }
        private System.String __Subtotal;
        [EntityField(true)]
        public System.String Subtotal
        {
            get { return __Subtotal; }
            set { SetField(ref __Subtotal, value, "Subtotal"); }
        }
        private System.String __TotalPrice;
        [EntityField(true)]
        public System.String TotalPrice
        {
            get { return __TotalPrice; }
            set { SetField(ref __TotalPrice, value, "TotalPrice"); }
        }
        private System.String __UnitPrice;
        [EntityField(true)]
        public System.String UnitPrice
        {
            get { return __UnitPrice; }
            set { SetField(ref __UnitPrice, value, "UnitPrice"); }
        }
        private System.String __ListPrice;
        [EntityField(true)]
        public System.String ListPrice
        {
            get { return __ListPrice; }
            set { SetField(ref __ListPrice, value, "ListPrice"); }
        }
        private System.DateTime? __ServiceDate;
        [EntityField(true)]
        public System.DateTime? ServiceDate
        {
            get { return __ServiceDate; }
            set { SetField(ref __ServiceDate, value, "ServiceDate"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Productservicecodeinfoc;
        [JsonProperty(PropertyName = "Product_service_code_info__c")]
        [EntityField(true)]
        public System.String Productservicecodeinfoc
        {
            get { return __Productservicecodeinfoc; }
            set { SetField(ref __Productservicecodeinfoc, value, "Product_service_code_info__c"); }
        }
    }
    [EntityName("OpportunityPhase__c")]
    public class OpportunityPhase : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityPhase(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityPhase()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickOpportunityPhaseCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickOpportunityPhaseCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Codec;
        [JsonProperty(PropertyName = "Code__c")]
        [EntityField(true)]
        public System.String Codec
        {
            get { return __Codec; }
            set { SetField(ref __Codec, value, "Code__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<OpportunityPhase,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("OpportunitySplit")]
    public class OpportunitySplit : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunitySplit(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunitySplit()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Split;
        [EntityField(false)]
        public System.String Split
        {
            get { return __Split; }
            set { SetField(ref __Split, value, "Split"); }
        }
        private PickOpportunitySplitCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickOpportunitySplitCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __SplitOwnerId;
        [EntityField(false)]
        public System.String SplitOwnerId
        {
            get { return __SplitOwnerId; }
            set { SetField(ref __SplitOwnerId, value, "SplitOwnerId"); }
        }
        private System.String __SplitPercentage;
        [EntityField(false)]
        public System.String SplitPercentage
        {
            get { return __SplitPercentage; }
            set { SetField(ref __SplitPercentage, value, "SplitPercentage"); }
        }
        private System.String __SplitNote;
        [EntityField(true)]
        public System.String SplitNote
        {
            get { return __SplitNote; }
            set { SetField(ref __SplitNote, value, "SplitNote"); }
        }
        private System.String __SplitTypeId;
        [EntityField(true)]
        public System.String SplitTypeId
        {
            get { return __SplitTypeId; }
            set { SetField(ref __SplitTypeId, value, "SplitTypeId"); }
        }
        private System.String __SplitAmount;
        [EntityField(true)]
        public System.String SplitAmount
        {
            get { return __SplitAmount; }
            set { SetField(ref __SplitAmount, value, "SplitAmount"); }
        }
        private System.Boolean __CurrentUserc;
        [JsonProperty(PropertyName = "Current_User__c")]
        [EntityField(false)]
        public System.Boolean CurrentUserc
        {
            get { return __CurrentUserc; }
        }
    }
    [EntityName("OpportunityStatusCodes__c")]
    public class OpportunityStatusCodes : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityStatusCodes(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityStatusCodes()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickOpportunityStatusCodesCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickOpportunityStatusCodesCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Codec;
        [JsonProperty(PropertyName = "Code__c")]
        [EntityField(true)]
        public System.String Codec
        {
            get { return __Codec; }
            set { SetField(ref __Codec, value, "Code__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<OpportunityStatusCodes,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Opportunity_Stages__c")]
    public class OpportunityStages : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityStages(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityStages()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickOpportunityStagesCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickOpportunityStagesCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __Amtc;
        [JsonProperty(PropertyName = "Amt__c")]
        [EntityField(false)]
        public System.Boolean Amtc
        {
            get { return __Amtc; }
            set { SetField(ref __Amtc, value, "Amt__c"); }
        }
        private System.Boolean __Costc;
        [JsonProperty(PropertyName = "Cost__c")]
        [EntityField(false)]
        public System.Boolean Costc
        {
            get { return __Costc; }
            set { SetField(ref __Costc, value, "Cost__c"); }
        }
        private System.Boolean __GPc;
        [JsonProperty(PropertyName = "GP__c")]
        [EntityField(false)]
        public System.Boolean GPc
        {
            get { return __GPc; }
            set { SetField(ref __GPc, value, "GP__c"); }
        }
        private System.Boolean __Marginc;
        [JsonProperty(PropertyName = "Margin__c")]
        [EntityField(false)]
        public System.Boolean Marginc
        {
            get { return __Marginc; }
            set { SetField(ref __Marginc, value, "Margin__c"); }
        }
        private System.String __Stagec;
        [JsonProperty(PropertyName = "Stage__c")]
        [EntityField(true)]
        public System.String Stagec
        {
            get { return __Stagec; }
            set { SetField(ref __Stagec, value, "Stage__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<OpportunityStages,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Product2")]
    public class Product2 : ISalesforceEntity
    {
    [JsonConstructor]
        private Product2(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Product2()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __ProductCode;
        [EntityField(true)]
        public System.String ProductCode
        {
            get { return __ProductCode; }
            set { SetField(ref __ProductCode, value, "ProductCode"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickProduct2Family __Family;
        [EntityField(true)]
        public PickProduct2Family Family
        {
            get { return __Family; }
            set { SetField(ref __Family, value, "Family"); }
        }
        private PickProduct2CurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickProduct2CurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(true)]
        public System.String Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private PickProduct2BusUnit __BusUnitc;
        [JsonProperty(PropertyName = "Bus_Unit__c")]
        [EntityField(true)]
        public PickProduct2BusUnit BusUnitc
        {
            get { return __BusUnitc; }
            set { SetField(ref __BusUnitc, value, "Bus_Unit__c"); }
        }
        private System.DateTime? __LaunchDtc;
        [JsonProperty(PropertyName = "Launch_Dt__c")]
        [EntityField(true)]
        public System.DateTime? LaunchDtc
        {
            get { return __LaunchDtc; }
            set { SetField(ref __LaunchDtc, value, "Launch_Dt__c"); }
        }
        private System.String __ParentProductc;
        [JsonProperty(PropertyName = "Parent_Product__c")]
        [EntityField(true)]
        public System.String ParentProductc
        {
            get { return __ParentProductc; }
            set { SetField(ref __ParentProductc, value, "Parent_Product__c"); }
        }
        private PickProduct2ProductLine __ProductLinec;
        [JsonProperty(PropertyName = "Product_Line__c")]
        [EntityField(true)]
        public PickProduct2ProductLine ProductLinec
        {
            get { return __ProductLinec; }
            set { SetField(ref __ProductLinec, value, "Product_Line__c"); }
        }
        private PickProduct2ProductMiniSeries __ProductMiniSeriesc;
        [JsonProperty(PropertyName = "Product_Mini_Series__c")]
        [EntityField(true)]
        public PickProduct2ProductMiniSeries ProductMiniSeriesc
        {
            get { return __ProductMiniSeriesc; }
            set { SetField(ref __ProductMiniSeriesc, value, "Product_Mini_Series__c"); }
        }
        private PickProduct2ProductSeries __ProductSeriesc;
        [JsonProperty(PropertyName = "Product_Series__c")]
        [EntityField(true)]
        public PickProduct2ProductSeries ProductSeriesc
        {
            get { return __ProductSeriesc; }
            set { SetField(ref __ProductSeriesc, value, "Product_Series__c"); }
        }
        private PickProduct2ProductType __ProductTypec;
        [JsonProperty(PropertyName = "Product_Type__c")]
        [EntityField(true)]
        public PickProduct2ProductType ProductTypec
        {
            get { return __ProductTypec; }
            set { SetField(ref __ProductTypec, value, "Product_Type__c"); }
        }
        private System.String __SKUc;
        [JsonProperty(PropertyName = "SKU__c")]
        [EntityField(true)]
        public System.String SKUc
        {
            get { return __SKUc; }
            set { SetField(ref __SKUc, value, "SKU__c"); }
        }
        private System.DateTime? __SunsetDtc;
        [JsonProperty(PropertyName = "Sunset_Dt__c")]
        [EntityField(true)]
        public System.DateTime? SunsetDtc
        {
            get { return __SunsetDtc; }
            set { SetField(ref __SunsetDtc, value, "Sunset_Dt__c"); }
        }
        private System.Boolean __fIsCompetingProductc;
        [JsonProperty(PropertyName = "f_Is_Competing_Product__c")]
        [EntityField(false)]
        public System.Boolean fIsCompetingProductc
        {
            get { return __fIsCompetingProductc; }
        }
        private PickProduct2MarketShareCategory __MarketShareCategoryc;
        [JsonProperty(PropertyName = "Market_Share_Category__c")]
        [EntityField(true)]
        public PickProduct2MarketShareCategory MarketShareCategoryc
        {
            get { return __MarketShareCategoryc; }
            set { SetField(ref __MarketShareCategoryc, value, "Market_Share_Category__c"); }
        }
        private System.Double? __ExpirationDaysc;
        [JsonProperty(PropertyName = "Expiration_Days__c")]
        [EntityField(true)]
        public System.Double? ExpirationDaysc
        {
            get { return __ExpirationDaysc; }
            set { SetField(ref __ExpirationDaysc, value, "Expiration_Days__c"); }
        }
        private System.String __ProductGroupc;
        [JsonProperty(PropertyName = "Product_Group__c")]
        [EntityField(true)]
        public System.String ProductGroupc
        {
            get { return __ProductGroupc; }
            set { SetField(ref __ProductGroupc, value, "Product_Group__c"); }
        }
        private PickProduct2SMEUItemType __SMEUItemTypec;
        [JsonProperty(PropertyName = "SM_EU_Item_Type__c")]
        [EntityField(true)]
        public PickProduct2SMEUItemType SMEUItemTypec
        {
            get { return __SMEUItemTypec; }
            set { SetField(ref __SMEUItemTypec, value, "SM_EU_Item_Type__c"); }
        }
        private System.String __SMEUPrimaryUOMCodec;
        [JsonProperty(PropertyName = "SM_EU_Primary_UOM_Code__c")]
        [EntityField(true)]
        public System.String SMEUPrimaryUOMCodec
        {
            get { return __SMEUPrimaryUOMCodec; }
            set { SetField(ref __SMEUPrimaryUOMCodec, value, "SM_EU_Primary_UOM_Code__c"); }
        }
        private System.Boolean __SMEUServiceItemFlagc;
        [JsonProperty(PropertyName = "SM_EU_Service_Item_Flag__c")]
        [EntityField(false)]
        public System.Boolean SMEUServiceItemFlagc
        {
            get { return __SMEUServiceItemFlagc; }
            set { SetField(ref __SMEUServiceItemFlagc, value, "SM_EU_Service_Item_Flag__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Product2,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Product__c")]
        public RelationShip<Product2,ChannelLineCard> Channel_Line_Cards__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Product2,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("NAC_Product__c")]
        public RelationShip<Product2,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Parent_Product__c")]
        public RelationShip<Product2,Product2> Products__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Product__c")]
        public RelationShip<Product2,ProductLine> Product_Lines__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Product__c")]
        //public RelationShip<Product2,Program> Parent_Programs__r
        //{
        //    get;set;
        //}
        //[JsonIgnore]
        //[ReferencedByField("WhatId")]
        public RelationShip<Product2,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Product2,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Product_Line__History")]
    public class ProductLineHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ProductLineHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProductLineHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickProductLineHistoryField __Field;
        [EntityField(false)]
        public PickProductLineHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Product_Line__c")]
    public class ProductLine : ISalesforceEntity
    {
    [JsonConstructor]
        private ProductLine(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProductLine()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickProductLineCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickProductLineCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.String __Acctc;
        [JsonProperty(PropertyName = "Acct__c")]
        [EntityField(false)]
        public System.String Acctc
        {
            get { return __Acctc; }
            set { SetField(ref __Acctc, value, "Acct__c"); }
        }
        private System.DateTime? __EndDtc;
        [JsonProperty(PropertyName = "End_Dt__c")]
        [EntityField(true)]
        public System.DateTime? EndDtc
        {
            get { return __EndDtc; }
            set { SetField(ref __EndDtc, value, "End_Dt__c"); }
        }
        private PickProductLineInactiveReason __InactiveReasonc;
        [JsonProperty(PropertyName = "Inactive_Reason__c")]
        [EntityField(true)]
        public PickProductLineInactiveReason InactiveReasonc
        {
            get { return __InactiveReasonc; }
            set { SetField(ref __InactiveReasonc, value, "Inactive_Reason__c"); }
        }
        private System.Boolean __IsActivec;
        [JsonProperty(PropertyName = "Is_Active__c")]
        [EntityField(false)]
        public System.Boolean IsActivec
        {
            get { return __IsActivec; }
            set { SetField(ref __IsActivec, value, "Is_Active__c"); }
        }
        private System.String __IsCompetingBrandc;
        [JsonProperty(PropertyName = "Is_Competing_Brand__c")]
        [EntityField(true)]
        public System.String IsCompetingBrandc
        {
            get { return __IsCompetingBrandc; }
        }
        private System.String __JCIBrandc;
        [JsonProperty(PropertyName = "JCI_Brand__c")]
        [EntityField(true)]
        public System.String JCIBrandc
        {
            get { return __JCIBrandc; }
            set { SetField(ref __JCIBrandc, value, "JCI_Brand__c"); }
        }
        private System.String __OtherDetailc;
        [JsonProperty(PropertyName = "Other_Detail__c")]
        [EntityField(true)]
        public System.String OtherDetailc
        {
            get { return __OtherDetailc; }
            set { SetField(ref __OtherDetailc, value, "Other_Detail__c"); }
        }
        private System.String __Productc;
        [JsonProperty(PropertyName = "Product__c")]
        [EntityField(true)]
        public System.String Productc
        {
            get { return __Productc; }
            set { SetField(ref __Productc, value, "Product__c"); }
        }
        private System.DateTime? __StartDtc;
        [JsonProperty(PropertyName = "Start_Dt__c")]
        [EntityField(true)]
        public System.DateTime? StartDtc
        {
            get { return __StartDtc; }
            set { SetField(ref __StartDtc, value, "Start_Dt__c"); }
        }
        private System.String __fBrandc;
        [JsonProperty(PropertyName = "f_Brand__c")]
        [EntityField(true)]
        public System.String fBrandc
        {
            get { return __fBrandc; }
        }
        private System.String __fProductFamilyc;
        [JsonProperty(PropertyName = "f_Product_Family__c")]
        [EntityField(true)]
        public System.String fProductFamilyc
        {
            get { return __fProductFamilyc; }
        }
        private System.String __AprCFYAmtc;
        [JsonProperty(PropertyName = "Apr_CFY_Amt__c")]
        [EntityField(true)]
        public System.String AprCFYAmtc
        {
            get { return __AprCFYAmtc; }
            set { SetField(ref __AprCFYAmtc, value, "Apr_CFY_Amt__c"); }
        }
        private System.String __Orgc;
        [JsonProperty(PropertyName = "Org__c")]
        [EntityField(true)]
        public System.String Orgc
        {
            get { return __Orgc; }
            set { SetField(ref __Orgc, value, "Org__c"); }
        }
        private System.Double? __AprCFYQtyc;
        [JsonProperty(PropertyName = "Apr_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? AprCFYQtyc
        {
            get { return __AprCFYQtyc; }
            set { SetField(ref __AprCFYQtyc, value, "Apr_CFY_Qty__c"); }
        }
        private System.String __AprPFYAmtc;
        [JsonProperty(PropertyName = "Apr_PFY_Amt__c")]
        [EntityField(true)]
        public System.String AprPFYAmtc
        {
            get { return __AprPFYAmtc; }
            set { SetField(ref __AprPFYAmtc, value, "Apr_PFY_Amt__c"); }
        }
        private System.String __SellingEntityc;
        [JsonProperty(PropertyName = "Selling_Entity__c")]
        [EntityField(true)]
        public System.String SellingEntityc
        {
            get { return __SellingEntityc; }
            set { SetField(ref __SellingEntityc, value, "Selling_Entity__c"); }
        }
        private System.Double? __AprPFYQtyc;
        [JsonProperty(PropertyName = "Apr_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? AprPFYQtyc
        {
            get { return __AprPFYQtyc; }
            set { SetField(ref __AprPFYQtyc, value, "Apr_PFY_Qty__c"); }
        }
        private System.String __AprYBLAmtc;
        [JsonProperty(PropertyName = "Apr_YBL_Amt__c")]
        [EntityField(true)]
        public System.String AprYBLAmtc
        {
            get { return __AprYBLAmtc; }
            set { SetField(ref __AprYBLAmtc, value, "Apr_YBL_Amt__c"); }
        }
        private System.String __SubOrgc;
        [JsonProperty(PropertyName = "Sub_Org__c")]
        [EntityField(true)]
        public System.String SubOrgc
        {
            get { return __SubOrgc; }
            set { SetField(ref __SubOrgc, value, "Sub_Org__c"); }
        }
        private System.Double? __AprYBLQtyc;
        [JsonProperty(PropertyName = "Apr_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? AprYBLQtyc
        {
            get { return __AprYBLQtyc; }
            set { SetField(ref __AprYBLQtyc, value, "Apr_YBL_Qty__c"); }
        }
        private System.String __AugCFYAmtc;
        [JsonProperty(PropertyName = "Aug_CFY_Amt__c")]
        [EntityField(true)]
        public System.String AugCFYAmtc
        {
            get { return __AugCFYAmtc; }
            set { SetField(ref __AugCFYAmtc, value, "Aug_CFY_Amt__c"); }
        }
        private System.String __SubSellingEntityc;
        [JsonProperty(PropertyName = "Sub_Selling_Entity__c")]
        [EntityField(true)]
        public System.String SubSellingEntityc
        {
            get { return __SubSellingEntityc; }
            set { SetField(ref __SubSellingEntityc, value, "Sub_Selling_Entity__c"); }
        }
        private System.Double? __AugCFYQtyc;
        [JsonProperty(PropertyName = "Aug_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? AugCFYQtyc
        {
            get { return __AugCFYQtyc; }
            set { SetField(ref __AugCFYQtyc, value, "Aug_CFY_Qty__c"); }
        }
        private System.String __AugPFYAmtc;
        [JsonProperty(PropertyName = "Aug_PFY_Amt__c")]
        [EntityField(true)]
        public System.String AugPFYAmtc
        {
            get { return __AugPFYAmtc; }
            set { SetField(ref __AugPFYAmtc, value, "Aug_PFY_Amt__c"); }
        }
        private System.Boolean __CompareProdAccConcatc;
        [JsonProperty(PropertyName = "Compare_Prod_Acc_Concat__c")]
        [EntityField(false)]
        public System.Boolean CompareProdAccConcatc
        {
            get { return __CompareProdAccConcatc; }
        }
        private System.Double? __AugPFYQtyc;
        [JsonProperty(PropertyName = "Aug_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? AugPFYQtyc
        {
            get { return __AugPFYQtyc; }
            set { SetField(ref __AugPFYQtyc, value, "Aug_PFY_Qty__c"); }
        }
        private System.String __AugYBLAmtc;
        [JsonProperty(PropertyName = "Aug_YBL_Amt__c")]
        [EntityField(true)]
        public System.String AugYBLAmtc
        {
            get { return __AugYBLAmtc; }
            set { SetField(ref __AugYBLAmtc, value, "Aug_YBL_Amt__c"); }
        }
        private System.String __fProdAccContactc;
        [JsonProperty(PropertyName = "fProd_Acc_Contact__c")]
        [EntityField(true)]
        public System.String fProdAccContactc
        {
            get { return __fProdAccContactc; }
        }
        private System.Double? __AugYBLQtyc;
        [JsonProperty(PropertyName = "Aug_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? AugYBLQtyc
        {
            get { return __AugYBLQtyc; }
            set { SetField(ref __AugYBLQtyc, value, "Aug_YBL_Qty__c"); }
        }
        private System.String __DecCFYAmtc;
        [JsonProperty(PropertyName = "Dec_CFY_Amt__c")]
        [EntityField(true)]
        public System.String DecCFYAmtc
        {
            get { return __DecCFYAmtc; }
            set { SetField(ref __DecCFYAmtc, value, "Dec_CFY_Amt__c"); }
        }
        private System.String __ChannelLineCardc;
        [JsonProperty(PropertyName = "Channel_Line_Card__c")]
        [EntityField(true)]
        public System.String ChannelLineCardc
        {
            get { return __ChannelLineCardc; }
            set { SetField(ref __ChannelLineCardc, value, "Channel_Line_Card__c"); }
        }
        private System.Double? __DecCFYQtyc;
        [JsonProperty(PropertyName = "Dec_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? DecCFYQtyc
        {
            get { return __DecCFYQtyc; }
            set { SetField(ref __DecCFYQtyc, value, "Dec_CFY_Qty__c"); }
        }
        private System.String __DecPFYAmtc;
        [JsonProperty(PropertyName = "Dec_PFY_Amt__c")]
        [EntityField(true)]
        public System.String DecPFYAmtc
        {
            get { return __DecPFYAmtc; }
            set { SetField(ref __DecPFYAmtc, value, "Dec_PFY_Amt__c"); }
        }
        private System.Double? __DecPFYQtyc;
        [JsonProperty(PropertyName = "Dec_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? DecPFYQtyc
        {
            get { return __DecPFYQtyc; }
            set { SetField(ref __DecPFYQtyc, value, "Dec_PFY_Qty__c"); }
        }
        private System.String __DecYBLAmtc;
        [JsonProperty(PropertyName = "Dec_YBL_Amt__c")]
        [EntityField(true)]
        public System.String DecYBLAmtc
        {
            get { return __DecYBLAmtc; }
            set { SetField(ref __DecYBLAmtc, value, "Dec_YBL_Amt__c"); }
        }
        private System.Double? __DecYBLQtyc;
        [JsonProperty(PropertyName = "Dec_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? DecYBLQtyc
        {
            get { return __DecYBLQtyc; }
            set { SetField(ref __DecYBLQtyc, value, "Dec_YBL_Qty__c"); }
        }
        private System.String __FebCFYAmtc;
        [JsonProperty(PropertyName = "Feb_CFY_Amt__c")]
        [EntityField(true)]
        public System.String FebCFYAmtc
        {
            get { return __FebCFYAmtc; }
            set { SetField(ref __FebCFYAmtc, value, "Feb_CFY_Amt__c"); }
        }
        private System.Double? __FebCFYQtyc;
        [JsonProperty(PropertyName = "Feb_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? FebCFYQtyc
        {
            get { return __FebCFYQtyc; }
            set { SetField(ref __FebCFYQtyc, value, "Feb_CFY_Qty__c"); }
        }
        private System.String __FebPFYAmtc;
        [JsonProperty(PropertyName = "Feb_PFY_Amt__c")]
        [EntityField(true)]
        public System.String FebPFYAmtc
        {
            get { return __FebPFYAmtc; }
            set { SetField(ref __FebPFYAmtc, value, "Feb_PFY_Amt__c"); }
        }
        private System.Double? __FebPFYQtyc;
        [JsonProperty(PropertyName = "Feb_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? FebPFYQtyc
        {
            get { return __FebPFYQtyc; }
            set { SetField(ref __FebPFYQtyc, value, "Feb_PFY_Qty__c"); }
        }
        private System.String __FebYBLAmtc;
        [JsonProperty(PropertyName = "Feb_YBL_Amt__c")]
        [EntityField(true)]
        public System.String FebYBLAmtc
        {
            get { return __FebYBLAmtc; }
            set { SetField(ref __FebYBLAmtc, value, "Feb_YBL_Amt__c"); }
        }
        private System.Double? __FebYBLQtyc;
        [JsonProperty(PropertyName = "Feb_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? FebYBLQtyc
        {
            get { return __FebYBLQtyc; }
            set { SetField(ref __FebYBLQtyc, value, "Feb_YBL_Qty__c"); }
        }
        private System.String __JanCFYAmtc;
        [JsonProperty(PropertyName = "Jan_CFY_Amt__c")]
        [EntityField(true)]
        public System.String JanCFYAmtc
        {
            get { return __JanCFYAmtc; }
            set { SetField(ref __JanCFYAmtc, value, "Jan_CFY_Amt__c"); }
        }
        private System.Double? __JanCFYQtyc;
        [JsonProperty(PropertyName = "Jan_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? JanCFYQtyc
        {
            get { return __JanCFYQtyc; }
            set { SetField(ref __JanCFYQtyc, value, "Jan_CFY_Qty__c"); }
        }
        private System.String __JanPFYAmtc;
        [JsonProperty(PropertyName = "Jan_PFY_Amt__c")]
        [EntityField(true)]
        public System.String JanPFYAmtc
        {
            get { return __JanPFYAmtc; }
            set { SetField(ref __JanPFYAmtc, value, "Jan_PFY_Amt__c"); }
        }
        private System.Double? __JanPFYQtyc;
        [JsonProperty(PropertyName = "Jan_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? JanPFYQtyc
        {
            get { return __JanPFYQtyc; }
            set { SetField(ref __JanPFYQtyc, value, "Jan_PFY_Qty__c"); }
        }
        private System.String __JanYBLAmtc;
        [JsonProperty(PropertyName = "Jan_YBL_Amt__c")]
        [EntityField(true)]
        public System.String JanYBLAmtc
        {
            get { return __JanYBLAmtc; }
            set { SetField(ref __JanYBLAmtc, value, "Jan_YBL_Amt__c"); }
        }
        private System.Double? __JanYBLQtyc;
        [JsonProperty(PropertyName = "Jan_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? JanYBLQtyc
        {
            get { return __JanYBLQtyc; }
            set { SetField(ref __JanYBLQtyc, value, "Jan_YBL_Qty__c"); }
        }
        private System.String __JulCFYAmtc;
        [JsonProperty(PropertyName = "Jul_CFY_Amt__c")]
        [EntityField(true)]
        public System.String JulCFYAmtc
        {
            get { return __JulCFYAmtc; }
            set { SetField(ref __JulCFYAmtc, value, "Jul_CFY_Amt__c"); }
        }
        private System.Double? __JulCFYQtyc;
        [JsonProperty(PropertyName = "Jul_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? JulCFYQtyc
        {
            get { return __JulCFYQtyc; }
            set { SetField(ref __JulCFYQtyc, value, "Jul_CFY_Qty__c"); }
        }
        private System.String __JulPFYAmtc;
        [JsonProperty(PropertyName = "Jul_PFY_Amt__c")]
        [EntityField(true)]
        public System.String JulPFYAmtc
        {
            get { return __JulPFYAmtc; }
            set { SetField(ref __JulPFYAmtc, value, "Jul_PFY_Amt__c"); }
        }
        private System.Double? __JulPFYQtyc;
        [JsonProperty(PropertyName = "Jul_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? JulPFYQtyc
        {
            get { return __JulPFYQtyc; }
            set { SetField(ref __JulPFYQtyc, value, "Jul_PFY_Qty__c"); }
        }
        private System.String __JulYBLAmtc;
        [JsonProperty(PropertyName = "Jul_YBL_Amt__c")]
        [EntityField(true)]
        public System.String JulYBLAmtc
        {
            get { return __JulYBLAmtc; }
            set { SetField(ref __JulYBLAmtc, value, "Jul_YBL_Amt__c"); }
        }
        private System.Double? __JulYBLQtyc;
        [JsonProperty(PropertyName = "Jul_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? JulYBLQtyc
        {
            get { return __JulYBLQtyc; }
            set { SetField(ref __JulYBLQtyc, value, "Jul_YBL_Qty__c"); }
        }
        private System.String __JunCFYAmtc;
        [JsonProperty(PropertyName = "Jun_CFY_Amt__c")]
        [EntityField(true)]
        public System.String JunCFYAmtc
        {
            get { return __JunCFYAmtc; }
            set { SetField(ref __JunCFYAmtc, value, "Jun_CFY_Amt__c"); }
        }
        private System.Double? __JunCFYQtyc;
        [JsonProperty(PropertyName = "Jun_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? JunCFYQtyc
        {
            get { return __JunCFYQtyc; }
            set { SetField(ref __JunCFYQtyc, value, "Jun_CFY_Qty__c"); }
        }
        private System.String __JunPFYAmtc;
        [JsonProperty(PropertyName = "Jun_PFY_Amt__c")]
        [EntityField(true)]
        public System.String JunPFYAmtc
        {
            get { return __JunPFYAmtc; }
            set { SetField(ref __JunPFYAmtc, value, "Jun_PFY_Amt__c"); }
        }
        private System.Double? __JunPFYQtyc;
        [JsonProperty(PropertyName = "Jun_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? JunPFYQtyc
        {
            get { return __JunPFYQtyc; }
            set { SetField(ref __JunPFYQtyc, value, "Jun_PFY_Qty__c"); }
        }
        private System.String __JunYBLAmtc;
        [JsonProperty(PropertyName = "Jun_YBL_Amt__c")]
        [EntityField(true)]
        public System.String JunYBLAmtc
        {
            get { return __JunYBLAmtc; }
            set { SetField(ref __JunYBLAmtc, value, "Jun_YBL_Amt__c"); }
        }
        private System.Double? __JunYBLQtyc;
        [JsonProperty(PropertyName = "Jun_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? JunYBLQtyc
        {
            get { return __JunYBLQtyc; }
            set { SetField(ref __JunYBLQtyc, value, "Jun_YBL_Qty__c"); }
        }
        private System.String __MarCFYAmtc;
        [JsonProperty(PropertyName = "Mar_CFY_Amt__c")]
        [EntityField(true)]
        public System.String MarCFYAmtc
        {
            get { return __MarCFYAmtc; }
            set { SetField(ref __MarCFYAmtc, value, "Mar_CFY_Amt__c"); }
        }
        private System.Double? __MarCFYQtyc;
        [JsonProperty(PropertyName = "Mar_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? MarCFYQtyc
        {
            get { return __MarCFYQtyc; }
            set { SetField(ref __MarCFYQtyc, value, "Mar_CFY_Qty__c"); }
        }
        private System.String __MarPFYAmtc;
        [JsonProperty(PropertyName = "Mar_PFY_Amt__c")]
        [EntityField(true)]
        public System.String MarPFYAmtc
        {
            get { return __MarPFYAmtc; }
            set { SetField(ref __MarPFYAmtc, value, "Mar_PFY_Amt__c"); }
        }
        private System.Double? __MarPFYQtyc;
        [JsonProperty(PropertyName = "Mar_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? MarPFYQtyc
        {
            get { return __MarPFYQtyc; }
            set { SetField(ref __MarPFYQtyc, value, "Mar_PFY_Qty__c"); }
        }
        private System.String __MarYBLAmtc;
        [JsonProperty(PropertyName = "Mar_YBL_Amt__c")]
        [EntityField(true)]
        public System.String MarYBLAmtc
        {
            get { return __MarYBLAmtc; }
            set { SetField(ref __MarYBLAmtc, value, "Mar_YBL_Amt__c"); }
        }
        private System.Double? __MarYBLQtyc;
        [JsonProperty(PropertyName = "Mar_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? MarYBLQtyc
        {
            get { return __MarYBLQtyc; }
            set { SetField(ref __MarYBLQtyc, value, "Mar_YBL_Qty__c"); }
        }
        private System.String __MayCFYAmtc;
        [JsonProperty(PropertyName = "May_CFY_Amt__c")]
        [EntityField(true)]
        public System.String MayCFYAmtc
        {
            get { return __MayCFYAmtc; }
            set { SetField(ref __MayCFYAmtc, value, "May_CFY_Amt__c"); }
        }
        private System.Double? __MayCFYQtyc;
        [JsonProperty(PropertyName = "May_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? MayCFYQtyc
        {
            get { return __MayCFYQtyc; }
            set { SetField(ref __MayCFYQtyc, value, "May_CFY_Qty__c"); }
        }
        private System.String __MayPFYAmtc;
        [JsonProperty(PropertyName = "May_PFY_Amt__c")]
        [EntityField(true)]
        public System.String MayPFYAmtc
        {
            get { return __MayPFYAmtc; }
            set { SetField(ref __MayPFYAmtc, value, "May_PFY_Amt__c"); }
        }
        private System.Double? __MayPFYQtyc;
        [JsonProperty(PropertyName = "May_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? MayPFYQtyc
        {
            get { return __MayPFYQtyc; }
            set { SetField(ref __MayPFYQtyc, value, "May_PFY_Qty__c"); }
        }
        private System.String __MayYBLAmtc;
        [JsonProperty(PropertyName = "May_YBL_Amt__c")]
        [EntityField(true)]
        public System.String MayYBLAmtc
        {
            get { return __MayYBLAmtc; }
            set { SetField(ref __MayYBLAmtc, value, "May_YBL_Amt__c"); }
        }
        private System.Double? __MayYBLQtyc;
        [JsonProperty(PropertyName = "May_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? MayYBLQtyc
        {
            get { return __MayYBLQtyc; }
            set { SetField(ref __MayYBLQtyc, value, "May_YBL_Qty__c"); }
        }
        private System.String __NovCFYAmtc;
        [JsonProperty(PropertyName = "Nov_CFY_Amt__c")]
        [EntityField(true)]
        public System.String NovCFYAmtc
        {
            get { return __NovCFYAmtc; }
            set { SetField(ref __NovCFYAmtc, value, "Nov_CFY_Amt__c"); }
        }
        private System.Double? __NovCFYQtyc;
        [JsonProperty(PropertyName = "Nov_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? NovCFYQtyc
        {
            get { return __NovCFYQtyc; }
            set { SetField(ref __NovCFYQtyc, value, "Nov_CFY_Qty__c"); }
        }
        private System.String __NovPFYAmtc;
        [JsonProperty(PropertyName = "Nov_PFY_Amt__c")]
        [EntityField(true)]
        public System.String NovPFYAmtc
        {
            get { return __NovPFYAmtc; }
            set { SetField(ref __NovPFYAmtc, value, "Nov_PFY_Amt__c"); }
        }
        private System.Double? __NovPFYQtyc;
        [JsonProperty(PropertyName = "Nov_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? NovPFYQtyc
        {
            get { return __NovPFYQtyc; }
            set { SetField(ref __NovPFYQtyc, value, "Nov_PFY_Qty__c"); }
        }
        private System.String __NovYBLAmtc;
        [JsonProperty(PropertyName = "Nov_YBL_Amt__c")]
        [EntityField(true)]
        public System.String NovYBLAmtc
        {
            get { return __NovYBLAmtc; }
            set { SetField(ref __NovYBLAmtc, value, "Nov_YBL_Amt__c"); }
        }
        private System.Double? __NovYBLQtyc;
        [JsonProperty(PropertyName = "Nov_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? NovYBLQtyc
        {
            get { return __NovYBLQtyc; }
            set { SetField(ref __NovYBLQtyc, value, "Nov_YBL_Qty__c"); }
        }
        private System.String __OctCFYAmtc;
        [JsonProperty(PropertyName = "Oct_CFY_Amt__c")]
        [EntityField(true)]
        public System.String OctCFYAmtc
        {
            get { return __OctCFYAmtc; }
            set { SetField(ref __OctCFYAmtc, value, "Oct_CFY_Amt__c"); }
        }
        private System.Double? __OctCFYQtyc;
        [JsonProperty(PropertyName = "Oct_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? OctCFYQtyc
        {
            get { return __OctCFYQtyc; }
            set { SetField(ref __OctCFYQtyc, value, "Oct_CFY_Qty__c"); }
        }
        private System.String __OctPFYAmtc;
        [JsonProperty(PropertyName = "Oct_PFY_Amt__c")]
        [EntityField(true)]
        public System.String OctPFYAmtc
        {
            get { return __OctPFYAmtc; }
            set { SetField(ref __OctPFYAmtc, value, "Oct_PFY_Amt__c"); }
        }
        private System.Double? __OctPFYQtyc;
        [JsonProperty(PropertyName = "Oct_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? OctPFYQtyc
        {
            get { return __OctPFYQtyc; }
            set { SetField(ref __OctPFYQtyc, value, "Oct_PFY_Qty__c"); }
        }
        private System.String __OctYBLAmtc;
        [JsonProperty(PropertyName = "Oct_YBL_Amt__c")]
        [EntityField(true)]
        public System.String OctYBLAmtc
        {
            get { return __OctYBLAmtc; }
            set { SetField(ref __OctYBLAmtc, value, "Oct_YBL_Amt__c"); }
        }
        private System.Double? __OctYBLQtyc;
        [JsonProperty(PropertyName = "Oct_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? OctYBLQtyc
        {
            get { return __OctYBLQtyc; }
            set { SetField(ref __OctYBLQtyc, value, "Oct_YBL_Qty__c"); }
        }
        private System.String __ProductAcctIDConcatc;
        [JsonProperty(PropertyName = "Product_Acct_ID_Concat__c")]
        [EntityField(true)]
        public System.String ProductAcctIDConcatc
        {
            get { return __ProductAcctIDConcatc; }
            set { SetField(ref __ProductAcctIDConcatc, value, "Product_Acct_ID_Concat__c"); }
        }
        private System.String __SepCFYAmtc;
        [JsonProperty(PropertyName = "Sep_CFY_Amt__c")]
        [EntityField(true)]
        public System.String SepCFYAmtc
        {
            get { return __SepCFYAmtc; }
            set { SetField(ref __SepCFYAmtc, value, "Sep_CFY_Amt__c"); }
        }
        private System.Double? __SepCFYQtyc;
        [JsonProperty(PropertyName = "Sep_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? SepCFYQtyc
        {
            get { return __SepCFYQtyc; }
            set { SetField(ref __SepCFYQtyc, value, "Sep_CFY_Qty__c"); }
        }
        private System.String __SepPFYAmtc;
        [JsonProperty(PropertyName = "Sep_PFY_Amt__c")]
        [EntityField(true)]
        public System.String SepPFYAmtc
        {
            get { return __SepPFYAmtc; }
            set { SetField(ref __SepPFYAmtc, value, "Sep_PFY_Amt__c"); }
        }
        private System.Double? __SepPFYQtyc;
        [JsonProperty(PropertyName = "Sep_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? SepPFYQtyc
        {
            get { return __SepPFYQtyc; }
            set { SetField(ref __SepPFYQtyc, value, "Sep_PFY_Qty__c"); }
        }
        private System.String __SepYBLAmtc;
        [JsonProperty(PropertyName = "Sep_YBL_Amt__c")]
        [EntityField(true)]
        public System.String SepYBLAmtc
        {
            get { return __SepYBLAmtc; }
            set { SetField(ref __SepYBLAmtc, value, "Sep_YBL_Amt__c"); }
        }
        private System.Double? __SepYBLQtyc;
        [JsonProperty(PropertyName = "Sep_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? SepYBLQtyc
        {
            get { return __SepYBLQtyc; }
            set { SetField(ref __SepYBLQtyc, value, "Sep_YBL_Qty__c"); }
        }
        private System.String __fTotCFYAmtc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Amt__c")]
        [EntityField(true)]
        public System.String fTotCFYAmtc
        {
            get { return __fTotCFYAmtc; }
        }
        private System.String __fTotCFYQ1Amtc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q1_Amt__c")]
        [EntityField(true)]
        public System.String fTotCFYQ1Amtc
        {
            get { return __fTotCFYQ1Amtc; }
        }
        private System.Double? __fTotCFYQ1Qtyc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q1_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotCFYQ1Qtyc
        {
            get { return __fTotCFYQ1Qtyc; }
        }
        private System.String __fTotCFYQ2Amtc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q2_Amt__c")]
        [EntityField(true)]
        public System.String fTotCFYQ2Amtc
        {
            get { return __fTotCFYQ2Amtc; }
        }
        private System.Double? __fTotCFYQ2Qtyc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q2_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotCFYQ2Qtyc
        {
            get { return __fTotCFYQ2Qtyc; }
        }
        private System.String __fTotCFYQ3Amtc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q3_Amt__c")]
        [EntityField(true)]
        public System.String fTotCFYQ3Amtc
        {
            get { return __fTotCFYQ3Amtc; }
        }
        private System.Double? __fTotCFYQ3Qtyc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q3_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotCFYQ3Qtyc
        {
            get { return __fTotCFYQ3Qtyc; }
        }
        private System.String __fTotCFYQ4Amtc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q4_Amt__c")]
        [EntityField(true)]
        public System.String fTotCFYQ4Amtc
        {
            get { return __fTotCFYQ4Amtc; }
        }
        private System.Double? __fTotCFYQ4Qtyc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Q4_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotCFYQ4Qtyc
        {
            get { return __fTotCFYQ4Qtyc; }
        }
        private System.Double? __fTotCFYQtyc;
        [JsonProperty(PropertyName = "f_Tot_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotCFYQtyc
        {
            get { return __fTotCFYQtyc; }
        }
        private System.String __fTotPFYAmtc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Amt__c")]
        [EntityField(true)]
        public System.String fTotPFYAmtc
        {
            get { return __fTotPFYAmtc; }
        }
        private System.String __fTotPFYQ1Amtc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q1_Amt__c")]
        [EntityField(true)]
        public System.String fTotPFYQ1Amtc
        {
            get { return __fTotPFYQ1Amtc; }
        }
        private System.Double? __fTotPFYQ1Qtyc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q1_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotPFYQ1Qtyc
        {
            get { return __fTotPFYQ1Qtyc; }
        }
        private System.String __fTotPFYQ2Amtc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q2_Amt__c")]
        [EntityField(true)]
        public System.String fTotPFYQ2Amtc
        {
            get { return __fTotPFYQ2Amtc; }
        }
        private System.Double? __fTotPFYQ2Qtyc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q2_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotPFYQ2Qtyc
        {
            get { return __fTotPFYQ2Qtyc; }
        }
        private System.String __fTotPFYQ3Amtc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q3_Amt__c")]
        [EntityField(true)]
        public System.String fTotPFYQ3Amtc
        {
            get { return __fTotPFYQ3Amtc; }
        }
        private System.Double? __fTotPFYQ3Qtyc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q3_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotPFYQ3Qtyc
        {
            get { return __fTotPFYQ3Qtyc; }
        }
        private System.String __fTotPFYQ4Amtc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q4_Amt__c")]
        [EntityField(true)]
        public System.String fTotPFYQ4Amtc
        {
            get { return __fTotPFYQ4Amtc; }
        }
        private System.Double? __fTotPFYQ4Qtyc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Q4_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotPFYQ4Qtyc
        {
            get { return __fTotPFYQ4Qtyc; }
        }
        private System.Double? __fTotPFYQtyc;
        [JsonProperty(PropertyName = "f_Tot_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotPFYQtyc
        {
            get { return __fTotPFYQtyc; }
        }
        private System.String __fTotYBLAmtc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Amt__c")]
        [EntityField(true)]
        public System.String fTotYBLAmtc
        {
            get { return __fTotYBLAmtc; }
        }
        private System.String __fTotYBLQ1Amtc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q1_Amt__c")]
        [EntityField(true)]
        public System.String fTotYBLQ1Amtc
        {
            get { return __fTotYBLQ1Amtc; }
        }
        private System.Double? __fTotYBLQ1Qtyc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q1_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotYBLQ1Qtyc
        {
            get { return __fTotYBLQ1Qtyc; }
        }
        private System.String __fTotYBLQ2Amtc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q2_Amt__c")]
        [EntityField(true)]
        public System.String fTotYBLQ2Amtc
        {
            get { return __fTotYBLQ2Amtc; }
        }
        private System.Double? __fTotYBLQ2Qtyc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q2_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotYBLQ2Qtyc
        {
            get { return __fTotYBLQ2Qtyc; }
        }
        private System.String __fTotYBLQ3Amtc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q3_Amt__c")]
        [EntityField(true)]
        public System.String fTotYBLQ3Amtc
        {
            get { return __fTotYBLQ3Amtc; }
        }
        private System.Double? __fTotYBLQ3Qtyc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q3_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotYBLQ3Qtyc
        {
            get { return __fTotYBLQ3Qtyc; }
        }
        private System.String __fTotYBLQ4Amtc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q4_Amt__c")]
        [EntityField(true)]
        public System.String fTotYBLQ4Amtc
        {
            get { return __fTotYBLQ4Amtc; }
        }
        private System.Double? __fTotYBLQ4Qtyc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Q4_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotYBLQ4Qtyc
        {
            get { return __fTotYBLQ4Qtyc; }
        }
        private System.Double? __fTotYBLQtyc;
        [JsonProperty(PropertyName = "f_Tot_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? fTotYBLQtyc
        {
            get { return __fTotYBLQtyc; }
        }
        private System.String __AprCFYCostc;
        [JsonProperty(PropertyName = "Apr_CFY_Cost__c")]
        [EntityField(true)]
        public System.String AprCFYCostc
        {
            get { return __AprCFYCostc; }
            set { SetField(ref __AprCFYCostc, value, "Apr_CFY_Cost__c"); }
        }
        private System.String __AprCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Apr_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String AprCFYPctPlanCostc
        {
            get { return __AprCFYPctPlanCostc; }
            set { SetField(ref __AprCFYPctPlanCostc, value, "Apr_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __AprCFYPlanAmtc;
        [JsonProperty(PropertyName = "Apr_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String AprCFYPlanAmtc
        {
            get { return __AprCFYPlanAmtc; }
            set { SetField(ref __AprCFYPlanAmtc, value, "Apr_CFY_Plan_Amt__c"); }
        }
        private System.String __AprCFYPlanCostc;
        [JsonProperty(PropertyName = "Apr_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String AprCFYPlanCostc
        {
            get { return __AprCFYPlanCostc; }
            set { SetField(ref __AprCFYPlanCostc, value, "Apr_CFY_Plan_Cost__c"); }
        }
        private System.Double? __AprCFYPlanQtyc;
        [JsonProperty(PropertyName = "Apr_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? AprCFYPlanQtyc
        {
            get { return __AprCFYPlanQtyc; }
            set { SetField(ref __AprCFYPlanQtyc, value, "Apr_CFY_Plan_Qty__c"); }
        }
        private System.String __AprCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Apr_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String AprCFYpctPlanAmtc
        {
            get { return __AprCFYpctPlanAmtc; }
            set { SetField(ref __AprCFYpctPlanAmtc, value, "Apr_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __AprCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Apr_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String AprCFYpctPlanQtyc
        {
            get { return __AprCFYpctPlanQtyc; }
            set { SetField(ref __AprCFYpctPlanQtyc, value, "Apr_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __AprPFYCostc;
        [JsonProperty(PropertyName = "Apr_PFY_Cost__c")]
        [EntityField(true)]
        public System.String AprPFYCostc
        {
            get { return __AprPFYCostc; }
            set { SetField(ref __AprPFYCostc, value, "Apr_PFY_Cost__c"); }
        }
        private System.String __AprYBLCostc;
        [JsonProperty(PropertyName = "Apr_YBL_Cost__c")]
        [EntityField(true)]
        public System.String AprYBLCostc
        {
            get { return __AprYBLCostc; }
            set { SetField(ref __AprYBLCostc, value, "Apr_YBL_Cost__c"); }
        }
        private System.String __AugCFYCostc;
        [JsonProperty(PropertyName = "Aug_CFY_Cost__c")]
        [EntityField(true)]
        public System.String AugCFYCostc
        {
            get { return __AugCFYCostc; }
            set { SetField(ref __AugCFYCostc, value, "Aug_CFY_Cost__c"); }
        }
        private System.String __AugCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Aug_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String AugCFYPctPlanCostc
        {
            get { return __AugCFYPctPlanCostc; }
            set { SetField(ref __AugCFYPctPlanCostc, value, "Aug_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __AugCFYPlanAmtc;
        [JsonProperty(PropertyName = "Aug_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String AugCFYPlanAmtc
        {
            get { return __AugCFYPlanAmtc; }
            set { SetField(ref __AugCFYPlanAmtc, value, "Aug_CFY_Plan_Amt__c"); }
        }
        private System.String __AugCFYPlanCostc;
        [JsonProperty(PropertyName = "Aug_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String AugCFYPlanCostc
        {
            get { return __AugCFYPlanCostc; }
            set { SetField(ref __AugCFYPlanCostc, value, "Aug_CFY_Plan_Cost__c"); }
        }
        private System.Double? __AugCFYPlanQtyc;
        [JsonProperty(PropertyName = "Aug_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? AugCFYPlanQtyc
        {
            get { return __AugCFYPlanQtyc; }
            set { SetField(ref __AugCFYPlanQtyc, value, "Aug_CFY_Plan_Qty__c"); }
        }
        private System.String __AugCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Aug_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String AugCFYpctPlanAmtc
        {
            get { return __AugCFYpctPlanAmtc; }
            set { SetField(ref __AugCFYpctPlanAmtc, value, "Aug_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __AugCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Aug_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String AugCFYpctPlanQtyc
        {
            get { return __AugCFYpctPlanQtyc; }
            set { SetField(ref __AugCFYpctPlanQtyc, value, "Aug_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __AugPFYCostc;
        [JsonProperty(PropertyName = "Aug_PFY_Cost__c")]
        [EntityField(true)]
        public System.String AugPFYCostc
        {
            get { return __AugPFYCostc; }
            set { SetField(ref __AugPFYCostc, value, "Aug_PFY_Cost__c"); }
        }
        private System.String __AugYBLCostc;
        [JsonProperty(PropertyName = "Aug_YBL_Cost__c")]
        [EntityField(true)]
        public System.String AugYBLCostc
        {
            get { return __AugYBLCostc; }
            set { SetField(ref __AugYBLCostc, value, "Aug_YBL_Cost__c"); }
        }
        private System.String __DecCFYCostc;
        [JsonProperty(PropertyName = "Dec_CFY_Cost__c")]
        [EntityField(true)]
        public System.String DecCFYCostc
        {
            get { return __DecCFYCostc; }
            set { SetField(ref __DecCFYCostc, value, "Dec_CFY_Cost__c"); }
        }
        private System.String __DecCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Dec_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String DecCFYPctPlanCostc
        {
            get { return __DecCFYPctPlanCostc; }
            set { SetField(ref __DecCFYPctPlanCostc, value, "Dec_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __DecCFYPlanAmtc;
        [JsonProperty(PropertyName = "Dec_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String DecCFYPlanAmtc
        {
            get { return __DecCFYPlanAmtc; }
            set { SetField(ref __DecCFYPlanAmtc, value, "Dec_CFY_Plan_Amt__c"); }
        }
        private System.String __DecCFYPlanCostc;
        [JsonProperty(PropertyName = "Dec_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String DecCFYPlanCostc
        {
            get { return __DecCFYPlanCostc; }
            set { SetField(ref __DecCFYPlanCostc, value, "Dec_CFY_Plan_Cost__c"); }
        }
        private System.Double? __DecCFYPlanQtyc;
        [JsonProperty(PropertyName = "Dec_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? DecCFYPlanQtyc
        {
            get { return __DecCFYPlanQtyc; }
            set { SetField(ref __DecCFYPlanQtyc, value, "Dec_CFY_Plan_Qty__c"); }
        }
        private System.String __DecCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Dec_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String DecCFYpctPlanAmtc
        {
            get { return __DecCFYpctPlanAmtc; }
            set { SetField(ref __DecCFYpctPlanAmtc, value, "Dec_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __DecCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Dec_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String DecCFYpctPlanQtyc
        {
            get { return __DecCFYpctPlanQtyc; }
            set { SetField(ref __DecCFYpctPlanQtyc, value, "Dec_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __DecPFYCostc;
        [JsonProperty(PropertyName = "Dec_PFY_Cost__c")]
        [EntityField(true)]
        public System.String DecPFYCostc
        {
            get { return __DecPFYCostc; }
            set { SetField(ref __DecPFYCostc, value, "Dec_PFY_Cost__c"); }
        }
        private System.String __DecYBLCostc;
        [JsonProperty(PropertyName = "Dec_YBL_Cost__c")]
        [EntityField(true)]
        public System.String DecYBLCostc
        {
            get { return __DecYBLCostc; }
            set { SetField(ref __DecYBLCostc, value, "Dec_YBL_Cost__c"); }
        }
        private System.String __FebCFYCostc;
        [JsonProperty(PropertyName = "Feb_CFY_Cost__c")]
        [EntityField(true)]
        public System.String FebCFYCostc
        {
            get { return __FebCFYCostc; }
            set { SetField(ref __FebCFYCostc, value, "Feb_CFY_Cost__c"); }
        }
        private System.String __FebCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Feb_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String FebCFYPctPlanCostc
        {
            get { return __FebCFYPctPlanCostc; }
            set { SetField(ref __FebCFYPctPlanCostc, value, "Feb_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __FebCFYPlanAmtc;
        [JsonProperty(PropertyName = "Feb_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String FebCFYPlanAmtc
        {
            get { return __FebCFYPlanAmtc; }
            set { SetField(ref __FebCFYPlanAmtc, value, "Feb_CFY_Plan_Amt__c"); }
        }
        private System.String __FebCFYPlanCostc;
        [JsonProperty(PropertyName = "Feb_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String FebCFYPlanCostc
        {
            get { return __FebCFYPlanCostc; }
            set { SetField(ref __FebCFYPlanCostc, value, "Feb_CFY_Plan_Cost__c"); }
        }
        private System.Double? __FebCFYPlanQtyc;
        [JsonProperty(PropertyName = "Feb_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? FebCFYPlanQtyc
        {
            get { return __FebCFYPlanQtyc; }
            set { SetField(ref __FebCFYPlanQtyc, value, "Feb_CFY_Plan_Qty__c"); }
        }
        private System.String __FebCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Feb_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String FebCFYpctPlanAmtc
        {
            get { return __FebCFYpctPlanAmtc; }
            set { SetField(ref __FebCFYpctPlanAmtc, value, "Feb_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __FebCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Feb_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String FebCFYpctPlanQtyc
        {
            get { return __FebCFYpctPlanQtyc; }
            set { SetField(ref __FebCFYpctPlanQtyc, value, "Feb_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __FebPFYCostc;
        [JsonProperty(PropertyName = "Feb_PFY_Cost__c")]
        [EntityField(true)]
        public System.String FebPFYCostc
        {
            get { return __FebPFYCostc; }
            set { SetField(ref __FebPFYCostc, value, "Feb_PFY_Cost__c"); }
        }
        private System.String __FebYBLCostc;
        [JsonProperty(PropertyName = "Feb_YBL_Cost__c")]
        [EntityField(true)]
        public System.String FebYBLCostc
        {
            get { return __FebYBLCostc; }
            set { SetField(ref __FebYBLCostc, value, "Feb_YBL_Cost__c"); }
        }
        private System.String __JanCFYCostc;
        [JsonProperty(PropertyName = "Jan_CFY_Cost__c")]
        [EntityField(true)]
        public System.String JanCFYCostc
        {
            get { return __JanCFYCostc; }
            set { SetField(ref __JanCFYCostc, value, "Jan_CFY_Cost__c"); }
        }
        private System.String __JanCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Jan_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String JanCFYPctPlanCostc
        {
            get { return __JanCFYPctPlanCostc; }
            set { SetField(ref __JanCFYPctPlanCostc, value, "Jan_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __JanCFYPlanAmtc;
        [JsonProperty(PropertyName = "Jan_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JanCFYPlanAmtc
        {
            get { return __JanCFYPlanAmtc; }
            set { SetField(ref __JanCFYPlanAmtc, value, "Jan_CFY_Plan_Amt__c"); }
        }
        private System.String __JanCFYPlanCostc;
        [JsonProperty(PropertyName = "Jan_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String JanCFYPlanCostc
        {
            get { return __JanCFYPlanCostc; }
            set { SetField(ref __JanCFYPlanCostc, value, "Jan_CFY_Plan_Cost__c"); }
        }
        private System.Double? __JanCFYPlanQtyc;
        [JsonProperty(PropertyName = "Jan_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? JanCFYPlanQtyc
        {
            get { return __JanCFYPlanQtyc; }
            set { SetField(ref __JanCFYPlanQtyc, value, "Jan_CFY_Plan_Qty__c"); }
        }
        private System.String __JanCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Jan_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JanCFYpctPlanAmtc
        {
            get { return __JanCFYpctPlanAmtc; }
            set { SetField(ref __JanCFYpctPlanAmtc, value, "Jan_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __JanCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Jan_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String JanCFYpctPlanQtyc
        {
            get { return __JanCFYpctPlanQtyc; }
            set { SetField(ref __JanCFYpctPlanQtyc, value, "Jan_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __JanPFYCostc;
        [JsonProperty(PropertyName = "Jan_PFY_Cost__c")]
        [EntityField(true)]
        public System.String JanPFYCostc
        {
            get { return __JanPFYCostc; }
            set { SetField(ref __JanPFYCostc, value, "Jan_PFY_Cost__c"); }
        }
        private System.String __JanYBLCostc;
        [JsonProperty(PropertyName = "Jan_YBL_Cost__c")]
        [EntityField(true)]
        public System.String JanYBLCostc
        {
            get { return __JanYBLCostc; }
            set { SetField(ref __JanYBLCostc, value, "Jan_YBL_Cost__c"); }
        }
        private System.String __JulCFYCostc;
        [JsonProperty(PropertyName = "Jul_CFY_Cost__c")]
        [EntityField(true)]
        public System.String JulCFYCostc
        {
            get { return __JulCFYCostc; }
            set { SetField(ref __JulCFYCostc, value, "Jul_CFY_Cost__c"); }
        }
        private System.String __JulCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Jul_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String JulCFYPctPlanCostc
        {
            get { return __JulCFYPctPlanCostc; }
            set { SetField(ref __JulCFYPctPlanCostc, value, "Jul_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __JulCFYPlanAmtc;
        [JsonProperty(PropertyName = "Jul_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JulCFYPlanAmtc
        {
            get { return __JulCFYPlanAmtc; }
            set { SetField(ref __JulCFYPlanAmtc, value, "Jul_CFY_Plan_Amt__c"); }
        }
        private System.String __JulCFYPlanCostc;
        [JsonProperty(PropertyName = "Jul_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String JulCFYPlanCostc
        {
            get { return __JulCFYPlanCostc; }
            set { SetField(ref __JulCFYPlanCostc, value, "Jul_CFY_Plan_Cost__c"); }
        }
        private System.Double? __JulCFYPlanQtyc;
        [JsonProperty(PropertyName = "Jul_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? JulCFYPlanQtyc
        {
            get { return __JulCFYPlanQtyc; }
            set { SetField(ref __JulCFYPlanQtyc, value, "Jul_CFY_Plan_Qty__c"); }
        }
        private System.String __JulCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Jul_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JulCFYpctPlanAmtc
        {
            get { return __JulCFYpctPlanAmtc; }
            set { SetField(ref __JulCFYpctPlanAmtc, value, "Jul_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __JulCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Jul_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String JulCFYpctPlanQtyc
        {
            get { return __JulCFYpctPlanQtyc; }
            set { SetField(ref __JulCFYpctPlanQtyc, value, "Jul_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __JulPFYCostc;
        [JsonProperty(PropertyName = "Jul_PFY_Cost__c")]
        [EntityField(true)]
        public System.String JulPFYCostc
        {
            get { return __JulPFYCostc; }
            set { SetField(ref __JulPFYCostc, value, "Jul_PFY_Cost__c"); }
        }
        private System.String __JulYBLCostc;
        [JsonProperty(PropertyName = "Jul_YBL_Cost__c")]
        [EntityField(true)]
        public System.String JulYBLCostc
        {
            get { return __JulYBLCostc; }
            set { SetField(ref __JulYBLCostc, value, "Jul_YBL_Cost__c"); }
        }
        private System.String __JunCFYCostc;
        [JsonProperty(PropertyName = "Jun_CFY_Cost__c")]
        [EntityField(true)]
        public System.String JunCFYCostc
        {
            get { return __JunCFYCostc; }
            set { SetField(ref __JunCFYCostc, value, "Jun_CFY_Cost__c"); }
        }
        private System.String __JunCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Jun_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String JunCFYPctPlanCostc
        {
            get { return __JunCFYPctPlanCostc; }
            set { SetField(ref __JunCFYPctPlanCostc, value, "Jun_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __JunCFYPlanAmtc;
        [JsonProperty(PropertyName = "Jun_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JunCFYPlanAmtc
        {
            get { return __JunCFYPlanAmtc; }
            set { SetField(ref __JunCFYPlanAmtc, value, "Jun_CFY_Plan_Amt__c"); }
        }
        private System.String __JunCFYPlanCostc;
        [JsonProperty(PropertyName = "Jun_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String JunCFYPlanCostc
        {
            get { return __JunCFYPlanCostc; }
            set { SetField(ref __JunCFYPlanCostc, value, "Jun_CFY_Plan_Cost__c"); }
        }
        private System.Double? __JunCFYPlanQtyc;
        [JsonProperty(PropertyName = "Jun_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? JunCFYPlanQtyc
        {
            get { return __JunCFYPlanQtyc; }
            set { SetField(ref __JunCFYPlanQtyc, value, "Jun_CFY_Plan_Qty__c"); }
        }
        private System.String __JunCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Jun_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String JunCFYpctPlanAmtc
        {
            get { return __JunCFYpctPlanAmtc; }
            set { SetField(ref __JunCFYpctPlanAmtc, value, "Jun_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __JunCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Jun_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String JunCFYpctPlanQtyc
        {
            get { return __JunCFYpctPlanQtyc; }
            set { SetField(ref __JunCFYpctPlanQtyc, value, "Jun_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __JunPFYCostc;
        [JsonProperty(PropertyName = "Jun_PFY_Cost__c")]
        [EntityField(true)]
        public System.String JunPFYCostc
        {
            get { return __JunPFYCostc; }
            set { SetField(ref __JunPFYCostc, value, "Jun_PFY_Cost__c"); }
        }
        private System.String __JunYBLCostc;
        [JsonProperty(PropertyName = "Jun_YBL_Cost__c")]
        [EntityField(true)]
        public System.String JunYBLCostc
        {
            get { return __JunYBLCostc; }
            set { SetField(ref __JunYBLCostc, value, "Jun_YBL_Cost__c"); }
        }
        private System.String __MarCFYCostc;
        [JsonProperty(PropertyName = "Mar_CFY_Cost__c")]
        [EntityField(true)]
        public System.String MarCFYCostc
        {
            get { return __MarCFYCostc; }
            set { SetField(ref __MarCFYCostc, value, "Mar_CFY_Cost__c"); }
        }
        private System.String __MarCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Mar_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String MarCFYPctPlanCostc
        {
            get { return __MarCFYPctPlanCostc; }
            set { SetField(ref __MarCFYPctPlanCostc, value, "Mar_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __MarCFYPlanAmtc;
        [JsonProperty(PropertyName = "Mar_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String MarCFYPlanAmtc
        {
            get { return __MarCFYPlanAmtc; }
            set { SetField(ref __MarCFYPlanAmtc, value, "Mar_CFY_Plan_Amt__c"); }
        }
        private System.String __MarCFYPlanCostc;
        [JsonProperty(PropertyName = "Mar_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String MarCFYPlanCostc
        {
            get { return __MarCFYPlanCostc; }
            set { SetField(ref __MarCFYPlanCostc, value, "Mar_CFY_Plan_Cost__c"); }
        }
        private System.Double? __MarCFYPlanQtyc;
        [JsonProperty(PropertyName = "Mar_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? MarCFYPlanQtyc
        {
            get { return __MarCFYPlanQtyc; }
            set { SetField(ref __MarCFYPlanQtyc, value, "Mar_CFY_Plan_Qty__c"); }
        }
        private System.String __MarCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Mar_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String MarCFYpctPlanAmtc
        {
            get { return __MarCFYpctPlanAmtc; }
            set { SetField(ref __MarCFYpctPlanAmtc, value, "Mar_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __MarCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Mar_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String MarCFYpctPlanQtyc
        {
            get { return __MarCFYpctPlanQtyc; }
            set { SetField(ref __MarCFYpctPlanQtyc, value, "Mar_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __MarPFYCostc;
        [JsonProperty(PropertyName = "Mar_PFY_Cost__c")]
        [EntityField(true)]
        public System.String MarPFYCostc
        {
            get { return __MarPFYCostc; }
            set { SetField(ref __MarPFYCostc, value, "Mar_PFY_Cost__c"); }
        }
        private System.String __MarYBLCostc;
        [JsonProperty(PropertyName = "Mar_YBL_Cost__c")]
        [EntityField(true)]
        public System.String MarYBLCostc
        {
            get { return __MarYBLCostc; }
            set { SetField(ref __MarYBLCostc, value, "Mar_YBL_Cost__c"); }
        }
        private System.String __MayCFYCostc;
        [JsonProperty(PropertyName = "May_CFY_Cost__c")]
        [EntityField(true)]
        public System.String MayCFYCostc
        {
            get { return __MayCFYCostc; }
            set { SetField(ref __MayCFYCostc, value, "May_CFY_Cost__c"); }
        }
        private System.String __MayCFYPctPlanCostc;
        [JsonProperty(PropertyName = "May_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String MayCFYPctPlanCostc
        {
            get { return __MayCFYPctPlanCostc; }
            set { SetField(ref __MayCFYPctPlanCostc, value, "May_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __MayCFYPlanAmtc;
        [JsonProperty(PropertyName = "May_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String MayCFYPlanAmtc
        {
            get { return __MayCFYPlanAmtc; }
            set { SetField(ref __MayCFYPlanAmtc, value, "May_CFY_Plan_Amt__c"); }
        }
        private System.String __MayCFYPlanCostc;
        [JsonProperty(PropertyName = "May_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String MayCFYPlanCostc
        {
            get { return __MayCFYPlanCostc; }
            set { SetField(ref __MayCFYPlanCostc, value, "May_CFY_Plan_Cost__c"); }
        }
        private System.Double? __MayCFYPlanQtyc;
        [JsonProperty(PropertyName = "May_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? MayCFYPlanQtyc
        {
            get { return __MayCFYPlanQtyc; }
            set { SetField(ref __MayCFYPlanQtyc, value, "May_CFY_Plan_Qty__c"); }
        }
        private System.String __MayCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "May_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String MayCFYpctPlanAmtc
        {
            get { return __MayCFYpctPlanAmtc; }
            set { SetField(ref __MayCFYpctPlanAmtc, value, "May_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __MayCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "May_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String MayCFYpctPlanQtyc
        {
            get { return __MayCFYpctPlanQtyc; }
            set { SetField(ref __MayCFYpctPlanQtyc, value, "May_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __MayPFYCostc;
        [JsonProperty(PropertyName = "May_PFY_Cost__c")]
        [EntityField(true)]
        public System.String MayPFYCostc
        {
            get { return __MayPFYCostc; }
            set { SetField(ref __MayPFYCostc, value, "May_PFY_Cost__c"); }
        }
        private System.String __MayYBLCostc;
        [JsonProperty(PropertyName = "May_YBL_Cost__c")]
        [EntityField(true)]
        public System.String MayYBLCostc
        {
            get { return __MayYBLCostc; }
            set { SetField(ref __MayYBLCostc, value, "May_YBL_Cost__c"); }
        }
        private System.String __NovCFYCostc;
        [JsonProperty(PropertyName = "Nov_CFY_Cost__c")]
        [EntityField(true)]
        public System.String NovCFYCostc
        {
            get { return __NovCFYCostc; }
            set { SetField(ref __NovCFYCostc, value, "Nov_CFY_Cost__c"); }
        }
        private System.String __NovCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Nov_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String NovCFYPctPlanCostc
        {
            get { return __NovCFYPctPlanCostc; }
            set { SetField(ref __NovCFYPctPlanCostc, value, "Nov_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __NovCFYPlanAmtc;
        [JsonProperty(PropertyName = "Nov_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String NovCFYPlanAmtc
        {
            get { return __NovCFYPlanAmtc; }
            set { SetField(ref __NovCFYPlanAmtc, value, "Nov_CFY_Plan_Amt__c"); }
        }
        private System.String __NovCFYPlanCostc;
        [JsonProperty(PropertyName = "Nov_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String NovCFYPlanCostc
        {
            get { return __NovCFYPlanCostc; }
            set { SetField(ref __NovCFYPlanCostc, value, "Nov_CFY_Plan_Cost__c"); }
        }
        private System.Double? __NovCFYPlanQtyc;
        [JsonProperty(PropertyName = "Nov_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? NovCFYPlanQtyc
        {
            get { return __NovCFYPlanQtyc; }
            set { SetField(ref __NovCFYPlanQtyc, value, "Nov_CFY_Plan_Qty__c"); }
        }
        private System.String __NovCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Nov_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String NovCFYpctPlanAmtc
        {
            get { return __NovCFYpctPlanAmtc; }
            set { SetField(ref __NovCFYpctPlanAmtc, value, "Nov_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __NovCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Nov_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String NovCFYpctPlanQtyc
        {
            get { return __NovCFYpctPlanQtyc; }
            set { SetField(ref __NovCFYpctPlanQtyc, value, "Nov_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __NovPFYCostc;
        [JsonProperty(PropertyName = "Nov_PFY_Cost__c")]
        [EntityField(true)]
        public System.String NovPFYCostc
        {
            get { return __NovPFYCostc; }
            set { SetField(ref __NovPFYCostc, value, "Nov_PFY_Cost__c"); }
        }
        private System.String __NovYBLCostc;
        [JsonProperty(PropertyName = "Nov_YBL_Cost__c")]
        [EntityField(true)]
        public System.String NovYBLCostc
        {
            get { return __NovYBLCostc; }
            set { SetField(ref __NovYBLCostc, value, "Nov_YBL_Cost__c"); }
        }
        private System.String __OctCFYCostc;
        [JsonProperty(PropertyName = "Oct_CFY_Cost__c")]
        [EntityField(true)]
        public System.String OctCFYCostc
        {
            get { return __OctCFYCostc; }
            set { SetField(ref __OctCFYCostc, value, "Oct_CFY_Cost__c"); }
        }
        private System.String __OctCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Oct_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String OctCFYPctPlanCostc
        {
            get { return __OctCFYPctPlanCostc; }
            set { SetField(ref __OctCFYPctPlanCostc, value, "Oct_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __OctCFYPlanAmtc;
        [JsonProperty(PropertyName = "Oct_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String OctCFYPlanAmtc
        {
            get { return __OctCFYPlanAmtc; }
            set { SetField(ref __OctCFYPlanAmtc, value, "Oct_CFY_Plan_Amt__c"); }
        }
        private System.String __OctCFYPlanCostc;
        [JsonProperty(PropertyName = "Oct_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String OctCFYPlanCostc
        {
            get { return __OctCFYPlanCostc; }
            set { SetField(ref __OctCFYPlanCostc, value, "Oct_CFY_Plan_Cost__c"); }
        }
        private System.Double? __OctCFYPlanQtyc;
        [JsonProperty(PropertyName = "Oct_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? OctCFYPlanQtyc
        {
            get { return __OctCFYPlanQtyc; }
            set { SetField(ref __OctCFYPlanQtyc, value, "Oct_CFY_Plan_Qty__c"); }
        }
        private System.String __OctCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Oct_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String OctCFYpctPlanAmtc
        {
            get { return __OctCFYpctPlanAmtc; }
            set { SetField(ref __OctCFYpctPlanAmtc, value, "Oct_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __OctCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Oct_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String OctCFYpctPlanQtyc
        {
            get { return __OctCFYpctPlanQtyc; }
            set { SetField(ref __OctCFYpctPlanQtyc, value, "Oct_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __OctPFYCostc;
        [JsonProperty(PropertyName = "Oct_PFY_Cost__c")]
        [EntityField(true)]
        public System.String OctPFYCostc
        {
            get { return __OctPFYCostc; }
            set { SetField(ref __OctPFYCostc, value, "Oct_PFY_Cost__c"); }
        }
        private System.String __OctYBLCostc;
        [JsonProperty(PropertyName = "Oct_YBL_Cost__c")]
        [EntityField(true)]
        public System.String OctYBLCostc
        {
            get { return __OctYBLCostc; }
            set { SetField(ref __OctYBLCostc, value, "Oct_YBL_Cost__c"); }
        }
        private System.String __SepCFYCostc;
        [JsonProperty(PropertyName = "Sep_CFY_Cost__c")]
        [EntityField(true)]
        public System.String SepCFYCostc
        {
            get { return __SepCFYCostc; }
            set { SetField(ref __SepCFYCostc, value, "Sep_CFY_Cost__c"); }
        }
        private System.String __SepCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Sep_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String SepCFYPctPlanCostc
        {
            get { return __SepCFYPctPlanCostc; }
            set { SetField(ref __SepCFYPctPlanCostc, value, "Sep_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __SepCFYPlanAmtc;
        [JsonProperty(PropertyName = "Sep_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String SepCFYPlanAmtc
        {
            get { return __SepCFYPlanAmtc; }
            set { SetField(ref __SepCFYPlanAmtc, value, "Sep_CFY_Plan_Amt__c"); }
        }
        private System.String __SepCFYPlanCostc;
        [JsonProperty(PropertyName = "Sep_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String SepCFYPlanCostc
        {
            get { return __SepCFYPlanCostc; }
            set { SetField(ref __SepCFYPlanCostc, value, "Sep_CFY_Plan_Cost__c"); }
        }
        private System.Double? __SepCFYPlanQtyc;
        [JsonProperty(PropertyName = "Sep_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? SepCFYPlanQtyc
        {
            get { return __SepCFYPlanQtyc; }
            set { SetField(ref __SepCFYPlanQtyc, value, "Sep_CFY_Plan_Qty__c"); }
        }
        private System.String __SepCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Sep_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String SepCFYpctPlanAmtc
        {
            get { return __SepCFYpctPlanAmtc; }
            set { SetField(ref __SepCFYpctPlanAmtc, value, "Sep_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __SepCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Sep_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String SepCFYpctPlanQtyc
        {
            get { return __SepCFYpctPlanQtyc; }
            set { SetField(ref __SepCFYpctPlanQtyc, value, "Sep_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __SepPFYCostc;
        [JsonProperty(PropertyName = "Sep_PFY_Cost__c")]
        [EntityField(true)]
        public System.String SepPFYCostc
        {
            get { return __SepPFYCostc; }
            set { SetField(ref __SepPFYCostc, value, "Sep_PFY_Cost__c"); }
        }
        private System.String __SepYBLCostc;
        [JsonProperty(PropertyName = "Sep_YBL_Cost__c")]
        [EntityField(true)]
        public System.String SepYBLCostc
        {
            get { return __SepYBLCostc; }
            set { SetField(ref __SepYBLCostc, value, "Sep_YBL_Cost__c"); }
        }
        private System.String __TotCFYAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYAmtc
        {
            get { return __TotCFYAmtc; }
            set { SetField(ref __TotCFYAmtc, value, "Tot_CFY_Amt__c"); }
        }
        private System.String __TotCFYCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYCostc
        {
            get { return __TotCFYCostc; }
            set { SetField(ref __TotCFYCostc, value, "Tot_CFY_Cost__c"); }
        }
        private System.String __TotCFYPctPlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYPctPlanCostc
        {
            get { return __TotCFYPctPlanCostc; }
            set { SetField(ref __TotCFYPctPlanCostc, value, "Tot_CFY_Pct_Plan_Cost__c"); }
        }
        private System.String __TotCFYPlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYPlanAmtc
        {
            get { return __TotCFYPlanAmtc; }
            set { SetField(ref __TotCFYPlanAmtc, value, "Tot_CFY_Plan_Amt__c"); }
        }
        private System.String __TotCFYPlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYPlanCostc
        {
            get { return __TotCFYPlanCostc; }
            set { SetField(ref __TotCFYPlanCostc, value, "Tot_CFY_Plan_Cost__c"); }
        }
        private System.Double? __TotCFYPlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYPlanQtyc
        {
            get { return __TotCFYPlanQtyc; }
            set { SetField(ref __TotCFYPlanQtyc, value, "Tot_CFY_Plan_Qty__c"); }
        }
        private System.String __TotCFYQ1Amtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ1Amtc
        {
            get { return __TotCFYQ1Amtc; }
            set { SetField(ref __TotCFYQ1Amtc, value, "Tot_CFY_Q1_Amt__c"); }
        }
        private System.String __TotCFYQ1Costc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ1Costc
        {
            get { return __TotCFYQ1Costc; }
            set { SetField(ref __TotCFYQ1Costc, value, "Tot_CFY_Q1_Cost__c"); }
        }
        private System.String __TotCFYQ1PctPlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ1PctPlanCostc
        {
            get { return __TotCFYQ1PctPlanCostc; }
            set { SetField(ref __TotCFYQ1PctPlanCostc, value, "Tot_CFY_Q1_Pct_Plan_Cost__c"); }
        }
        private System.String __TotCFYQ1PlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ1PlanAmtc
        {
            get { return __TotCFYQ1PlanAmtc; }
            set { SetField(ref __TotCFYQ1PlanAmtc, value, "Tot_CFY_Q1_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ1PlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ1PlanCostc
        {
            get { return __TotCFYQ1PlanCostc; }
            set { SetField(ref __TotCFYQ1PlanCostc, value, "Tot_CFY_Q1_Plan_Cost__c"); }
        }
        private System.Double? __TotCFYQ1PlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ1PlanQtyc
        {
            get { return __TotCFYQ1PlanQtyc; }
            set { SetField(ref __TotCFYQ1PlanQtyc, value, "Tot_CFY_Q1_Plan_Qty__c"); }
        }
        private System.Double? __TotCFYQ1Qtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ1Qtyc
        {
            get { return __TotCFYQ1Qtyc; }
            set { SetField(ref __TotCFYQ1Qtyc, value, "Tot_CFY_Q1_Qty__c"); }
        }
        private System.String __TotCFYQ1pctPlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ1pctPlanAmtc
        {
            get { return __TotCFYQ1pctPlanAmtc; }
            set { SetField(ref __TotCFYQ1pctPlanAmtc, value, "Tot_CFY_Q1_pct_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ1pctPlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q1_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String TotCFYQ1pctPlanQtyc
        {
            get { return __TotCFYQ1pctPlanQtyc; }
            set { SetField(ref __TotCFYQ1pctPlanQtyc, value, "Tot_CFY_Q1_pct_Plan_Qty__c"); }
        }
        private System.String __TotCFYQ2Amtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ2Amtc
        {
            get { return __TotCFYQ2Amtc; }
            set { SetField(ref __TotCFYQ2Amtc, value, "Tot_CFY_Q2_Amt__c"); }
        }
        private System.String __TotCFYQ2Costc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ2Costc
        {
            get { return __TotCFYQ2Costc; }
            set { SetField(ref __TotCFYQ2Costc, value, "Tot_CFY_Q2_Cost__c"); }
        }
        private System.String __TotCFYQ2PctPlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ2PctPlanCostc
        {
            get { return __TotCFYQ2PctPlanCostc; }
            set { SetField(ref __TotCFYQ2PctPlanCostc, value, "Tot_CFY_Q2_Pct_Plan_Cost__c"); }
        }
        private System.String __TotCFYQ2PlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ2PlanAmtc
        {
            get { return __TotCFYQ2PlanAmtc; }
            set { SetField(ref __TotCFYQ2PlanAmtc, value, "Tot_CFY_Q2_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ2PlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ2PlanCostc
        {
            get { return __TotCFYQ2PlanCostc; }
            set { SetField(ref __TotCFYQ2PlanCostc, value, "Tot_CFY_Q2_Plan_Cost__c"); }
        }
        private System.Double? __TotCFYQ2PlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ2PlanQtyc
        {
            get { return __TotCFYQ2PlanQtyc; }
            set { SetField(ref __TotCFYQ2PlanQtyc, value, "Tot_CFY_Q2_Plan_Qty__c"); }
        }
        private System.Double? __TotCFYQ2Qtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ2Qtyc
        {
            get { return __TotCFYQ2Qtyc; }
            set { SetField(ref __TotCFYQ2Qtyc, value, "Tot_CFY_Q2_Qty__c"); }
        }
        private System.String __TotCFYQ2pctPlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ2pctPlanAmtc
        {
            get { return __TotCFYQ2pctPlanAmtc; }
            set { SetField(ref __TotCFYQ2pctPlanAmtc, value, "Tot_CFY_Q2_pct_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ2pctPlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q2_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String TotCFYQ2pctPlanQtyc
        {
            get { return __TotCFYQ2pctPlanQtyc; }
            set { SetField(ref __TotCFYQ2pctPlanQtyc, value, "Tot_CFY_Q2_pct_Plan_Qty__c"); }
        }
        private System.String __TotCFYQ3Amtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ3Amtc
        {
            get { return __TotCFYQ3Amtc; }
            set { SetField(ref __TotCFYQ3Amtc, value, "Tot_CFY_Q3_Amt__c"); }
        }
        private System.String __TotCFYQ3Costc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ3Costc
        {
            get { return __TotCFYQ3Costc; }
            set { SetField(ref __TotCFYQ3Costc, value, "Tot_CFY_Q3_Cost__c"); }
        }
        private System.String __TotCFYQ3PctPlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ3PctPlanCostc
        {
            get { return __TotCFYQ3PctPlanCostc; }
            set { SetField(ref __TotCFYQ3PctPlanCostc, value, "Tot_CFY_Q3_Pct_Plan_Cost__c"); }
        }
        private System.String __TotCFYQ3PlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ3PlanAmtc
        {
            get { return __TotCFYQ3PlanAmtc; }
            set { SetField(ref __TotCFYQ3PlanAmtc, value, "Tot_CFY_Q3_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ3PlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ3PlanCostc
        {
            get { return __TotCFYQ3PlanCostc; }
            set { SetField(ref __TotCFYQ3PlanCostc, value, "Tot_CFY_Q3_Plan_Cost__c"); }
        }
        private System.Double? __TotCFYQ3PlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ3PlanQtyc
        {
            get { return __TotCFYQ3PlanQtyc; }
            set { SetField(ref __TotCFYQ3PlanQtyc, value, "Tot_CFY_Q3_Plan_Qty__c"); }
        }
        private System.Double? __TotCFYQ3Qtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ3Qtyc
        {
            get { return __TotCFYQ3Qtyc; }
            set { SetField(ref __TotCFYQ3Qtyc, value, "Tot_CFY_Q3_Qty__c"); }
        }
        private System.String __TotCFYQ3pctPlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ3pctPlanAmtc
        {
            get { return __TotCFYQ3pctPlanAmtc; }
            set { SetField(ref __TotCFYQ3pctPlanAmtc, value, "Tot_CFY_Q3_pct_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ3pctPlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q3_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String TotCFYQ3pctPlanQtyc
        {
            get { return __TotCFYQ3pctPlanQtyc; }
            set { SetField(ref __TotCFYQ3pctPlanQtyc, value, "Tot_CFY_Q3_pct_Plan_Qty__c"); }
        }
        private System.String __TotCFYQ4Amtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ4Amtc
        {
            get { return __TotCFYQ4Amtc; }
            set { SetField(ref __TotCFYQ4Amtc, value, "Tot_CFY_Q4_Amt__c"); }
        }
        private System.String __TotCFYQ4Costc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ4Costc
        {
            get { return __TotCFYQ4Costc; }
            set { SetField(ref __TotCFYQ4Costc, value, "Tot_CFY_Q4_Cost__c"); }
        }
        private System.String __TotCFYQ4PctPlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Pct_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ4PctPlanCostc
        {
            get { return __TotCFYQ4PctPlanCostc; }
            set { SetField(ref __TotCFYQ4PctPlanCostc, value, "Tot_CFY_Q4_Pct_Plan_Cost__c"); }
        }
        private System.String __TotCFYQ4PlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ4PlanAmtc
        {
            get { return __TotCFYQ4PlanAmtc; }
            set { SetField(ref __TotCFYQ4PlanAmtc, value, "Tot_CFY_Q4_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ4PlanCostc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Plan_Cost__c")]
        [EntityField(true)]
        public System.String TotCFYQ4PlanCostc
        {
            get { return __TotCFYQ4PlanCostc; }
            set { SetField(ref __TotCFYQ4PlanCostc, value, "Tot_CFY_Q4_Plan_Cost__c"); }
        }
        private System.Double? __TotCFYQ4PlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Plan_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ4PlanQtyc
        {
            get { return __TotCFYQ4PlanQtyc; }
            set { SetField(ref __TotCFYQ4PlanQtyc, value, "Tot_CFY_Q4_Plan_Qty__c"); }
        }
        private System.Double? __TotCFYQ4Qtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQ4Qtyc
        {
            get { return __TotCFYQ4Qtyc; }
            set { SetField(ref __TotCFYQ4Qtyc, value, "Tot_CFY_Q4_Qty__c"); }
        }
        private System.String __TotCFYQ4pctPlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYQ4pctPlanAmtc
        {
            get { return __TotCFYQ4pctPlanAmtc; }
            set { SetField(ref __TotCFYQ4pctPlanAmtc, value, "Tot_CFY_Q4_pct_Plan_Amt__c"); }
        }
        private System.String __TotCFYQ4pctPlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Q4_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String TotCFYQ4pctPlanQtyc
        {
            get { return __TotCFYQ4pctPlanQtyc; }
            set { SetField(ref __TotCFYQ4pctPlanQtyc, value, "Tot_CFY_Q4_pct_Plan_Qty__c"); }
        }
        private System.Double? __TotCFYQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_Qty__c")]
        [EntityField(true)]
        public System.Double? TotCFYQtyc
        {
            get { return __TotCFYQtyc; }
            set { SetField(ref __TotCFYQtyc, value, "Tot_CFY_Qty__c"); }
        }
        private System.String __TotCFYpctPlanAmtc;
        [JsonProperty(PropertyName = "Tot_CFY_pct_Plan_Amt__c")]
        [EntityField(true)]
        public System.String TotCFYpctPlanAmtc
        {
            get { return __TotCFYpctPlanAmtc; }
            set { SetField(ref __TotCFYpctPlanAmtc, value, "Tot_CFY_pct_Plan_Amt__c"); }
        }
        private System.String __TotCFYpctPlanQtyc;
        [JsonProperty(PropertyName = "Tot_CFY_pct_Plan_Qty__c")]
        [EntityField(true)]
        public System.String TotCFYpctPlanQtyc
        {
            get { return __TotCFYpctPlanQtyc; }
            set { SetField(ref __TotCFYpctPlanQtyc, value, "Tot_CFY_pct_Plan_Qty__c"); }
        }
        private System.String __TotPFYAmtc;
        [JsonProperty(PropertyName = "Tot_PFY_Amt__c")]
        [EntityField(true)]
        public System.String TotPFYAmtc
        {
            get { return __TotPFYAmtc; }
            set { SetField(ref __TotPFYAmtc, value, "Tot_PFY_Amt__c"); }
        }
        private System.String __TotPFYCostc;
        [JsonProperty(PropertyName = "Tot_PFY_Cost__c")]
        [EntityField(true)]
        public System.String TotPFYCostc
        {
            get { return __TotPFYCostc; }
            set { SetField(ref __TotPFYCostc, value, "Tot_PFY_Cost__c"); }
        }
        private System.String __TotPFYQ1Amtc;
        [JsonProperty(PropertyName = "Tot_PFY_Q1_Amt__c")]
        [EntityField(true)]
        public System.String TotPFYQ1Amtc
        {
            get { return __TotPFYQ1Amtc; }
            set { SetField(ref __TotPFYQ1Amtc, value, "Tot_PFY_Q1_Amt__c"); }
        }
        private System.String __TotPFYQ1Costc;
        [JsonProperty(PropertyName = "Tot_PFY_Q1_Cost__c")]
        [EntityField(true)]
        public System.String TotPFYQ1Costc
        {
            get { return __TotPFYQ1Costc; }
            set { SetField(ref __TotPFYQ1Costc, value, "Tot_PFY_Q1_Cost__c"); }
        }
        private System.Double? __TotPFYQ1Qtyc;
        [JsonProperty(PropertyName = "Tot_PFY_Q1_Qty__c")]
        [EntityField(true)]
        public System.Double? TotPFYQ1Qtyc
        {
            get { return __TotPFYQ1Qtyc; }
            set { SetField(ref __TotPFYQ1Qtyc, value, "Tot_PFY_Q1_Qty__c"); }
        }
        private System.String __TotPFYQ2Amtc;
        [JsonProperty(PropertyName = "Tot_PFY_Q2_Amt__c")]
        [EntityField(true)]
        public System.String TotPFYQ2Amtc
        {
            get { return __TotPFYQ2Amtc; }
            set { SetField(ref __TotPFYQ2Amtc, value, "Tot_PFY_Q2_Amt__c"); }
        }
        private System.String __TotPFYQ2Costc;
        [JsonProperty(PropertyName = "Tot_PFY_Q2_Cost__c")]
        [EntityField(true)]
        public System.String TotPFYQ2Costc
        {
            get { return __TotPFYQ2Costc; }
            set { SetField(ref __TotPFYQ2Costc, value, "Tot_PFY_Q2_Cost__c"); }
        }
        private System.Double? __TotPFYQ2Qtyc;
        [JsonProperty(PropertyName = "Tot_PFY_Q2_Qty__c")]
        [EntityField(true)]
        public System.Double? TotPFYQ2Qtyc
        {
            get { return __TotPFYQ2Qtyc; }
            set { SetField(ref __TotPFYQ2Qtyc, value, "Tot_PFY_Q2_Qty__c"); }
        }
        private System.String __TotPFYQ3Amtc;
        [JsonProperty(PropertyName = "Tot_PFY_Q3_Amt__c")]
        [EntityField(true)]
        public System.String TotPFYQ3Amtc
        {
            get { return __TotPFYQ3Amtc; }
            set { SetField(ref __TotPFYQ3Amtc, value, "Tot_PFY_Q3_Amt__c"); }
        }
        private System.String __TotPFYQ3Costc;
        [JsonProperty(PropertyName = "Tot_PFY_Q3_Cost__c")]
        [EntityField(true)]
        public System.String TotPFYQ3Costc
        {
            get { return __TotPFYQ3Costc; }
            set { SetField(ref __TotPFYQ3Costc, value, "Tot_PFY_Q3_Cost__c"); }
        }
        private System.Double? __TotPFYQ3Qtyc;
        [JsonProperty(PropertyName = "Tot_PFY_Q3_Qty__c")]
        [EntityField(true)]
        public System.Double? TotPFYQ3Qtyc
        {
            get { return __TotPFYQ3Qtyc; }
            set { SetField(ref __TotPFYQ3Qtyc, value, "Tot_PFY_Q3_Qty__c"); }
        }
        private System.String __TotPFYQ4Amtc;
        [JsonProperty(PropertyName = "Tot_PFY_Q4_Amt__c")]
        [EntityField(true)]
        public System.String TotPFYQ4Amtc
        {
            get { return __TotPFYQ4Amtc; }
            set { SetField(ref __TotPFYQ4Amtc, value, "Tot_PFY_Q4_Amt__c"); }
        }
        private System.String __TotPFYQ4Costc;
        [JsonProperty(PropertyName = "Tot_PFY_Q4_Cost__c")]
        [EntityField(true)]
        public System.String TotPFYQ4Costc
        {
            get { return __TotPFYQ4Costc; }
            set { SetField(ref __TotPFYQ4Costc, value, "Tot_PFY_Q4_Cost__c"); }
        }
        private System.Double? __TotPFYQ4Qtyc;
        [JsonProperty(PropertyName = "Tot_PFY_Q4_Qty__c")]
        [EntityField(true)]
        public System.Double? TotPFYQ4Qtyc
        {
            get { return __TotPFYQ4Qtyc; }
            set { SetField(ref __TotPFYQ4Qtyc, value, "Tot_PFY_Q4_Qty__c"); }
        }
        private System.Double? __TotPFYQtyc;
        [JsonProperty(PropertyName = "Tot_PFY_Qty__c")]
        [EntityField(true)]
        public System.Double? TotPFYQtyc
        {
            get { return __TotPFYQtyc; }
            set { SetField(ref __TotPFYQtyc, value, "Tot_PFY_Qty__c"); }
        }
        private System.String __TotYBLAmtc;
        [JsonProperty(PropertyName = "Tot_YBL_Amt__c")]
        [EntityField(true)]
        public System.String TotYBLAmtc
        {
            get { return __TotYBLAmtc; }
            set { SetField(ref __TotYBLAmtc, value, "Tot_YBL_Amt__c"); }
        }
        private System.String __TotYBLCostc;
        [JsonProperty(PropertyName = "Tot_YBL_Cost__c")]
        [EntityField(true)]
        public System.String TotYBLCostc
        {
            get { return __TotYBLCostc; }
            set { SetField(ref __TotYBLCostc, value, "Tot_YBL_Cost__c"); }
        }
        private System.String __TotYBLQ1Amtc;
        [JsonProperty(PropertyName = "Tot_YBL_Q1_Amt__c")]
        [EntityField(true)]
        public System.String TotYBLQ1Amtc
        {
            get { return __TotYBLQ1Amtc; }
            set { SetField(ref __TotYBLQ1Amtc, value, "Tot_YBL_Q1_Amt__c"); }
        }
        private System.String __TotYBLQ1Costc;
        [JsonProperty(PropertyName = "Tot_YBL_Q1_Cost__c")]
        [EntityField(true)]
        public System.String TotYBLQ1Costc
        {
            get { return __TotYBLQ1Costc; }
            set { SetField(ref __TotYBLQ1Costc, value, "Tot_YBL_Q1_Cost__c"); }
        }
        private System.Double? __TotYBLQ1Qtyc;
        [JsonProperty(PropertyName = "Tot_YBL_Q1_Qty__c")]
        [EntityField(true)]
        public System.Double? TotYBLQ1Qtyc
        {
            get { return __TotYBLQ1Qtyc; }
            set { SetField(ref __TotYBLQ1Qtyc, value, "Tot_YBL_Q1_Qty__c"); }
        }
        private System.String __TotYBLQ2Amtc;
        [JsonProperty(PropertyName = "Tot_YBL_Q2_Amt__c")]
        [EntityField(true)]
        public System.String TotYBLQ2Amtc
        {
            get { return __TotYBLQ2Amtc; }
            set { SetField(ref __TotYBLQ2Amtc, value, "Tot_YBL_Q2_Amt__c"); }
        }
        private System.String __TotYBLQ2Costc;
        [JsonProperty(PropertyName = "Tot_YBL_Q2_Cost__c")]
        [EntityField(true)]
        public System.String TotYBLQ2Costc
        {
            get { return __TotYBLQ2Costc; }
            set { SetField(ref __TotYBLQ2Costc, value, "Tot_YBL_Q2_Cost__c"); }
        }
        private System.Double? __TotYBLQ2Qtyc;
        [JsonProperty(PropertyName = "Tot_YBL_Q2_Qty__c")]
        [EntityField(true)]
        public System.Double? TotYBLQ2Qtyc
        {
            get { return __TotYBLQ2Qtyc; }
            set { SetField(ref __TotYBLQ2Qtyc, value, "Tot_YBL_Q2_Qty__c"); }
        }
        private System.String __TotYBLQ3Amtc;
        [JsonProperty(PropertyName = "Tot_YBL_Q3_Amt__c")]
        [EntityField(true)]
        public System.String TotYBLQ3Amtc
        {
            get { return __TotYBLQ3Amtc; }
            set { SetField(ref __TotYBLQ3Amtc, value, "Tot_YBL_Q3_Amt__c"); }
        }
        private System.String __TotYBLQ3Costc;
        [JsonProperty(PropertyName = "Tot_YBL_Q3_Cost__c")]
        [EntityField(true)]
        public System.String TotYBLQ3Costc
        {
            get { return __TotYBLQ3Costc; }
            set { SetField(ref __TotYBLQ3Costc, value, "Tot_YBL_Q3_Cost__c"); }
        }
        private System.Double? __TotYBLQ3Qtyc;
        [JsonProperty(PropertyName = "Tot_YBL_Q3_Qty__c")]
        [EntityField(true)]
        public System.Double? TotYBLQ3Qtyc
        {
            get { return __TotYBLQ3Qtyc; }
            set { SetField(ref __TotYBLQ3Qtyc, value, "Tot_YBL_Q3_Qty__c"); }
        }
        private System.String __TotYBLQ4Amtc;
        [JsonProperty(PropertyName = "Tot_YBL_Q4_Amt__c")]
        [EntityField(true)]
        public System.String TotYBLQ4Amtc
        {
            get { return __TotYBLQ4Amtc; }
            set { SetField(ref __TotYBLQ4Amtc, value, "Tot_YBL_Q4_Amt__c"); }
        }
        private System.String __TotYBLQ4Costc;
        [JsonProperty(PropertyName = "Tot_YBL_Q4_Cost__c")]
        [EntityField(true)]
        public System.String TotYBLQ4Costc
        {
            get { return __TotYBLQ4Costc; }
            set { SetField(ref __TotYBLQ4Costc, value, "Tot_YBL_Q4_Cost__c"); }
        }
        private System.Double? __TotYBLQ4Qtyc;
        [JsonProperty(PropertyName = "Tot_YBL_Q4_Qty__c")]
        [EntityField(true)]
        public System.Double? TotYBLQ4Qtyc
        {
            get { return __TotYBLQ4Qtyc; }
            set { SetField(ref __TotYBLQ4Qtyc, value, "Tot_YBL_Q4_Qty__c"); }
        }
        private System.Double? __TotYBLQtyc;
        [JsonProperty(PropertyName = "Tot_YBL_Qty__c")]
        [EntityField(true)]
        public System.Double? TotYBLQtyc
        {
            get { return __TotYBLQtyc; }
            set { SetField(ref __TotYBLQtyc, value, "Tot_YBL_Qty__c"); }
        }
        private System.Double? __UniqueIDc;
        [JsonProperty(PropertyName = "Unique_ID__c")]
        [EntityField(true)]
        public System.Double? UniqueIDc
        {
            get { return __UniqueIDc; }
            set { SetField(ref __UniqueIDc, value, "Unique_ID__c"); }
        }
        private System.Boolean __Synergyc;
        [JsonProperty(PropertyName = "Synergy__c")]
        [EntityField(false)]
        public System.Boolean Synergyc
        {
            get { return __Synergyc; }
            set { SetField(ref __Synergyc, value, "Synergy__c"); }
        }
        private System.String __SynergyIDc;
        [JsonProperty(PropertyName = "Synergy_ID__c")]
        [EntityField(true)]
        public System.String SynergyIDc
        {
            get { return __SynergyIDc; }
            set { SetField(ref __SynergyIDc, value, "Synergy_ID__c"); }
        }
        private System.String __CYTDAmountc;
        [JsonProperty(PropertyName = "CYTD_Amount__c")]
        [EntityField(true)]
        public System.String CYTDAmountc
        {
            get { return __CYTDAmountc; }
        }
        private System.String __CYTDPlanc;
        [JsonProperty(PropertyName = "CYTD_Plan__c")]
        [EntityField(true)]
        public System.String CYTDPlanc
        {
            get { return __CYTDPlanc; }
        }
        private System.String __PYTDAmountc;
        [JsonProperty(PropertyName = "PYTD_Amount__c")]
        [EntityField(true)]
        public System.String PYTDAmountc
        {
            get { return __PYTDAmountc; }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<ProductLine,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<ProductLine,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<ProductLine,ProductLineHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<ProductLine,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<ProductLine,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Profile")]
    public class Profile : ISalesforceEntity
    {
    [JsonConstructor]
        private Profile(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Profile()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Boolean __PermissionsEmailSingle;
        [EntityField(false)]
        public System.Boolean PermissionsEmailSingle
        {
            get { return __PermissionsEmailSingle; }
            set { SetField(ref __PermissionsEmailSingle, value, "PermissionsEmailSingle"); }
        }
        private System.Boolean __PermissionsEmailMass;
        [EntityField(false)]
        public System.Boolean PermissionsEmailMass
        {
            get { return __PermissionsEmailMass; }
            set { SetField(ref __PermissionsEmailMass, value, "PermissionsEmailMass"); }
        }
        private System.Boolean __PermissionsEditTask;
        [EntityField(false)]
        public System.Boolean PermissionsEditTask
        {
            get { return __PermissionsEditTask; }
            set { SetField(ref __PermissionsEditTask, value, "PermissionsEditTask"); }
        }
        private System.Boolean __PermissionsEditEvent;
        [EntityField(false)]
        public System.Boolean PermissionsEditEvent
        {
            get { return __PermissionsEditEvent; }
            set { SetField(ref __PermissionsEditEvent, value, "PermissionsEditEvent"); }
        }
        private System.Boolean __PermissionsExportReport;
        [EntityField(false)]
        public System.Boolean PermissionsExportReport
        {
            get { return __PermissionsExportReport; }
            set { SetField(ref __PermissionsExportReport, value, "PermissionsExportReport"); }
        }
        private System.Boolean __PermissionsImportPersonal;
        [EntityField(false)]
        public System.Boolean PermissionsImportPersonal
        {
            get { return __PermissionsImportPersonal; }
            set { SetField(ref __PermissionsImportPersonal, value, "PermissionsImportPersonal"); }
        }
        private System.Boolean __PermissionsDataExport;
        [EntityField(false)]
        public System.Boolean PermissionsDataExport
        {
            get { return __PermissionsDataExport; }
            set { SetField(ref __PermissionsDataExport, value, "PermissionsDataExport"); }
        }
        private System.Boolean __PermissionsManageUsers;
        [EntityField(false)]
        public System.Boolean PermissionsManageUsers
        {
            get { return __PermissionsManageUsers; }
            set { SetField(ref __PermissionsManageUsers, value, "PermissionsManageUsers"); }
        }
        private System.Boolean __PermissionsEditPublicTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditPublicTemplates
        {
            get { return __PermissionsEditPublicTemplates; }
            set { SetField(ref __PermissionsEditPublicTemplates, value, "PermissionsEditPublicTemplates"); }
        }
        private System.Boolean __PermissionsModifyAllData;
        [EntityField(false)]
        public System.Boolean PermissionsModifyAllData
        {
            get { return __PermissionsModifyAllData; }
            set { SetField(ref __PermissionsModifyAllData, value, "PermissionsModifyAllData"); }
        }
        private System.Boolean __PermissionsManageCases;
        [EntityField(false)]
        public System.Boolean PermissionsManageCases
        {
            get { return __PermissionsManageCases; }
            set { SetField(ref __PermissionsManageCases, value, "PermissionsManageCases"); }
        }
        private System.Boolean __PermissionsMassInlineEdit;
        [EntityField(false)]
        public System.Boolean PermissionsMassInlineEdit
        {
            get { return __PermissionsMassInlineEdit; }
            set { SetField(ref __PermissionsMassInlineEdit, value, "PermissionsMassInlineEdit"); }
        }
        private System.Boolean __PermissionsEditKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsEditKnowledge
        {
            get { return __PermissionsEditKnowledge; }
            set { SetField(ref __PermissionsEditKnowledge, value, "PermissionsEditKnowledge"); }
        }
        private System.Boolean __PermissionsManageKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsManageKnowledge
        {
            get { return __PermissionsManageKnowledge; }
            set { SetField(ref __PermissionsManageKnowledge, value, "PermissionsManageKnowledge"); }
        }
        private System.Boolean __PermissionsTagManager;
        [EntityField(false)]
        public System.Boolean PermissionsTagManager
        {
            get { return __PermissionsTagManager; }
            set { SetField(ref __PermissionsTagManager, value, "PermissionsTagManager"); }
        }
        private System.Boolean __PermissionsManageSolutions;
        [EntityField(false)]
        public System.Boolean PermissionsManageSolutions
        {
            get { return __PermissionsManageSolutions; }
            set { SetField(ref __PermissionsManageSolutions, value, "PermissionsManageSolutions"); }
        }
        private System.Boolean __PermissionsCustomizeApplication;
        [EntityField(false)]
        public System.Boolean PermissionsCustomizeApplication
        {
            get { return __PermissionsCustomizeApplication; }
            set { SetField(ref __PermissionsCustomizeApplication, value, "PermissionsCustomizeApplication"); }
        }
        private System.Boolean __PermissionsEditReadonlyFields;
        [EntityField(false)]
        public System.Boolean PermissionsEditReadonlyFields
        {
            get { return __PermissionsEditReadonlyFields; }
            set { SetField(ref __PermissionsEditReadonlyFields, value, "PermissionsEditReadonlyFields"); }
        }
        private System.Boolean __PermissionsRunReports;
        [EntityField(false)]
        public System.Boolean PermissionsRunReports
        {
            get { return __PermissionsRunReports; }
            set { SetField(ref __PermissionsRunReports, value, "PermissionsRunReports"); }
        }
        private System.Boolean __PermissionsViewSetup;
        [EntityField(false)]
        public System.Boolean PermissionsViewSetup
        {
            get { return __PermissionsViewSetup; }
            set { SetField(ref __PermissionsViewSetup, value, "PermissionsViewSetup"); }
        }
        private System.Boolean __PermissionsTransferAnyEntity;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyEntity
        {
            get { return __PermissionsTransferAnyEntity; }
            set { SetField(ref __PermissionsTransferAnyEntity, value, "PermissionsTransferAnyEntity"); }
        }
        private System.Boolean __PermissionsNewReportBuilder;
        [EntityField(false)]
        public System.Boolean PermissionsNewReportBuilder
        {
            get { return __PermissionsNewReportBuilder; }
            set { SetField(ref __PermissionsNewReportBuilder, value, "PermissionsNewReportBuilder"); }
        }
        private System.Boolean __PermissionsManageCssUsers;
        [EntityField(false)]
        public System.Boolean PermissionsManageCssUsers
        {
            get { return __PermissionsManageCssUsers; }
            set { SetField(ref __PermissionsManageCssUsers, value, "PermissionsManageCssUsers"); }
        }
        private System.Boolean __PermissionsActivateContract;
        [EntityField(false)]
        public System.Boolean PermissionsActivateContract
        {
            get { return __PermissionsActivateContract; }
            set { SetField(ref __PermissionsActivateContract, value, "PermissionsActivateContract"); }
        }
        private System.Boolean __PermissionsImportLeads;
        [EntityField(false)]
        public System.Boolean PermissionsImportLeads
        {
            get { return __PermissionsImportLeads; }
            set { SetField(ref __PermissionsImportLeads, value, "PermissionsImportLeads"); }
        }
        private System.Boolean __PermissionsManageLeads;
        [EntityField(false)]
        public System.Boolean PermissionsManageLeads
        {
            get { return __PermissionsManageLeads; }
            set { SetField(ref __PermissionsManageLeads, value, "PermissionsManageLeads"); }
        }
        private System.Boolean __PermissionsTransferAnyLead;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyLead
        {
            get { return __PermissionsTransferAnyLead; }
            set { SetField(ref __PermissionsTransferAnyLead, value, "PermissionsTransferAnyLead"); }
        }
        private System.Boolean __PermissionsViewAllData;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllData
        {
            get { return __PermissionsViewAllData; }
            set { SetField(ref __PermissionsViewAllData, value, "PermissionsViewAllData"); }
        }
        private System.Boolean __PermissionsEditPublicDocuments;
        [EntityField(false)]
        public System.Boolean PermissionsEditPublicDocuments
        {
            get { return __PermissionsEditPublicDocuments; }
            set { SetField(ref __PermissionsEditPublicDocuments, value, "PermissionsEditPublicDocuments"); }
        }
        private System.Boolean __PermissionsViewEncryptedData;
        [EntityField(false)]
        public System.Boolean PermissionsViewEncryptedData
        {
            get { return __PermissionsViewEncryptedData; }
            set { SetField(ref __PermissionsViewEncryptedData, value, "PermissionsViewEncryptedData"); }
        }
        private System.Boolean __PermissionsEditBrandTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditBrandTemplates
        {
            get { return __PermissionsEditBrandTemplates; }
            set { SetField(ref __PermissionsEditBrandTemplates, value, "PermissionsEditBrandTemplates"); }
        }
        private System.Boolean __PermissionsEditHtmlTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditHtmlTemplates
        {
            get { return __PermissionsEditHtmlTemplates; }
            set { SetField(ref __PermissionsEditHtmlTemplates, value, "PermissionsEditHtmlTemplates"); }
        }
        private System.Boolean __PermissionsChatterInternalUser;
        [EntityField(false)]
        public System.Boolean PermissionsChatterInternalUser
        {
            get { return __PermissionsChatterInternalUser; }
            set { SetField(ref __PermissionsChatterInternalUser, value, "PermissionsChatterInternalUser"); }
        }
        private System.Boolean __PermissionsManageTranslation;
        [EntityField(false)]
        public System.Boolean PermissionsManageTranslation
        {
            get { return __PermissionsManageTranslation; }
            set { SetField(ref __PermissionsManageTranslation, value, "PermissionsManageTranslation"); }
        }
        private System.Boolean __PermissionsDeleteActivatedContract;
        [EntityField(false)]
        public System.Boolean PermissionsDeleteActivatedContract
        {
            get { return __PermissionsDeleteActivatedContract; }
            set { SetField(ref __PermissionsDeleteActivatedContract, value, "PermissionsDeleteActivatedContract"); }
        }
        private System.Boolean __PermissionsChatterInviteExternalUsers;
        [EntityField(false)]
        public System.Boolean PermissionsChatterInviteExternalUsers
        {
            get { return __PermissionsChatterInviteExternalUsers; }
            set { SetField(ref __PermissionsChatterInviteExternalUsers, value, "PermissionsChatterInviteExternalUsers"); }
        }
        private System.Boolean __PermissionsSendSitRequests;
        [EntityField(false)]
        public System.Boolean PermissionsSendSitRequests
        {
            get { return __PermissionsSendSitRequests; }
            set { SetField(ref __PermissionsSendSitRequests, value, "PermissionsSendSitRequests"); }
        }
        private System.Boolean __PermissionsOverrideForecasts;
        [EntityField(false)]
        public System.Boolean PermissionsOverrideForecasts
        {
            get { return __PermissionsOverrideForecasts; }
            set { SetField(ref __PermissionsOverrideForecasts, value, "PermissionsOverrideForecasts"); }
        }
        private System.Boolean __PermissionsViewAllForecasts;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllForecasts
        {
            get { return __PermissionsViewAllForecasts; }
            set { SetField(ref __PermissionsViewAllForecasts, value, "PermissionsViewAllForecasts"); }
        }
        private System.Boolean __PermissionsApiUserOnly;
        [EntityField(false)]
        public System.Boolean PermissionsApiUserOnly
        {
            get { return __PermissionsApiUserOnly; }
            set { SetField(ref __PermissionsApiUserOnly, value, "PermissionsApiUserOnly"); }
        }
        private System.Boolean __PermissionsManageRemoteAccess;
        [EntityField(false)]
        public System.Boolean PermissionsManageRemoteAccess
        {
            get { return __PermissionsManageRemoteAccess; }
            set { SetField(ref __PermissionsManageRemoteAccess, value, "PermissionsManageRemoteAccess"); }
        }
        private System.Boolean __PermissionsCanUseNewDashboardBuilder;
        [EntityField(false)]
        public System.Boolean PermissionsCanUseNewDashboardBuilder
        {
            get { return __PermissionsCanUseNewDashboardBuilder; }
            set { SetField(ref __PermissionsCanUseNewDashboardBuilder, value, "PermissionsCanUseNewDashboardBuilder"); }
        }
        private System.Boolean __PermissionsManageCategories;
        [EntityField(false)]
        public System.Boolean PermissionsManageCategories
        {
            get { return __PermissionsManageCategories; }
            set { SetField(ref __PermissionsManageCategories, value, "PermissionsManageCategories"); }
        }
        private System.Boolean __PermissionsConvertLeads;
        [EntityField(false)]
        public System.Boolean PermissionsConvertLeads
        {
            get { return __PermissionsConvertLeads; }
            set { SetField(ref __PermissionsConvertLeads, value, "PermissionsConvertLeads"); }
        }
        private System.Boolean __PermissionsPasswordNeverExpires;
        [EntityField(false)]
        public System.Boolean PermissionsPasswordNeverExpires
        {
            get { return __PermissionsPasswordNeverExpires; }
            set { SetField(ref __PermissionsPasswordNeverExpires, value, "PermissionsPasswordNeverExpires"); }
        }
        private System.Boolean __PermissionsUseTeamReassignWizards;
        [EntityField(false)]
        public System.Boolean PermissionsUseTeamReassignWizards
        {
            get { return __PermissionsUseTeamReassignWizards; }
            set { SetField(ref __PermissionsUseTeamReassignWizards, value, "PermissionsUseTeamReassignWizards"); }
        }
        private System.Boolean __PermissionsInstallMultiforce;
        [EntityField(false)]
        public System.Boolean PermissionsInstallMultiforce
        {
            get { return __PermissionsInstallMultiforce; }
            set { SetField(ref __PermissionsInstallMultiforce, value, "PermissionsInstallMultiforce"); }
        }
        private System.Boolean __PermissionsPublishMultiforce;
        [EntityField(false)]
        public System.Boolean PermissionsPublishMultiforce
        {
            get { return __PermissionsPublishMultiforce; }
            set { SetField(ref __PermissionsPublishMultiforce, value, "PermissionsPublishMultiforce"); }
        }
        private System.Boolean __PermissionsManagePartners;
        [EntityField(false)]
        public System.Boolean PermissionsManagePartners
        {
            get { return __PermissionsManagePartners; }
            set { SetField(ref __PermissionsManagePartners, value, "PermissionsManagePartners"); }
        }
        private System.Boolean __PermissionsChatterOwnGroups;
        [EntityField(false)]
        public System.Boolean PermissionsChatterOwnGroups
        {
            get { return __PermissionsChatterOwnGroups; }
            set { SetField(ref __PermissionsChatterOwnGroups, value, "PermissionsChatterOwnGroups"); }
        }
        private System.Boolean __PermissionsEditOppLineItemUnitPrice;
        [EntityField(false)]
        public System.Boolean PermissionsEditOppLineItemUnitPrice
        {
            get { return __PermissionsEditOppLineItemUnitPrice; }
            set { SetField(ref __PermissionsEditOppLineItemUnitPrice, value, "PermissionsEditOppLineItemUnitPrice"); }
        }
        private System.Boolean __PermissionsCreateMultiforce;
        [EntityField(false)]
        public System.Boolean PermissionsCreateMultiforce
        {
            get { return __PermissionsCreateMultiforce; }
            set { SetField(ref __PermissionsCreateMultiforce, value, "PermissionsCreateMultiforce"); }
        }
        private System.Boolean __PermissionsBulkApiHardDelete;
        [EntityField(false)]
        public System.Boolean PermissionsBulkApiHardDelete
        {
            get { return __PermissionsBulkApiHardDelete; }
            set { SetField(ref __PermissionsBulkApiHardDelete, value, "PermissionsBulkApiHardDelete"); }
        }
        private System.Boolean __PermissionsInboundMigrationToolsUser;
        [EntityField(false)]
        public System.Boolean PermissionsInboundMigrationToolsUser
        {
            get { return __PermissionsInboundMigrationToolsUser; }
            set { SetField(ref __PermissionsInboundMigrationToolsUser, value, "PermissionsInboundMigrationToolsUser"); }
        }
        private System.Boolean __PermissionsSolutionImport;
        [EntityField(false)]
        public System.Boolean PermissionsSolutionImport
        {
            get { return __PermissionsSolutionImport; }
            set { SetField(ref __PermissionsSolutionImport, value, "PermissionsSolutionImport"); }
        }
        private System.Boolean __PermissionsManageCallCenters;
        [EntityField(false)]
        public System.Boolean PermissionsManageCallCenters
        {
            get { return __PermissionsManageCallCenters; }
            set { SetField(ref __PermissionsManageCallCenters, value, "PermissionsManageCallCenters"); }
        }
        private System.Boolean __PermissionsPortalSuperUser;
        [EntityField(false)]
        public System.Boolean PermissionsPortalSuperUser
        {
            get { return __PermissionsPortalSuperUser; }
            set { SetField(ref __PermissionsPortalSuperUser, value, "PermissionsPortalSuperUser"); }
        }
        private System.Boolean __PermissionsManageSynonyms;
        [EntityField(false)]
        public System.Boolean PermissionsManageSynonyms
        {
            get { return __PermissionsManageSynonyms; }
            set { SetField(ref __PermissionsManageSynonyms, value, "PermissionsManageSynonyms"); }
        }
        private System.Boolean __PermissionsOutboundMigrationToolsUser;
        [EntityField(false)]
        public System.Boolean PermissionsOutboundMigrationToolsUser
        {
            get { return __PermissionsOutboundMigrationToolsUser; }
            set { SetField(ref __PermissionsOutboundMigrationToolsUser, value, "PermissionsOutboundMigrationToolsUser"); }
        }
        private System.Boolean __PermissionsDelegatedPortalUserAdmin;
        [EntityField(false)]
        public System.Boolean PermissionsDelegatedPortalUserAdmin
        {
            get { return __PermissionsDelegatedPortalUserAdmin; }
            set { SetField(ref __PermissionsDelegatedPortalUserAdmin, value, "PermissionsDelegatedPortalUserAdmin"); }
        }
        private System.Boolean __PermissionsViewContent;
        [EntityField(false)]
        public System.Boolean PermissionsViewContent
        {
            get { return __PermissionsViewContent; }
            set { SetField(ref __PermissionsViewContent, value, "PermissionsViewContent"); }
        }
        private System.Boolean __PermissionsManageEmailClientConfig;
        [EntityField(false)]
        public System.Boolean PermissionsManageEmailClientConfig
        {
            get { return __PermissionsManageEmailClientConfig; }
            set { SetField(ref __PermissionsManageEmailClientConfig, value, "PermissionsManageEmailClientConfig"); }
        }
        private System.Boolean __PermissionsEnableNotifications;
        [EntityField(false)]
        public System.Boolean PermissionsEnableNotifications
        {
            get { return __PermissionsEnableNotifications; }
            set { SetField(ref __PermissionsEnableNotifications, value, "PermissionsEnableNotifications"); }
        }
        private System.Boolean __PermissionsManageDataIntegrations;
        [EntityField(false)]
        public System.Boolean PermissionsManageDataIntegrations
        {
            get { return __PermissionsManageDataIntegrations; }
            set { SetField(ref __PermissionsManageDataIntegrations, value, "PermissionsManageDataIntegrations"); }
        }
        private System.Boolean __PermissionsDistributeFromPersWksp;
        [EntityField(false)]
        public System.Boolean PermissionsDistributeFromPersWksp
        {
            get { return __PermissionsDistributeFromPersWksp; }
            set { SetField(ref __PermissionsDistributeFromPersWksp, value, "PermissionsDistributeFromPersWksp"); }
        }
        private System.Boolean __PermissionsViewDataCategories;
        [EntityField(false)]
        public System.Boolean PermissionsViewDataCategories
        {
            get { return __PermissionsViewDataCategories; }
            set { SetField(ref __PermissionsViewDataCategories, value, "PermissionsViewDataCategories"); }
        }
        private System.Boolean __PermissionsManageDataCategories;
        [EntityField(false)]
        public System.Boolean PermissionsManageDataCategories
        {
            get { return __PermissionsManageDataCategories; }
            set { SetField(ref __PermissionsManageDataCategories, value, "PermissionsManageDataCategories"); }
        }
        private System.Boolean __PermissionsAuthorApex;
        [EntityField(false)]
        public System.Boolean PermissionsAuthorApex
        {
            get { return __PermissionsAuthorApex; }
            set { SetField(ref __PermissionsAuthorApex, value, "PermissionsAuthorApex"); }
        }
        private System.Boolean __PermissionsManageMobile;
        [EntityField(false)]
        public System.Boolean PermissionsManageMobile
        {
            get { return __PermissionsManageMobile; }
            set { SetField(ref __PermissionsManageMobile, value, "PermissionsManageMobile"); }
        }
        private System.Boolean __PermissionsApiEnabled;
        [EntityField(false)]
        public System.Boolean PermissionsApiEnabled
        {
            get { return __PermissionsApiEnabled; }
            set { SetField(ref __PermissionsApiEnabled, value, "PermissionsApiEnabled"); }
        }
        private System.Boolean __PermissionsManageCustomReportTypes;
        [EntityField(false)]
        public System.Boolean PermissionsManageCustomReportTypes
        {
            get { return __PermissionsManageCustomReportTypes; }
            set { SetField(ref __PermissionsManageCustomReportTypes, value, "PermissionsManageCustomReportTypes"); }
        }
        private System.Boolean __PermissionsEditCaseComments;
        [EntityField(false)]
        public System.Boolean PermissionsEditCaseComments
        {
            get { return __PermissionsEditCaseComments; }
            set { SetField(ref __PermissionsEditCaseComments, value, "PermissionsEditCaseComments"); }
        }
        private System.Boolean __PermissionsTransferAnyCase;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyCase
        {
            get { return __PermissionsTransferAnyCase; }
            set { SetField(ref __PermissionsTransferAnyCase, value, "PermissionsTransferAnyCase"); }
        }
        private System.Boolean __PermissionsContentAdministrator;
        [EntityField(false)]
        public System.Boolean PermissionsContentAdministrator
        {
            get { return __PermissionsContentAdministrator; }
            set { SetField(ref __PermissionsContentAdministrator, value, "PermissionsContentAdministrator"); }
        }
        private System.Boolean __PermissionsCreateWorkspaces;
        [EntityField(false)]
        public System.Boolean PermissionsCreateWorkspaces
        {
            get { return __PermissionsCreateWorkspaces; }
            set { SetField(ref __PermissionsCreateWorkspaces, value, "PermissionsCreateWorkspaces"); }
        }
        private System.Boolean __PermissionsManageContentPermissions;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentPermissions
        {
            get { return __PermissionsManageContentPermissions; }
            set { SetField(ref __PermissionsManageContentPermissions, value, "PermissionsManageContentPermissions"); }
        }
        private System.Boolean __PermissionsManageContentProperties;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentProperties
        {
            get { return __PermissionsManageContentProperties; }
            set { SetField(ref __PermissionsManageContentProperties, value, "PermissionsManageContentProperties"); }
        }
        private System.Boolean __PermissionsManageContentTypes;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentTypes
        {
            get { return __PermissionsManageContentTypes; }
            set { SetField(ref __PermissionsManageContentTypes, value, "PermissionsManageContentTypes"); }
        }
        private System.Boolean __PermissionsScheduleJob;
        [EntityField(false)]
        public System.Boolean PermissionsScheduleJob
        {
            get { return __PermissionsScheduleJob; }
            set { SetField(ref __PermissionsScheduleJob, value, "PermissionsScheduleJob"); }
        }
        private System.Boolean __PermissionsManageExchangeConfig;
        [EntityField(false)]
        public System.Boolean PermissionsManageExchangeConfig
        {
            get { return __PermissionsManageExchangeConfig; }
            set { SetField(ref __PermissionsManageExchangeConfig, value, "PermissionsManageExchangeConfig"); }
        }
        private System.Boolean __PermissionsManageAnalyticSnapshots;
        [EntityField(false)]
        public System.Boolean PermissionsManageAnalyticSnapshots
        {
            get { return __PermissionsManageAnalyticSnapshots; }
            set { SetField(ref __PermissionsManageAnalyticSnapshots, value, "PermissionsManageAnalyticSnapshots"); }
        }
        private System.Boolean __PermissionsScheduleReports;
        [EntityField(false)]
        public System.Boolean PermissionsScheduleReports
        {
            get { return __PermissionsScheduleReports; }
            set { SetField(ref __PermissionsScheduleReports, value, "PermissionsScheduleReports"); }
        }
        private System.Boolean __PermissionsManageBusinessHourHolidays;
        [EntityField(false)]
        public System.Boolean PermissionsManageBusinessHourHolidays
        {
            get { return __PermissionsManageBusinessHourHolidays; }
            set { SetField(ref __PermissionsManageBusinessHourHolidays, value, "PermissionsManageBusinessHourHolidays"); }
        }
        private System.Boolean __PermissionsManageEntitlements;
        [EntityField(false)]
        public System.Boolean PermissionsManageEntitlements
        {
            get { return __PermissionsManageEntitlements; }
            set { SetField(ref __PermissionsManageEntitlements, value, "PermissionsManageEntitlements"); }
        }
        private System.Boolean __PermissionsManageDynamicDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsManageDynamicDashboards
        {
            get { return __PermissionsManageDynamicDashboards; }
            set { SetField(ref __PermissionsManageDynamicDashboards, value, "PermissionsManageDynamicDashboards"); }
        }
        private System.Boolean __PermissionsManageInteraction;
        [EntityField(false)]
        public System.Boolean PermissionsManageInteraction
        {
            get { return __PermissionsManageInteraction; }
            set { SetField(ref __PermissionsManageInteraction, value, "PermissionsManageInteraction"); }
        }
        private System.Boolean __PermissionsViewMyTeamsDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsViewMyTeamsDashboards
        {
            get { return __PermissionsViewMyTeamsDashboards; }
            set { SetField(ref __PermissionsViewMyTeamsDashboards, value, "PermissionsViewMyTeamsDashboards"); }
        }
        private System.Boolean __PermissionsModerateChatter;
        [EntityField(false)]
        public System.Boolean PermissionsModerateChatter
        {
            get { return __PermissionsModerateChatter; }
            set { SetField(ref __PermissionsModerateChatter, value, "PermissionsModerateChatter"); }
        }
        private System.Boolean __PermissionsResetPasswords;
        [EntityField(false)]
        public System.Boolean PermissionsResetPasswords
        {
            get { return __PermissionsResetPasswords; }
            set { SetField(ref __PermissionsResetPasswords, value, "PermissionsResetPasswords"); }
        }
        private System.Boolean __PermissionsFlowUFLRequired;
        [EntityField(false)]
        public System.Boolean PermissionsFlowUFLRequired
        {
            get { return __PermissionsFlowUFLRequired; }
            set { SetField(ref __PermissionsFlowUFLRequired, value, "PermissionsFlowUFLRequired"); }
        }
        private System.Boolean __PermissionsCanInsertFeedSystemFields;
        [EntityField(false)]
        public System.Boolean PermissionsCanInsertFeedSystemFields
        {
            get { return __PermissionsCanInsertFeedSystemFields; }
            set { SetField(ref __PermissionsCanInsertFeedSystemFields, value, "PermissionsCanInsertFeedSystemFields"); }
        }
        private System.Boolean __PermissionsManageKnowledgeImportExport;
        [EntityField(false)]
        public System.Boolean PermissionsManageKnowledgeImportExport
        {
            get { return __PermissionsManageKnowledgeImportExport; }
            set { SetField(ref __PermissionsManageKnowledgeImportExport, value, "PermissionsManageKnowledgeImportExport"); }
        }
        private System.Boolean __PermissionsEmailTemplateManagement;
        [EntityField(false)]
        public System.Boolean PermissionsEmailTemplateManagement
        {
            get { return __PermissionsEmailTemplateManagement; }
            set { SetField(ref __PermissionsEmailTemplateManagement, value, "PermissionsEmailTemplateManagement"); }
        }
        private System.Boolean __PermissionsEmailAdministration;
        [EntityField(false)]
        public System.Boolean PermissionsEmailAdministration
        {
            get { return __PermissionsEmailAdministration; }
            set { SetField(ref __PermissionsEmailAdministration, value, "PermissionsEmailAdministration"); }
        }
        private System.Boolean __PermissionsManageChatterMessages;
        [EntityField(false)]
        public System.Boolean PermissionsManageChatterMessages
        {
            get { return __PermissionsManageChatterMessages; }
            set { SetField(ref __PermissionsManageChatterMessages, value, "PermissionsManageChatterMessages"); }
        }
        private System.Boolean __PermissionsAllowEmailIC;
        [EntityField(false)]
        public System.Boolean PermissionsAllowEmailIC
        {
            get { return __PermissionsAllowEmailIC; }
            set { SetField(ref __PermissionsAllowEmailIC, value, "PermissionsAllowEmailIC"); }
        }
        private System.Boolean __PermissionsChatterFileLink;
        [EntityField(false)]
        public System.Boolean PermissionsChatterFileLink
        {
            get { return __PermissionsChatterFileLink; }
            set { SetField(ref __PermissionsChatterFileLink, value, "PermissionsChatterFileLink"); }
        }
        private System.Boolean __PermissionsForceTwoFactor;
        [EntityField(false)]
        public System.Boolean PermissionsForceTwoFactor
        {
            get { return __PermissionsForceTwoFactor; }
            set { SetField(ref __PermissionsForceTwoFactor, value, "PermissionsForceTwoFactor"); }
        }
        private System.Boolean __PermissionsViewEventLogFiles;
        [EntityField(false)]
        public System.Boolean PermissionsViewEventLogFiles
        {
            get { return __PermissionsViewEventLogFiles; }
            set { SetField(ref __PermissionsViewEventLogFiles, value, "PermissionsViewEventLogFiles"); }
        }
        private System.Boolean __PermissionsManageNetworks;
        [EntityField(false)]
        public System.Boolean PermissionsManageNetworks
        {
            get { return __PermissionsManageNetworks; }
            set { SetField(ref __PermissionsManageNetworks, value, "PermissionsManageNetworks"); }
        }
        private System.Boolean __PermissionsManageAuthProviders;
        [EntityField(false)]
        public System.Boolean PermissionsManageAuthProviders
        {
            get { return __PermissionsManageAuthProviders; }
            set { SetField(ref __PermissionsManageAuthProviders, value, "PermissionsManageAuthProviders"); }
        }
        private System.Boolean __PermissionsRunFlow;
        [EntityField(false)]
        public System.Boolean PermissionsRunFlow
        {
            get { return __PermissionsRunFlow; }
            set { SetField(ref __PermissionsRunFlow, value, "PermissionsRunFlow"); }
        }
        private System.Boolean __PermissionsViewGlobalHeader;
        [EntityField(false)]
        public System.Boolean PermissionsViewGlobalHeader
        {
            get { return __PermissionsViewGlobalHeader; }
            set { SetField(ref __PermissionsViewGlobalHeader, value, "PermissionsViewGlobalHeader"); }
        }
        private System.Boolean __PermissionsManageQuotas;
        [EntityField(false)]
        public System.Boolean PermissionsManageQuotas
        {
            get { return __PermissionsManageQuotas; }
            set { SetField(ref __PermissionsManageQuotas, value, "PermissionsManageQuotas"); }
        }
        private System.Boolean __PermissionsCreateCustomizeDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeDashboards
        {
            get { return __PermissionsCreateCustomizeDashboards; }
            set { SetField(ref __PermissionsCreateCustomizeDashboards, value, "PermissionsCreateCustomizeDashboards"); }
        }
        private System.Boolean __PermissionsCreateDashboardFolders;
        [EntityField(false)]
        public System.Boolean PermissionsCreateDashboardFolders
        {
            get { return __PermissionsCreateDashboardFolders; }
            set { SetField(ref __PermissionsCreateDashboardFolders, value, "PermissionsCreateDashboardFolders"); }
        }
        private System.Boolean __PermissionsViewPublicDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsViewPublicDashboards
        {
            get { return __PermissionsViewPublicDashboards; }
            set { SetField(ref __PermissionsViewPublicDashboards, value, "PermissionsViewPublicDashboards"); }
        }
        private System.Boolean __PermissionsManageDashbdsInPubFolders;
        [EntityField(false)]
        public System.Boolean PermissionsManageDashbdsInPubFolders
        {
            get { return __PermissionsManageDashbdsInPubFolders; }
            set { SetField(ref __PermissionsManageDashbdsInPubFolders, value, "PermissionsManageDashbdsInPubFolders"); }
        }
        private System.Boolean __PermissionsCreateCustomizeReports;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeReports
        {
            get { return __PermissionsCreateCustomizeReports; }
            set { SetField(ref __PermissionsCreateCustomizeReports, value, "PermissionsCreateCustomizeReports"); }
        }
        private System.Boolean __PermissionsCreateReportFolders;
        [EntityField(false)]
        public System.Boolean PermissionsCreateReportFolders
        {
            get { return __PermissionsCreateReportFolders; }
            set { SetField(ref __PermissionsCreateReportFolders, value, "PermissionsCreateReportFolders"); }
        }
        private System.Boolean __PermissionsViewPublicReports;
        [EntityField(false)]
        public System.Boolean PermissionsViewPublicReports
        {
            get { return __PermissionsViewPublicReports; }
            set { SetField(ref __PermissionsViewPublicReports, value, "PermissionsViewPublicReports"); }
        }
        private System.Boolean __PermissionsManageReportsInPubFolders;
        [EntityField(false)]
        public System.Boolean PermissionsManageReportsInPubFolders
        {
            get { return __PermissionsManageReportsInPubFolders; }
            set { SetField(ref __PermissionsManageReportsInPubFolders, value, "PermissionsManageReportsInPubFolders"); }
        }
        private System.Boolean __PermissionsEditMyDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsEditMyDashboards
        {
            get { return __PermissionsEditMyDashboards; }
            set { SetField(ref __PermissionsEditMyDashboards, value, "PermissionsEditMyDashboards"); }
        }
        private System.Boolean __PermissionsEditMyReports;
        [EntityField(false)]
        public System.Boolean PermissionsEditMyReports
        {
            get { return __PermissionsEditMyReports; }
            set { SetField(ref __PermissionsEditMyReports, value, "PermissionsEditMyReports"); }
        }
        private System.Boolean __PermissionsViewAllUsers;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllUsers
        {
            get { return __PermissionsViewAllUsers; }
            set { SetField(ref __PermissionsViewAllUsers, value, "PermissionsViewAllUsers"); }
        }
        private System.Boolean __PermissionsAllowUniversalSearch;
        [EntityField(false)]
        public System.Boolean PermissionsAllowUniversalSearch
        {
            get { return __PermissionsAllowUniversalSearch; }
            set { SetField(ref __PermissionsAllowUniversalSearch, value, "PermissionsAllowUniversalSearch"); }
        }
        private System.Boolean __PermissionsConnectOrgToEnvironmentHub;
        [EntityField(false)]
        public System.Boolean PermissionsConnectOrgToEnvironmentHub
        {
            get { return __PermissionsConnectOrgToEnvironmentHub; }
            set { SetField(ref __PermissionsConnectOrgToEnvironmentHub, value, "PermissionsConnectOrgToEnvironmentHub"); }
        }
        private System.Boolean __PermissionsCreateCustomizeFilters;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeFilters
        {
            get { return __PermissionsCreateCustomizeFilters; }
            set { SetField(ref __PermissionsCreateCustomizeFilters, value, "PermissionsCreateCustomizeFilters"); }
        }
        private System.Boolean __PermissionsModerateNetworkFeeds;
        [EntityField(false)]
        public System.Boolean PermissionsModerateNetworkFeeds
        {
            get { return __PermissionsModerateNetworkFeeds; }
            set { SetField(ref __PermissionsModerateNetworkFeeds, value, "PermissionsModerateNetworkFeeds"); }
        }
        private System.Boolean __PermissionsModerateNetworkFiles;
        [EntityField(false)]
        public System.Boolean PermissionsModerateNetworkFiles
        {
            get { return __PermissionsModerateNetworkFiles; }
            set { SetField(ref __PermissionsModerateNetworkFiles, value, "PermissionsModerateNetworkFiles"); }
        }
        private System.Boolean __PermissionsSalesConsole;
        [EntityField(false)]
        public System.Boolean PermissionsSalesConsole
        {
            get { return __PermissionsSalesConsole; }
            set { SetField(ref __PermissionsSalesConsole, value, "PermissionsSalesConsole"); }
        }
        private System.Boolean __PermissionsTwoFactorApi;
        [EntityField(false)]
        public System.Boolean PermissionsTwoFactorApi
        {
            get { return __PermissionsTwoFactorApi; }
            set { SetField(ref __PermissionsTwoFactorApi, value, "PermissionsTwoFactorApi"); }
        }
        private System.Boolean __PermissionsDeleteTopics;
        [EntityField(false)]
        public System.Boolean PermissionsDeleteTopics
        {
            get { return __PermissionsDeleteTopics; }
            set { SetField(ref __PermissionsDeleteTopics, value, "PermissionsDeleteTopics"); }
        }
        private System.Boolean __PermissionsEditTopics;
        [EntityField(false)]
        public System.Boolean PermissionsEditTopics
        {
            get { return __PermissionsEditTopics; }
            set { SetField(ref __PermissionsEditTopics, value, "PermissionsEditTopics"); }
        }
        private System.Boolean __PermissionsCreateTopics;
        [EntityField(false)]
        public System.Boolean PermissionsCreateTopics
        {
            get { return __PermissionsCreateTopics; }
            set { SetField(ref __PermissionsCreateTopics, value, "PermissionsCreateTopics"); }
        }
        private System.Boolean __PermissionsAssignTopics;
        [EntityField(false)]
        public System.Boolean PermissionsAssignTopics
        {
            get { return __PermissionsAssignTopics; }
            set { SetField(ref __PermissionsAssignTopics, value, "PermissionsAssignTopics"); }
        }
        private System.Boolean __PermissionsIdentityEnabled;
        [EntityField(false)]
        public System.Boolean PermissionsIdentityEnabled
        {
            get { return __PermissionsIdentityEnabled; }
            set { SetField(ref __PermissionsIdentityEnabled, value, "PermissionsIdentityEnabled"); }
        }
        private System.Boolean __PermissionsIdentityConnect;
        [EntityField(false)]
        public System.Boolean PermissionsIdentityConnect
        {
            get { return __PermissionsIdentityConnect; }
            set { SetField(ref __PermissionsIdentityConnect, value, "PermissionsIdentityConnect"); }
        }
        private System.Boolean __PermissionsAllowViewKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsAllowViewKnowledge
        {
            get { return __PermissionsAllowViewKnowledge; }
            set { SetField(ref __PermissionsAllowViewKnowledge, value, "PermissionsAllowViewKnowledge"); }
        }
        private System.Boolean __PermissionsManageSearchPromotionRules;
        [EntityField(false)]
        public System.Boolean PermissionsManageSearchPromotionRules
        {
            get { return __PermissionsManageSearchPromotionRules; }
            set { SetField(ref __PermissionsManageSearchPromotionRules, value, "PermissionsManageSearchPromotionRules"); }
        }
        private System.Boolean __PermissionsCustomMobileAppsAccess;
        [EntityField(false)]
        public System.Boolean PermissionsCustomMobileAppsAccess
        {
            get { return __PermissionsCustomMobileAppsAccess; }
            set { SetField(ref __PermissionsCustomMobileAppsAccess, value, "PermissionsCustomMobileAppsAccess"); }
        }
        private System.Boolean __PermissionsViewHelpLink;
        [EntityField(false)]
        public System.Boolean PermissionsViewHelpLink
        {
            get { return __PermissionsViewHelpLink; }
            set { SetField(ref __PermissionsViewHelpLink, value, "PermissionsViewHelpLink"); }
        }
        private System.Boolean __PermissionsDebugApex;
        [EntityField(false)]
        public System.Boolean PermissionsDebugApex
        {
            get { return __PermissionsDebugApex; }
            set { SetField(ref __PermissionsDebugApex, value, "PermissionsDebugApex"); }
        }
        private System.String __UserLicenseId;
        [EntityField(false)]
        public System.String UserLicenseId
        {
            get { return __UserLicenseId; }
            set { SetField(ref __UserLicenseId, value, "UserLicenseId"); }
        }
        private PickProfileUserType __UserType;
        [EntityField(true)]
        public PickProfileUserType UserType
        {
            get { return __UserType; }
            set { SetField(ref __UserType, value, "UserType"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("ProfileId")]
        public RelationShip<Profile,User> Users
        {
            get;set;
        }
    }
    [EntityName("Program__History")]
    public class ProgramHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ProgramHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProgramHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickProgramHistoryField __Field;
        [EntityField(false)]
        public PickProgramHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    //[EntityName("Program__c")]
    //public class Program : ISalesforceEntity
    //{
    //[JsonConstructor]
    //    private Program(string hack)
    //    {
    //        trackPropertyUpdates = false;
    //    }

    //    public Program()
    //    {
    //        trackPropertyUpdates = true;
    //    } 
    
    //    private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
    //    public IDictionary<string, object> UpdatedProperties => _updatedProperties;
    //    private bool trackPropertyUpdates = false;

    //    public event PropertyChangedEventHandler PropertyChanged;
    //    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
    //    {
    //        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    //    }

    //    public void TrackPropertyUpdates() => trackPropertyUpdates = true;

    //    protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
    //    {
    //        if (EqualityComparer<T>.Default.Equals(field, value))
    //            return false;
    //        field = value;

    //        if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
    //        {
    //          if (_updatedProperties.ContainsKey(serializedName))
    //              _updatedProperties[serializedName] = value;
    //          else
    //              _updatedProperties.Add(serializedName, value);
    //        }

    //        OnPropertyChanged(propertyName);
    //        return true;
    //    }
    //    private System.String __Id;
    //    [EntityField(false)]
    //    public System.String Id
    //    {
    //        get { return __Id; }
    //        set { SetField(ref __Id, value, "Id"); }
    //    }
    //    private System.String __OwnerId;
    //    [EntityField(false)]
    //    public System.String OwnerId
    //    {
    //        get { return __OwnerId; }
    //        set { SetField(ref __OwnerId, value, "OwnerId"); }
    //    }
    //    private System.Boolean __IsDeleted;
    //    [EntityField(false)]
    //    public System.Boolean IsDeleted
    //    {
    //        get { return __IsDeleted; }
    //        set { SetField(ref __IsDeleted, value, "IsDeleted"); }
    //    }
    //    private System.String __Name;
    //    [EntityField(true)]
    //    public System.String Name
    //    {
    //        get { return __Name; }
    //        set { SetField(ref __Name, value, "Name"); }
    //    }
    //    private PickProgramCurrencyIsoCode __CurrencyIsoCode;
    //    [EntityField(true)]
    //    public PickProgramCurrencyIsoCode CurrencyIsoCode
    //    {
    //        get { return __CurrencyIsoCode; }
    //        set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
    //    }
    //    private System.String __RecordTypeId;
    //    [EntityField(true)]
    //    public System.String RecordTypeId
    //    {
    //        get { return __RecordTypeId; }
    //        set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
    //    }
    //    private System.DateTime __CreatedDate;
    //    [EntityField(false)]
    //    public System.DateTime CreatedDate
    //    {
    //        get { return __CreatedDate; }
    //        set { SetField(ref __CreatedDate, value, "CreatedDate"); }
    //    }
    //    private System.String __CreatedById;
    //    [EntityField(false)]
    //    public System.String CreatedById
    //    {
    //        get { return __CreatedById; }
    //        set { SetField(ref __CreatedById, value, "CreatedById"); }
    //    }
    //    private System.DateTime __LastModifiedDate;
    //    [EntityField(false)]
    //    public System.DateTime LastModifiedDate
    //    {
    //        get { return __LastModifiedDate; }
    //        set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
    //    }
    //    private System.String __LastModifiedById;
    //    [EntityField(false)]
    //    public System.String LastModifiedById
    //    {
    //        get { return __LastModifiedById; }
    //        set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
    //    }
    //    private System.DateTime __SystemModstamp;
    //    [EntityField(false)]
    //    public System.DateTime SystemModstamp
    //    {
    //        get { return __SystemModstamp; }
    //        set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
    //    }
    //    private System.DateTime? __LastActivityDate;
    //    [EntityField(true)]
    //    public System.DateTime? LastActivityDate
    //    {
    //        get { return __LastActivityDate; }
    //        set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
    //    }
    //    private System.DateTime? __LastViewedDate;
    //    [EntityField(true)]
    //    public System.DateTime? LastViewedDate
    //    {
    //        get { return __LastViewedDate; }
    //        set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
    //    }
    //    private System.DateTime? __LastReferencedDate;
    //    [EntityField(true)]
    //    public System.DateTime? LastReferencedDate
    //    {
    //        get { return __LastReferencedDate; }
    //        set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
    //    }
    //    private System.String __Descrc;
    //    [JsonProperty(PropertyName = "Descr__c")]
    //    [EntityField(true)]
    //    public System.String Descrc
    //    {
    //        get { return __Descrc; }
    //        set { SetField(ref __Descrc, value, "Descr__c"); }
    //    }
    //    private System.DateTime? __EndDtc;
    //    [JsonProperty(PropertyName = "End_Dt__c")]
    //    [EntityField(true)]
    //    public System.DateTime? EndDtc
    //    {
    //        get { return __EndDtc; }
    //        set { SetField(ref __EndDtc, value, "End_Dt__c"); }
    //    }
    //    private System.String __PrimaryContactsc;
    //    [JsonProperty(PropertyName = "Primary_Contacts__c")]
    //    [EntityField(true)]
    //    public System.String PrimaryContactsc
    //    {
    //        get { return __PrimaryContactsc; }
    //        set { SetField(ref __PrimaryContactsc, value, "Primary_Contacts__c"); }
    //    }
    //    private System.DateTime? __StartDtc;
    //    [JsonProperty(PropertyName = "Start_Dt__c")]
    //    [EntityField(true)]
    //    public System.DateTime? StartDtc
    //    {
    //        get { return __StartDtc; }
    //        set { SetField(ref __StartDtc, value, "Start_Dt__c"); }
    //    }
    //    private PickProgramAcctType __AcctTypec;
    //    [JsonProperty(PropertyName = "Acct_Type__c")]
    //    [EntityField(true)]
    //    public PickProgramAcctType AcctTypec
    //    {
    //        get { return __AcctTypec; }
    //        set { SetField(ref __AcctTypec, value, "Acct_Type__c"); }
    //    }
    //    private System.String __ActionPlanTemplatec;
    //    [JsonProperty(PropertyName = "Action_Plan_Template__c")]
    //    [EntityField(true)]
    //    public System.String ActionPlanTemplatec
    //    {
    //        get { return __ActionPlanTemplatec; }
    //        set { SetField(ref __ActionPlanTemplatec, value, "Action_Plan_Template__c"); }
    //    }
    //    private PickProgramApprovalStatus __ApprovalStatusc;
    //    [JsonProperty(PropertyName = "Approval_Status__c")]
    //    [EntityField(true)]
    //    public PickProgramApprovalStatus ApprovalStatusc
    //    {
    //        get { return __ApprovalStatusc; }
    //        set { SetField(ref __ApprovalStatusc, value, "Approval_Status__c"); }
    //    }
    //    private System.String __Brandc;
    //    [JsonProperty(PropertyName = "Brand__c")]
    //    [EntityField(true)]
    //    public System.String Brandc
    //    {
    //        get { return __Brandc; }
    //        set { SetField(ref __Brandc, value, "Brand__c"); }
    //    }
    //    private System.String __CostRollupc;
    //    [JsonProperty(PropertyName = "Cost_Roll_up__c")]
    //    [EntityField(true)]
    //    public System.String CostRollupc
    //    {
    //        get { return __CostRollupc; }
    //        set { SetField(ref __CostRollupc, value, "Cost_Roll_up__c"); }
    //    }
    //    private System.String __Costc;
    //    [JsonProperty(PropertyName = "Cost__c")]
    //    [EntityField(true)]
    //    public System.String Costc
    //    {
    //        get { return __Costc; }
    //        set { SetField(ref __Costc, value, "Cost__c"); }
    //    }
    //    private System.String __CustReqc;
    //    [JsonProperty(PropertyName = "Cust_Req__c")]
    //    [EntityField(true)]
    //    public System.String CustReqc
    //    {
    //        get { return __CustReqc; }
    //        set { SetField(ref __CustReqc, value, "Cust_Req__c"); }
    //    }
    //    private System.String __ExpFinOutcomeRollupc;
    //    [JsonProperty(PropertyName = "Exp_Fin_Outcome_Roll_up__c")]
    //    [EntityField(true)]
    //    public System.String ExpFinOutcomeRollupc
    //    {
    //        get { return __ExpFinOutcomeRollupc; }
    //        set { SetField(ref __ExpFinOutcomeRollupc, value, "Exp_Fin_Outcome_Roll_up__c"); }
    //    }
    //    private System.String __ExpFinOutcomec;
    //    [JsonProperty(PropertyName = "Exp_Fin_Outcome__c")]
    //    [EntityField(true)]
    //    public System.String ExpFinOutcomec
    //    {
    //        get { return __ExpFinOutcomec; }
    //        set { SetField(ref __ExpFinOutcomec, value, "Exp_Fin_Outcome__c"); }
    //    }
    //    private System.String __FinancialProgressRollupc;
    //    [JsonProperty(PropertyName = "Financial_Progress_Roll_up__c")]
    //    [EntityField(true)]
    //    public System.String FinancialProgressRollupc
    //    {
    //        get { return __FinancialProgressRollupc; }
    //        set { SetField(ref __FinancialProgressRollupc, value, "Financial_Progress_Roll_up__c"); }
    //    }
    //    private System.String __JCIReqc;
    //    [JsonProperty(PropertyName = "JCI_Req__c")]
    //    [EntityField(true)]
    //    public System.String JCIReqc
    //    {
    //        get { return __JCIReqc; }
    //        set { SetField(ref __JCIReqc, value, "JCI_Req__c"); }
    //    }
    //    private System.String __Notesc;
    //    [JsonProperty(PropertyName = "Notes__c")]
    //    [EntityField(true)]
    //    public System.String Notesc
    //    {
    //        get { return __Notesc; }
    //        set { SetField(ref __Notesc, value, "Notes__c"); }
    //    }
    //    private System.String __Productc;
    //    [JsonProperty(PropertyName = "Product__c")]
    //    [EntityField(true)]
    //    public System.String Productc
    //    {
    //        get { return __Productc; }
    //        set { SetField(ref __Productc, value, "Product__c"); }
    //    }
    //    private System.DateTime? __CompletedDatec;
    //    [JsonProperty(PropertyName = "Completed_Date__c")]
    //    [EntityField(true)]
    //    public System.DateTime? CompletedDatec
    //    {
    //        get { return __CompletedDatec; }
    //        set { SetField(ref __CompletedDatec, value, "Completed_Date__c"); }
    //    }
    //    private System.String __CurrentMarketStatec;
    //    [JsonProperty(PropertyName = "Current_Market_State__c")]
    //    [EntityField(true)]
    //    public System.String CurrentMarketStatec
    //    {
    //        get { return __CurrentMarketStatec; }
    //        set { SetField(ref __CurrentMarketStatec, value, "Current_Market_State__c"); }
    //    }
    //    private PickProgramEstimatedGoalDuration __EstimatedGoalDurationc;
    //    [JsonProperty(PropertyName = "Estimated_Goal_Duration__c")]
    //    [EntityField(true)]
    //    public PickProgramEstimatedGoalDuration EstimatedGoalDurationc
    //    {
    //        get { return __EstimatedGoalDurationc; }
    //        set { SetField(ref __EstimatedGoalDurationc, value, "Estimated_Goal_Duration__c"); }
    //    }
    //    private PickProgramGoalStatus __GoalStatusc;
    //    [JsonProperty(PropertyName = "Goal_Status__c")]
    //    [EntityField(true)]
    //    public PickProgramGoalStatus GoalStatusc
    //    {
    //        get { return __GoalStatusc; }
    //        set { SetField(ref __GoalStatusc, value, "Goal_Status__c"); }
    //    }
    //    private PickProgramGoalType __GoalTypec;
    //    [JsonProperty(PropertyName = "Goal_Type__c")]
    //    [EntityField(true)]
    //    public PickProgramGoalType GoalTypec
    //    {
    //        get { return __GoalTypec; }
    //        set { SetField(ref __GoalTypec, value, "Goal_Type__c"); }
    //    }
    //    private System.String __Marketc;
    //    [JsonProperty(PropertyName = "Market__c")]
    //    [EntityField(true)]
    //    public System.String Marketc
    //    {
    //        get { return __Marketc; }
    //        set { SetField(ref __Marketc, value, "Market__c"); }
    //    }
    //    private System.String __RealizedValuec;
    //    [JsonProperty(PropertyName = "Realized_Value__c")]
    //    [EntityField(true)]
    //    public System.String RealizedValuec
    //    {
    //        get { return __RealizedValuec; }
    //        set { SetField(ref __RealizedValuec, value, "Realized_Value__c"); }
    //    }
    //    private PickProgramStatus __Statusc;
    //    [JsonProperty(PropertyName = "Status__c")]
    //    [EntityField(true)]
    //    public PickProgramStatus Statusc
    //    {
    //        get { return __Statusc; }
    //        set { SetField(ref __Statusc, value, "Status__c"); }
    //    }
    //    private System.String __BrandSharec;
    //    [JsonProperty(PropertyName = "Brand_Share__c")]
    //    [EntityField(true)]
    //    public System.String BrandSharec
    //    {
    //        get { return __BrandSharec; }
    //        set { SetField(ref __BrandSharec, value, "Brand_Share__c"); }
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("WhatId")]
    //    public RelationShip<Program,ActivityHistory> ActivityHistories
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("WhatId")]
    //    public RelationShip<Program,Event> Events
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("Parent_Program__c")]
    //    public RelationShip<Program,Lead> Leads__r
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("NAC_Parent_Program__c")]
    //    public RelationShip<Program,Opportunity> Opportunities__r
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("ParentId")]
    //    public RelationShip<Program,ProgramHistory> Histories
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("Program__c")]
    //    public RelationShip<Program,StrategicGoal> Strategic_Initiatives__r
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("WhatId")]
    //    public RelationShip<Program,Task> Tasks
    //    {
    //        get;set;
    //    }
    //    [JsonIgnore]
    //    [ReferencedByField("RelationId")]
    //    public RelationShip<Program,TaskRelation> TaskRelations
    //    {
    //        get;set;
    //    }
    //}
    [EntityName("RecordType")]
    public class RecordType : ISalesforceEntity
    {
    [JsonConstructor]
        private RecordType(string hack)
        {
            trackPropertyUpdates = false;
        }

        public RecordType()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __BusinessProcessId;
        [EntityField(true)]
        public System.String BusinessProcessId
        {
            get { return __BusinessProcessId; }
            set { SetField(ref __BusinessProcessId, value, "BusinessProcessId"); }
        }
        private PickRecordTypeSobjectType __SobjectType;
        [EntityField(false)]
        public PickRecordTypeSobjectType SobjectType
        {
            get { return __SobjectType; }
            set { SetField(ref __SobjectType, value, "SobjectType"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Report")]
    public class Report : ISalesforceEntity
    {
    [JsonConstructor]
        private Report(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Report()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime? __LastRunDate;
        [EntityField(true)]
        public System.DateTime? LastRunDate
        {
            get { return __LastRunDate; }
            set { SetField(ref __LastRunDate, value, "LastRunDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickReportFormat __Format;
        [EntityField(false)]
        public PickReportFormat Format
        {
            get { return __Format; }
            set { SetField(ref __Format, value, "Format"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
    }
    [EntityName("Selling_Entity_Role_Map__c")]
    public class SellingEntityRoleMap : ISalesforceEntity
    {
    [JsonConstructor]
        private SellingEntityRoleMap(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SellingEntityRoleMap()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickSellingEntityRoleMapCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickSellingEntityRoleMapCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __SetupOwnerId;
        [EntityField(true)]
        public System.String SetupOwnerId
        {
            get { return __SetupOwnerId; }
            set { SetField(ref __SetupOwnerId, value, "SetupOwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Brandc;
        [JsonProperty(PropertyName = "Brand__c")]
        [EntityField(true)]
        public System.String Brandc
        {
            get { return __Brandc; }
            set { SetField(ref __Brandc, value, "Brand__c"); }
        }
        private System.String __Rolec;
        [JsonProperty(PropertyName = "Role__c")]
        [EntityField(true)]
        public System.String Rolec
        {
            get { return __Rolec; }
            set { SetField(ref __Rolec, value, "Role__c"); }
        }
        private System.String __SellingEntityc;
        [JsonProperty(PropertyName = "Selling_Entity__c")]
        [EntityField(true)]
        public System.String SellingEntityc
        {
            get { return __SellingEntityc; }
            set { SetField(ref __SellingEntityc, value, "Selling_Entity__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<SellingEntityRoleMap,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Strategic_Goal__History")]
    public class StrategicGoalHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private StrategicGoalHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public StrategicGoalHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickStrategicGoalHistoryField __Field;
        [EntityField(false)]
        public PickStrategicGoalHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Strategic_Goal__c")]
    public class StrategicGoal : ISalesforceEntity
    {
    [JsonConstructor]
        private StrategicGoal(string hack)
        {
            trackPropertyUpdates = false;
        }

        public StrategicGoal()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickStrategicGoalCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickStrategicGoalCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __Acctc;
        [JsonProperty(PropertyName = "Acct__c")]
        [EntityField(false)]
        public System.String Acctc
        {
            get { return __Acctc; }
            set { SetField(ref __Acctc, value, "Acct__c"); }
        }
        private System.DateTime? __CompletedDtc;
        [JsonProperty(PropertyName = "Completed_Dt__c")]
        [EntityField(true)]
        public System.DateTime? CompletedDtc
        {
            get { return __CompletedDtc; }
            set { SetField(ref __CompletedDtc, value, "Completed_Dt__c"); }
        }
        private System.String __GoalNotec;
        [JsonProperty(PropertyName = "Goal_Note__c")]
        [EntityField(true)]
        public System.String GoalNotec
        {
            get { return __GoalNotec; }
            set { SetField(ref __GoalNotec, value, "Goal_Note__c"); }
        }
        private PickStrategicGoalGoalStatus __GoalStatusc;
        [JsonProperty(PropertyName = "Goal_Status__c")]
        [EntityField(true)]
        public PickStrategicGoalGoalStatus GoalStatusc
        {
            get { return __GoalStatusc; }
            set { SetField(ref __GoalStatusc, value, "Goal_Status__c"); }
        }
        private PickStrategicGoalGoalType __GoalTypec;
        [JsonProperty(PropertyName = "Goal_Type__c")]
        [EntityField(true)]
        public PickStrategicGoalGoalType GoalTypec
        {
            get { return __GoalTypec; }
            set { SetField(ref __GoalTypec, value, "Goal_Type__c"); }
        }
        private System.String __JCIBrandc;
        [JsonProperty(PropertyName = "JCI_Brand__c")]
        [EntityField(true)]
        public System.String JCIBrandc
        {
            get { return __JCIBrandc; }
            set { SetField(ref __JCIBrandc, value, "JCI_Brand__c"); }
        }
        private System.DateTime? __StartDtc;
        [JsonProperty(PropertyName = "Start_Dt__c")]
        [EntityField(true)]
        public System.DateTime? StartDtc
        {
            get { return __StartDtc; }
            set { SetField(ref __StartDtc, value, "Start_Dt__c"); }
        }
        private System.String __AcctMarketc;
        [JsonProperty(PropertyName = "Acct_Market__c")]
        [EntityField(true)]
        public System.String AcctMarketc
        {
            get { return __AcctMarketc; }
        }
        private System.String __Costc;
        [JsonProperty(PropertyName = "Cost__c")]
        [EntityField(true)]
        public System.String Costc
        {
            get { return __Costc; }
            set { SetField(ref __Costc, value, "Cost__c"); }
        }
        private System.String __CustGoal2c;
        [JsonProperty(PropertyName = "Cust_Goal2__c")]
        [EntityField(true)]
        public System.String CustGoal2c
        {
            get { return __CustGoal2c; }
            set { SetField(ref __CustGoal2c, value, "Cust_Goal2__c"); }
        }
        private System.String __CustGoalc;
        [JsonProperty(PropertyName = "Cust_Goal__c")]
        [EntityField(true)]
        public System.String CustGoalc
        {
            get { return __CustGoalc; }
            set { SetField(ref __CustGoalc, value, "Cust_Goal__c"); }
        }
        private System.String __ExpectedFinOutc;
        [JsonProperty(PropertyName = "Expected_Fin_Out__c")]
        [EntityField(true)]
        public System.String ExpectedFinOutc
        {
            get { return __ExpectedFinOutc; }
            set { SetField(ref __ExpectedFinOutc, value, "Expected_Fin_Out__c"); }
        }
        private System.String __FinProgc;
        [JsonProperty(PropertyName = "Fin_Prog__c")]
        [EntityField(true)]
        public System.String FinProgc
        {
            get { return __FinProgc; }
            set { SetField(ref __FinProgc, value, "Fin_Prog__c"); }
        }
        private System.String __JCIRequirementsc;
        [JsonProperty(PropertyName = "JCI_Requirements__c")]
        [EntityField(true)]
        public System.String JCIRequirementsc
        {
            get { return __JCIRequirementsc; }
            set { SetField(ref __JCIRequirementsc, value, "JCI_Requirements__c"); }
        }
        private System.String __Programc;
        [JsonProperty(PropertyName = "Program__c")]
        [EntityField(true)]
        public System.String Programc
        {
            get { return __Programc; }
            set { SetField(ref __Programc, value, "Program__c"); }
        }
        private System.String __RelatedToc;
        [JsonProperty(PropertyName = "Related_To__c")]
        [EntityField(true)]
        public System.String RelatedToc
        {
            get { return __RelatedToc; }
        }
        private System.String __StattoFinGoalc;
        [JsonProperty(PropertyName = "Stat_to_Fin_Goal__c")]
        [EntityField(true)]
        public System.String StattoFinGoalc
        {
            get { return __StattoFinGoalc; }
        }
        private PickStrategicGoalEstimatedGoalDuration __EstimatedGoalDurationc;
        [JsonProperty(PropertyName = "Estimated_Goal_Duration__c")]
        [EntityField(true)]
        public PickStrategicGoalEstimatedGoalDuration EstimatedGoalDurationc
        {
            get { return __EstimatedGoalDurationc; }
            set { SetField(ref __EstimatedGoalDurationc, value, "Estimated_Goal_Duration__c"); }
        }
        private System.String __MarketStrategyOwnerc;
        [JsonProperty(PropertyName = "Market_Strategy_Owner__c")]
        [EntityField(true)]
        public System.String MarketStrategyOwnerc
        {
            get { return __MarketStrategyOwnerc; }
        }
        private System.String __Marketc;
        [JsonProperty(PropertyName = "Market__c")]
        [EntityField(true)]
        public System.String Marketc
        {
            get { return __Marketc; }
            set { SetField(ref __Marketc, value, "Market__c"); }
        }
        private System.String __ExternalIdc;
        [JsonProperty(PropertyName = "External_Id__c")]
        [EntityField(true)]
        public System.String ExternalIdc
        {
            get { return __ExternalIdc; }
            set { SetField(ref __ExternalIdc, value, "External_Id__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("Strategic_Goal__c")]
        public RelationShip<StrategicGoal,ActionPlan> Action_Plans__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<StrategicGoal,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<StrategicGoal,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("NAC_Strategic_Initiative__c")]
        public RelationShip<StrategicGoal,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<StrategicGoal,StrategicGoalHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<StrategicGoal,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<StrategicGoal,TaskRelation> TaskRelations
        {
            get;set;
        }
    }
    [EntityName("Task")]
    public class Task : ISalesforceEntity
    {
    [JsonConstructor]
        private Task(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Task()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.Int32? __WhoCount;
        [EntityField(true)]
        public System.Int32? WhoCount
        {
            get { return __WhoCount; }
            set { SetField(ref __WhoCount, value, "WhoCount"); }
        }
        private System.Int32? __WhatCount;
        [EntityField(true)]
        public System.Int32? WhatCount
        {
            get { return __WhatCount; }
            set { SetField(ref __WhatCount, value, "WhatCount"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private PickTaskStatus __Status;
        [EntityField(false)]
        public PickTaskStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickTaskPriority __Priority;
        [EntityField(false)]
        public PickTaskPriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickTaskCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(true)]
        public PickTaskCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private PickTaskType __Type;
        [EntityField(true)]
        public PickTaskType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsArchived;
        [EntityField(false)]
        public System.Boolean IsArchived
        {
            get { return __IsArchived; }
            set { SetField(ref __IsArchived, value, "IsArchived"); }
        }
        private System.Boolean __IsVisibleInSelfService;
        [EntityField(false)]
        public System.Boolean IsVisibleInSelfService
        {
            get { return __IsVisibleInSelfService; }
            set { SetField(ref __IsVisibleInSelfService, value, "IsVisibleInSelfService"); }
        }
        private System.Int32? __CallDurationInSeconds;
        [EntityField(true)]
        public System.Int32? CallDurationInSeconds
        {
            get { return __CallDurationInSeconds; }
            set { SetField(ref __CallDurationInSeconds, value, "CallDurationInSeconds"); }
        }
        private PickTaskCallType __CallType;
        [EntityField(true)]
        public PickTaskCallType CallType
        {
            get { return __CallType; }
            set { SetField(ref __CallType, value, "CallType"); }
        }
        private System.String __CallDisposition;
        [EntityField(true)]
        public System.String CallDisposition
        {
            get { return __CallDisposition; }
            set { SetField(ref __CallDisposition, value, "CallDisposition"); }
        }
        private System.String __CallObject;
        [EntityField(true)]
        public System.String CallObject
        {
            get { return __CallObject; }
            set { SetField(ref __CallObject, value, "CallObject"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        private System.String __RecurrenceActivityId;
        [EntityField(true)]
        public System.String RecurrenceActivityId
        {
            get { return __RecurrenceActivityId; }
            set { SetField(ref __RecurrenceActivityId, value, "RecurrenceActivityId"); }
        }
        private System.Boolean __IsRecurrence;
        [EntityField(false)]
        public System.Boolean IsRecurrence
        {
            get { return __IsRecurrence; }
            set { SetField(ref __IsRecurrence, value, "IsRecurrence"); }
        }
        private System.DateTime? __RecurrenceStartDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceStartDateOnly
        {
            get { return __RecurrenceStartDateOnly; }
            set { SetField(ref __RecurrenceStartDateOnly, value, "RecurrenceStartDateOnly"); }
        }
        private System.DateTime? __RecurrenceEndDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceEndDateOnly
        {
            get { return __RecurrenceEndDateOnly; }
            set { SetField(ref __RecurrenceEndDateOnly, value, "RecurrenceEndDateOnly"); }
        }
        private PickTaskRecurrenceTimeZoneSidKey __RecurrenceTimeZoneSidKey;
        [EntityField(true)]
        public PickTaskRecurrenceTimeZoneSidKey RecurrenceTimeZoneSidKey
        {
            get { return __RecurrenceTimeZoneSidKey; }
            set { SetField(ref __RecurrenceTimeZoneSidKey, value, "RecurrenceTimeZoneSidKey"); }
        }
        private PickTaskRecurrenceType __RecurrenceType;
        [EntityField(true)]
        public PickTaskRecurrenceType RecurrenceType
        {
            get { return __RecurrenceType; }
            set { SetField(ref __RecurrenceType, value, "RecurrenceType"); }
        }
        private System.Int32? __RecurrenceInterval;
        [EntityField(true)]
        public System.Int32? RecurrenceInterval
        {
            get { return __RecurrenceInterval; }
            set { SetField(ref __RecurrenceInterval, value, "RecurrenceInterval"); }
        }
        private System.Int32? __RecurrenceDayOfWeekMask;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfWeekMask
        {
            get { return __RecurrenceDayOfWeekMask; }
            set { SetField(ref __RecurrenceDayOfWeekMask, value, "RecurrenceDayOfWeekMask"); }
        }
        private System.Int32? __RecurrenceDayOfMonth;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfMonth
        {
            get { return __RecurrenceDayOfMonth; }
            set { SetField(ref __RecurrenceDayOfMonth, value, "RecurrenceDayOfMonth"); }
        }
        private PickTaskRecurrenceInstance __RecurrenceInstance;
        [EntityField(true)]
        public PickTaskRecurrenceInstance RecurrenceInstance
        {
            get { return __RecurrenceInstance; }
            set { SetField(ref __RecurrenceInstance, value, "RecurrenceInstance"); }
        }
        private PickTaskRecurrenceMonthOfYear __RecurrenceMonthOfYear;
        [EntityField(true)]
        public PickTaskRecurrenceMonthOfYear RecurrenceMonthOfYear
        {
            get { return __RecurrenceMonthOfYear; }
            set { SetField(ref __RecurrenceMonthOfYear, value, "RecurrenceMonthOfYear"); }
        }
        private PickTaskRecurrenceRegeneratedType __RecurrenceRegeneratedType;
        [EntityField(true)]
        public PickTaskRecurrenceRegeneratedType RecurrenceRegeneratedType
        {
            get { return __RecurrenceRegeneratedType; }
            set { SetField(ref __RecurrenceRegeneratedType, value, "RecurrenceRegeneratedType"); }
        }
        private System.String __DBActivityTypec;
        [JsonProperty(PropertyName = "DB_Activity_Type__c")]
        [EntityField(true)]
        public System.String DBActivityTypec
        {
            get { return __DBActivityTypec; }
        }
        private PickTaskEventStatus __EventStatusc;
        [JsonProperty(PropertyName = "Event_Status__c")]
        [EntityField(true)]
        public PickTaskEventStatus EventStatusc
        {
            get { return __EventStatusc; }
            set { SetField(ref __EventStatusc, value, "Event_Status__c"); }
        }
        private PickTaskJCIActivitySubTypes __JCIActivitySubTypesc;
        [JsonProperty(PropertyName = "JCI_Activity_Sub_Types__c")]
        [EntityField(true)]
        public PickTaskJCIActivitySubTypes JCIActivitySubTypesc
        {
            get { return __JCIActivitySubTypesc; }
            set { SetField(ref __JCIActivitySubTypesc, value, "JCI_Activity_Sub_Types__c"); }
        }
        private PickTaskJCIActivityTypes __JCIActivityTypesc;
        [JsonProperty(PropertyName = "JCI_Activity_Types__c")]
        [EntityField(true)]
        public PickTaskJCIActivityTypes JCIActivityTypesc
        {
            get { return __JCIActivityTypesc; }
            set { SetField(ref __JCIActivityTypesc, value, "JCI_Activity_Types__c"); }
        }
        private System.String __NACCreatedByUserManagerNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Manager_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserManagerNamec
        {
            get { return __NACCreatedByUserManagerNamec; }
        }
        private System.String __NACCreatedByUserProfileNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Profile_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserProfileNamec
        {
            get { return __NACCreatedByUserProfileNamec; }
        }
        private PickTaskObservedUnobserved __ObservedUnobservedc;
        [JsonProperty(PropertyName = "Observed_Unobserved__c")]
        [EntityField(true)]
        public PickTaskObservedUnobserved ObservedUnobservedc
        {
            get { return __ObservedUnobservedc; }
            set { SetField(ref __ObservedUnobservedc, value, "Observed_Unobserved__c"); }
        }
        private System.String __TaskTemplateIdc;
        [JsonProperty(PropertyName = "TaskTemplateId__c")]
        [EntityField(true)]
        public System.String TaskTemplateIdc
        {
            get { return __TaskTemplateIdc; }
            set { SetField(ref __TaskTemplateIdc, value, "TaskTemplateId__c"); }
        }
        private System.String __NACCreatedByUserRoleNamec;
        [JsonProperty(PropertyName = "NAC_Created_By_User_Role_Name__c")]
        [EntityField(true)]
        public System.String NACCreatedByUserRoleNamec
        {
            get { return __NACCreatedByUserRoleNamec; }
        }
        private System.String __KeyIssuesc;
        [JsonProperty(PropertyName = "Key_Issues__c")]
        [EntityField(true)]
        public System.String KeyIssuesc
        {
            get { return __KeyIssuesc; }
            set { SetField(ref __KeyIssuesc, value, "Key_Issues__c"); }
        }
        private System.String __MainTopicc;
        [JsonProperty(PropertyName = "Main_Topic__c")]
        [EntityField(true)]
        public System.String MainTopicc
        {
            get { return __MainTopicc; }
            set { SetField(ref __MainTopicc, value, "Main_Topic__c"); }
        }
        private System.Boolean __PastDuec;
        [JsonProperty(PropertyName = "Past_Due__c")]
        [EntityField(false)]
        public System.Boolean PastDuec
        {
            get { return __PastDuec; }
        }
        private System.String __AACCSFCNTRCalledc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Called__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRCalledc
        {
            get { return __AACCSFCNTRCalledc; }
            set { SetField(ref __AACCSFCNTRCalledc, value, "AACC_SF_CNTR__Called__c"); }
        }
        private System.String __AACCSFCNTRCallerc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Caller__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRCallerc
        {
            get { return __AACCSFCNTRCallerc; }
            set { SetField(ref __AACCSFCNTRCallerc, value, "AACC_SF_CNTR__Caller__c"); }
        }
        private System.String __AACCSFCNTRQueuec;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__Queue__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRQueuec
        {
            get { return __AACCSFCNTRQueuec; }
            set { SetField(ref __AACCSFCNTRQueuec, value, "AACC_SF_CNTR__Queue__c"); }
        }
        private System.String __AACCSFCNTRUUIc;
        [JsonProperty(PropertyName = "AACC_SF_CNTR__UUI__c")]
        [EntityField(true)]
        public System.String AACCSFCNTRUUIc
        {
            get { return __AACCSFCNTRUUIc; }
            set { SetField(ref __AACCSFCNTRUUIc, value, "AACC_SF_CNTR__UUI__c"); }
        }
        private System.Double? __Attendedc;
        [JsonProperty(PropertyName = "Attended__c")]
        [EntityField(true)]
        public System.Double? Attendedc
        {
            get { return __Attendedc; }
            set { SetField(ref __Attendedc, value, "Attended__c"); }
        }
        private System.Double? __Invitedc;
        [JsonProperty(PropertyName = "Invited__c")]
        [EntityField(true)]
        public System.Double? Invitedc
        {
            get { return __Invitedc; }
            set { SetField(ref __Invitedc, value, "Invited__c"); }
        }
        private System.String __AACCCNTRCalledc;
        [JsonProperty(PropertyName = "AACC_CNTR__Called__c")]
        [EntityField(true)]
        public System.String AACCCNTRCalledc
        {
            get { return __AACCCNTRCalledc; }
            set { SetField(ref __AACCCNTRCalledc, value, "AACC_CNTR__Called__c"); }
        }
        private System.String __AACCCNTRCallerc;
        [JsonProperty(PropertyName = "AACC_CNTR__Caller__c")]
        [EntityField(true)]
        public System.String AACCCNTRCallerc
        {
            get { return __AACCCNTRCallerc; }
            set { SetField(ref __AACCCNTRCallerc, value, "AACC_CNTR__Caller__c"); }
        }
        private System.String __AACCCNTRQueuec;
        [JsonProperty(PropertyName = "AACC_CNTR__Queue__c")]
        [EntityField(true)]
        public System.String AACCCNTRQueuec
        {
            get { return __AACCCNTRQueuec; }
            set { SetField(ref __AACCCNTRQueuec, value, "AACC_CNTR__Queue__c"); }
        }
        private System.String __AACCCNTRUUIc;
        [JsonProperty(PropertyName = "AACC_CNTR__UUI__c")]
        [EntityField(true)]
        public System.String AACCCNTRUUIc
        {
            get { return __AACCCNTRUUIc; }
            set { SetField(ref __AACCCNTRUUIc, value, "AACC_CNTR__UUI__c"); }
        }
        private PickTaskEventTaskType __EventTaskTypec;
        [JsonProperty(PropertyName = "Event_Task_Type__c")]
        [EntityField(true)]
        public PickTaskEventTaskType EventTaskTypec
        {
            get { return __EventTaskTypec; }
            set { SetField(ref __EventTaskTypec, value, "Event_Task_Type__c"); }
        }
        private System.String __PreviousOwnerc;
        [JsonProperty(PropertyName = "Previous_Owner__c")]
        [EntityField(true)]
        public System.String PreviousOwnerc
        {
            get { return __PreviousOwnerc; }
            set { SetField(ref __PreviousOwnerc, value, "Previous_Owner__c"); }
        }
        private System.DateTime? __ClosedDatec;
        [JsonProperty(PropertyName = "Closed_Date__c")]
        [EntityField(true)]
        public System.DateTime? ClosedDatec
        {
            get { return __ClosedDatec; }
            set { SetField(ref __ClosedDatec, value, "Closed_Date__c"); }
        }
        private System.Boolean __KeyLeadingIndicatorc;
        [JsonProperty(PropertyName = "Key_Leading_Indicator__c")]
        [EntityField(false)]
        public System.Boolean KeyLeadingIndicatorc
        {
            get { return __KeyLeadingIndicatorc; }
            set { SetField(ref __KeyLeadingIndicatorc, value, "Key_Leading_Indicator__c"); }
        }
        private PickTaskCustomerPartnerType __CustomerPartnerTypec;
        [JsonProperty(PropertyName = "Customer_Partner_Type__c")]
        [EntityField(true)]
        public PickTaskCustomerPartnerType CustomerPartnerTypec
        {
            get { return __CustomerPartnerTypec; }
            set { SetField(ref __CustomerPartnerTypec, value, "Customer_Partner_Type__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RecurrenceActivityId")]
        public RelationShip<Task,Task> RecurringTasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TaskId")]
        public RelationShip<Task,TaskRelation> TaskRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TaskId")]
        public RelationShip<Task,TaskWhoRelation> TaskWhoRelations
        {
            get;set;
        }
    }
    [EntityName("TaskRelation")]
    public class TaskRelation : ISalesforceEntity
    {
    [JsonConstructor]
        private TaskRelation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TaskRelation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RelationId;
        [EntityField(false)]
        public System.String RelationId
        {
            get { return __RelationId; }
            set { SetField(ref __RelationId, value, "RelationId"); }
        }
        private System.String __TaskId;
        [EntityField(false)]
        public System.String TaskId
        {
            get { return __TaskId; }
            set { SetField(ref __TaskId, value, "TaskId"); }
        }
        private System.Boolean __IsWhat;
        [EntityField(false)]
        public System.Boolean IsWhat
        {
            get { return __IsWhat; }
            set { SetField(ref __IsWhat, value, "IsWhat"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("TaskStatus")]
    public class TaskStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private TaskStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TaskStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("TaskWhoRelation")]
    public class TaskWhoRelation : ISalesforceEntity
    {
    [JsonConstructor]
        private TaskWhoRelation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TaskWhoRelation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RelationId;
        [EntityField(true)]
        public System.String RelationId
        {
            get { return __RelationId; }
            set { SetField(ref __RelationId, value, "RelationId"); }
        }
        private System.String __TaskId;
        [EntityField(true)]
        public System.String TaskId
        {
            get { return __TaskId; }
            set { SetField(ref __TaskId, value, "TaskId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Type;
        [EntityField(true)]
        public System.String Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
    }
    [EntityName("User")]
    public class User : ISalesforceEntity
    {
    [JsonConstructor]
        private User(string hack)
        {
            trackPropertyUpdates = false;
        }

        public User()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Username;
        [EntityField(false)]
        public System.String Username
        {
            get { return __Username; }
            set { SetField(ref __Username, value, "Username"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __CompanyName;
        [EntityField(true)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __Division;
        [EntityField(true)]
        public System.String Division
        {
            get { return __Division; }
            set { SetField(ref __Division, value, "Division"); }
        }
        private System.String __Department;
        [EntityField(true)]
        public System.String Department
        {
            get { return __Department; }
            set { SetField(ref __Department, value, "Department"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private PickUserStateCode __StateCode;
        [EntityField(true)]
        public PickUserStateCode StateCode
        {
            get { return __StateCode; }
            set { SetField(ref __StateCode, value, "StateCode"); }
        }
        private PickUserCountryCode __CountryCode;
        [EntityField(true)]
        public PickUserCountryCode CountryCode
        {
            get { return __CountryCode; }
            set { SetField(ref __CountryCode, value, "CountryCode"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Email;
        [EntityField(false)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.Boolean __EmailPreferencesAutoBcc;
        [EntityField(false)]
        public System.Boolean EmailPreferencesAutoBcc
        {
            get { return __EmailPreferencesAutoBcc; }
            set { SetField(ref __EmailPreferencesAutoBcc, value, "EmailPreferencesAutoBcc"); }
        }
        private System.Boolean __EmailPreferencesAutoBccStayInTouch;
        [EntityField(false)]
        public System.Boolean EmailPreferencesAutoBccStayInTouch
        {
            get { return __EmailPreferencesAutoBccStayInTouch; }
            set { SetField(ref __EmailPreferencesAutoBccStayInTouch, value, "EmailPreferencesAutoBccStayInTouch"); }
        }
        private System.Boolean __EmailPreferencesStayInTouchReminder;
        [EntityField(false)]
        public System.Boolean EmailPreferencesStayInTouchReminder
        {
            get { return __EmailPreferencesStayInTouchReminder; }
            set { SetField(ref __EmailPreferencesStayInTouchReminder, value, "EmailPreferencesStayInTouchReminder"); }
        }
        private System.String __SenderEmail;
        [EntityField(true)]
        public System.String SenderEmail
        {
            get { return __SenderEmail; }
            set { SetField(ref __SenderEmail, value, "SenderEmail"); }
        }
        private System.String __SenderName;
        [EntityField(true)]
        public System.String SenderName
        {
            get { return __SenderName; }
            set { SetField(ref __SenderName, value, "SenderName"); }
        }
        private System.String __Signature;
        [EntityField(true)]
        public System.String Signature
        {
            get { return __Signature; }
            set { SetField(ref __Signature, value, "Signature"); }
        }
        private System.String __StayInTouchSubject;
        [EntityField(true)]
        public System.String StayInTouchSubject
        {
            get { return __StayInTouchSubject; }
            set { SetField(ref __StayInTouchSubject, value, "StayInTouchSubject"); }
        }
        private System.String __StayInTouchSignature;
        [EntityField(true)]
        public System.String StayInTouchSignature
        {
            get { return __StayInTouchSignature; }
            set { SetField(ref __StayInTouchSignature, value, "StayInTouchSignature"); }
        }
        private System.String __StayInTouchNote;
        [EntityField(true)]
        public System.String StayInTouchNote
        {
            get { return __StayInTouchNote; }
            set { SetField(ref __StayInTouchNote, value, "StayInTouchNote"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __Alias;
        [EntityField(false)]
        public System.String Alias
        {
            get { return __Alias; }
            set { SetField(ref __Alias, value, "Alias"); }
        }
        private System.String __CommunityNickname;
        [EntityField(false)]
        public System.String CommunityNickname
        {
            get { return __CommunityNickname; }
            set { SetField(ref __CommunityNickname, value, "CommunityNickname"); }
        }
        private System.Boolean __IsBadged;
        [EntityField(false)]
        public System.Boolean IsBadged
        {
            get { return __IsBadged; }
            set { SetField(ref __IsBadged, value, "IsBadged"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private PickUserTimeZoneSidKey __TimeZoneSidKey;
        [EntityField(false)]
        public PickUserTimeZoneSidKey TimeZoneSidKey
        {
            get { return __TimeZoneSidKey; }
            set { SetField(ref __TimeZoneSidKey, value, "TimeZoneSidKey"); }
        }
        private System.String __UserRoleId;
        [EntityField(true)]
        public System.String UserRoleId
        {
            get { return __UserRoleId; }
            set { SetField(ref __UserRoleId, value, "UserRoleId"); }
        }
        private PickUserLocaleSidKey __LocaleSidKey;
        [EntityField(false)]
        public PickUserLocaleSidKey LocaleSidKey
        {
            get { return __LocaleSidKey; }
            set { SetField(ref __LocaleSidKey, value, "LocaleSidKey"); }
        }
        private System.Boolean __ReceivesInfoEmails;
        [EntityField(false)]
        public System.Boolean ReceivesInfoEmails
        {
            get { return __ReceivesInfoEmails; }
            set { SetField(ref __ReceivesInfoEmails, value, "ReceivesInfoEmails"); }
        }
        private System.Boolean __ReceivesAdminInfoEmails;
        [EntityField(false)]
        public System.Boolean ReceivesAdminInfoEmails
        {
            get { return __ReceivesAdminInfoEmails; }
            set { SetField(ref __ReceivesAdminInfoEmails, value, "ReceivesAdminInfoEmails"); }
        }
        private PickUserEmailEncodingKey __EmailEncodingKey;
        [EntityField(false)]
        public PickUserEmailEncodingKey EmailEncodingKey
        {
            get { return __EmailEncodingKey; }
            set { SetField(ref __EmailEncodingKey, value, "EmailEncodingKey"); }
        }
        private PickUserDefaultCurrencyIsoCode __DefaultCurrencyIsoCode;
        [EntityField(true)]
        public PickUserDefaultCurrencyIsoCode DefaultCurrencyIsoCode
        {
            get { return __DefaultCurrencyIsoCode; }
            set { SetField(ref __DefaultCurrencyIsoCode, value, "DefaultCurrencyIsoCode"); }
        }
        private PickUserCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickUserCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.String __ProfileId;
        [EntityField(false)]
        public System.String ProfileId
        {
            get { return __ProfileId; }
            set { SetField(ref __ProfileId, value, "ProfileId"); }
        }
        private PickUserUserType __UserType;
        [EntityField(true)]
        public PickUserUserType UserType
        {
            get { return __UserType; }
            set { SetField(ref __UserType, value, "UserType"); }
        }
        private PickUserLanguageLocaleKey __LanguageLocaleKey;
        [EntityField(false)]
        public PickUserLanguageLocaleKey LanguageLocaleKey
        {
            get { return __LanguageLocaleKey; }
            set { SetField(ref __LanguageLocaleKey, value, "LanguageLocaleKey"); }
        }
        private System.String __EmployeeNumber;
        [EntityField(true)]
        public System.String EmployeeNumber
        {
            get { return __EmployeeNumber; }
            set { SetField(ref __EmployeeNumber, value, "EmployeeNumber"); }
        }
        private System.String __DelegatedApproverId;
        [EntityField(true)]
        public System.String DelegatedApproverId
        {
            get { return __DelegatedApproverId; }
            set { SetField(ref __DelegatedApproverId, value, "DelegatedApproverId"); }
        }
        private System.String __ManagerId;
        [EntityField(true)]
        public System.String ManagerId
        {
            get { return __ManagerId; }
            set { SetField(ref __ManagerId, value, "ManagerId"); }
        }
        private System.DateTime? __LastLoginDate;
        [EntityField(true)]
        public System.DateTime? LastLoginDate
        {
            get { return __LastLoginDate; }
            set { SetField(ref __LastLoginDate, value, "LastLoginDate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __OfflineTrialExpirationDate;
        [EntityField(true)]
        public System.DateTime? OfflineTrialExpirationDate
        {
            get { return __OfflineTrialExpirationDate; }
            set { SetField(ref __OfflineTrialExpirationDate, value, "OfflineTrialExpirationDate"); }
        }
        private System.DateTime? __OfflinePdaTrialExpirationDate;
        [EntityField(true)]
        public System.DateTime? OfflinePdaTrialExpirationDate
        {
            get { return __OfflinePdaTrialExpirationDate; }
            set { SetField(ref __OfflinePdaTrialExpirationDate, value, "OfflinePdaTrialExpirationDate"); }
        }
        private System.Boolean __UserPermissionsMarketingUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsMarketingUser
        {
            get { return __UserPermissionsMarketingUser; }
            set { SetField(ref __UserPermissionsMarketingUser, value, "UserPermissionsMarketingUser"); }
        }
        private System.Boolean __UserPermissionsOfflineUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsOfflineUser
        {
            get { return __UserPermissionsOfflineUser; }
            set { SetField(ref __UserPermissionsOfflineUser, value, "UserPermissionsOfflineUser"); }
        }
        private System.Boolean __UserPermissionsAvantgoUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsAvantgoUser
        {
            get { return __UserPermissionsAvantgoUser; }
            set { SetField(ref __UserPermissionsAvantgoUser, value, "UserPermissionsAvantgoUser"); }
        }
        private System.Boolean __UserPermissionsCallCenterAutoLogin;
        [EntityField(false)]
        public System.Boolean UserPermissionsCallCenterAutoLogin
        {
            get { return __UserPermissionsCallCenterAutoLogin; }
            set { SetField(ref __UserPermissionsCallCenterAutoLogin, value, "UserPermissionsCallCenterAutoLogin"); }
        }
        private System.Boolean __UserPermissionsMobileUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsMobileUser
        {
            get { return __UserPermissionsMobileUser; }
            set { SetField(ref __UserPermissionsMobileUser, value, "UserPermissionsMobileUser"); }
        }
        private System.Boolean __UserPermissionsSFContentUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsSFContentUser
        {
            get { return __UserPermissionsSFContentUser; }
            set { SetField(ref __UserPermissionsSFContentUser, value, "UserPermissionsSFContentUser"); }
        }
        private System.Boolean __UserPermissionsKnowledgeUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsKnowledgeUser
        {
            get { return __UserPermissionsKnowledgeUser; }
            set { SetField(ref __UserPermissionsKnowledgeUser, value, "UserPermissionsKnowledgeUser"); }
        }
        private System.Boolean __UserPermissionsInteractionUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsInteractionUser
        {
            get { return __UserPermissionsInteractionUser; }
            set { SetField(ref __UserPermissionsInteractionUser, value, "UserPermissionsInteractionUser"); }
        }
        private System.Boolean __UserPermissionsSupportUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsSupportUser
        {
            get { return __UserPermissionsSupportUser; }
            set { SetField(ref __UserPermissionsSupportUser, value, "UserPermissionsSupportUser"); }
        }
        private System.Boolean __UserPermissionsJigsawProspectingUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsJigsawProspectingUser
        {
            get { return __UserPermissionsJigsawProspectingUser; }
            set { SetField(ref __UserPermissionsJigsawProspectingUser, value, "UserPermissionsJigsawProspectingUser"); }
        }
        private System.Boolean __UserPermissionsLiveAgentUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsLiveAgentUser
        {
            get { return __UserPermissionsLiveAgentUser; }
            set { SetField(ref __UserPermissionsLiveAgentUser, value, "UserPermissionsLiveAgentUser"); }
        }
        private System.Boolean __UserPermissionsChatterAnswersUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsChatterAnswersUser
        {
            get { return __UserPermissionsChatterAnswersUser; }
            set { SetField(ref __UserPermissionsChatterAnswersUser, value, "UserPermissionsChatterAnswersUser"); }
        }
        private System.Boolean __ForecastEnabled;
        [EntityField(false)]
        public System.Boolean ForecastEnabled
        {
            get { return __ForecastEnabled; }
            set { SetField(ref __ForecastEnabled, value, "ForecastEnabled"); }
        }
        private System.Boolean __UserPreferencesActivityRemindersPopup;
        [EntityField(false)]
        public System.Boolean UserPreferencesActivityRemindersPopup
        {
            get { return __UserPreferencesActivityRemindersPopup; }
            set { SetField(ref __UserPreferencesActivityRemindersPopup, value, "UserPreferencesActivityRemindersPopup"); }
        }
        private System.Boolean __UserPreferencesEventRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesEventRemindersCheckboxDefault
        {
            get { return __UserPreferencesEventRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesEventRemindersCheckboxDefault, value, "UserPreferencesEventRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesTaskRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesTaskRemindersCheckboxDefault
        {
            get { return __UserPreferencesTaskRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesTaskRemindersCheckboxDefault, value, "UserPreferencesTaskRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesReminderSoundOff;
        [EntityField(false)]
        public System.Boolean UserPreferencesReminderSoundOff
        {
            get { return __UserPreferencesReminderSoundOff; }
            set { SetField(ref __UserPreferencesReminderSoundOff, value, "UserPreferencesReminderSoundOff"); }
        }
        private System.Boolean __UserPreferencesDisableAllFeedsEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableAllFeedsEmail
        {
            get { return __UserPreferencesDisableAllFeedsEmail; }
            set { SetField(ref __UserPreferencesDisableAllFeedsEmail, value, "UserPreferencesDisableAllFeedsEmail"); }
        }
        private System.Boolean __UserPreferencesDisableFollowersEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFollowersEmail
        {
            get { return __UserPreferencesDisableFollowersEmail; }
            set { SetField(ref __UserPreferencesDisableFollowersEmail, value, "UserPreferencesDisableFollowersEmail"); }
        }
        private System.Boolean __UserPreferencesDisableProfilePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableProfilePostEmail
        {
            get { return __UserPreferencesDisableProfilePostEmail; }
            set { SetField(ref __UserPreferencesDisableProfilePostEmail, value, "UserPreferencesDisableProfilePostEmail"); }
        }
        private System.Boolean __UserPreferencesDisableChangeCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableChangeCommentEmail
        {
            get { return __UserPreferencesDisableChangeCommentEmail; }
            set { SetField(ref __UserPreferencesDisableChangeCommentEmail, value, "UserPreferencesDisableChangeCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLaterCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLaterCommentEmail
        {
            get { return __UserPreferencesDisableLaterCommentEmail; }
            set { SetField(ref __UserPreferencesDisableLaterCommentEmail, value, "UserPreferencesDisableLaterCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisProfPostCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisProfPostCommentEmail
        {
            get { return __UserPreferencesDisProfPostCommentEmail; }
            set { SetField(ref __UserPreferencesDisProfPostCommentEmail, value, "UserPreferencesDisProfPostCommentEmail"); }
        }
        private System.Boolean __UserPreferencesContentNoEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentNoEmail
        {
            get { return __UserPreferencesContentNoEmail; }
            set { SetField(ref __UserPreferencesContentNoEmail, value, "UserPreferencesContentNoEmail"); }
        }
        private System.Boolean __UserPreferencesContentEmailAsAndWhen;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentEmailAsAndWhen
        {
            get { return __UserPreferencesContentEmailAsAndWhen; }
            set { SetField(ref __UserPreferencesContentEmailAsAndWhen, value, "UserPreferencesContentEmailAsAndWhen"); }
        }
        private System.Boolean __UserPreferencesApexPagesDeveloperMode;
        [EntityField(false)]
        public System.Boolean UserPreferencesApexPagesDeveloperMode
        {
            get { return __UserPreferencesApexPagesDeveloperMode; }
            set { SetField(ref __UserPreferencesApexPagesDeveloperMode, value, "UserPreferencesApexPagesDeveloperMode"); }
        }
        private System.Boolean __UserPreferencesHideCSNGetChatterMobileTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNGetChatterMobileTask
        {
            get { return __UserPreferencesHideCSNGetChatterMobileTask; }
            set { SetField(ref __UserPreferencesHideCSNGetChatterMobileTask, value, "UserPreferencesHideCSNGetChatterMobileTask"); }
        }
        private System.Boolean __UserPreferencesDisableMentionsPostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMentionsPostEmail
        {
            get { return __UserPreferencesDisableMentionsPostEmail; }
            set { SetField(ref __UserPreferencesDisableMentionsPostEmail, value, "UserPreferencesDisableMentionsPostEmail"); }
        }
        private System.Boolean __UserPreferencesDisMentionsCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisMentionsCommentEmail
        {
            get { return __UserPreferencesDisMentionsCommentEmail; }
            set { SetField(ref __UserPreferencesDisMentionsCommentEmail, value, "UserPreferencesDisMentionsCommentEmail"); }
        }
        private System.Boolean __UserPreferencesHideCSNDesktopTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNDesktopTask
        {
            get { return __UserPreferencesHideCSNDesktopTask; }
            set { SetField(ref __UserPreferencesHideCSNDesktopTask, value, "UserPreferencesHideCSNDesktopTask"); }
        }
        private System.Boolean __UserPreferencesHideChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideChatterOnboardingSplash
        {
            get { return __UserPreferencesHideChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideChatterOnboardingSplash, value, "UserPreferencesHideChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesHideSecondChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideSecondChatterOnboardingSplash
        {
            get { return __UserPreferencesHideSecondChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideSecondChatterOnboardingSplash, value, "UserPreferencesHideSecondChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesDisCommentAfterLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisCommentAfterLikeEmail
        {
            get { return __UserPreferencesDisCommentAfterLikeEmail; }
            set { SetField(ref __UserPreferencesDisCommentAfterLikeEmail, value, "UserPreferencesDisCommentAfterLikeEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLikeEmail
        {
            get { return __UserPreferencesDisableLikeEmail; }
            set { SetField(ref __UserPreferencesDisableLikeEmail, value, "UserPreferencesDisableLikeEmail"); }
        }
        private System.Boolean __UserPreferencesSortFeedByComment;
        [EntityField(false)]
        public System.Boolean UserPreferencesSortFeedByComment
        {
            get { return __UserPreferencesSortFeedByComment; }
            set { SetField(ref __UserPreferencesSortFeedByComment, value, "UserPreferencesSortFeedByComment"); }
        }
        private System.Boolean __UserPreferencesDisableMessageEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMessageEmail
        {
            get { return __UserPreferencesDisableMessageEmail; }
            set { SetField(ref __UserPreferencesDisableMessageEmail, value, "UserPreferencesDisableMessageEmail"); }
        }
        private System.Boolean __UserPreferencesJigsawListUser;
        [EntityField(false)]
        public System.Boolean UserPreferencesJigsawListUser
        {
            get { return __UserPreferencesJigsawListUser; }
            set { SetField(ref __UserPreferencesJigsawListUser, value, "UserPreferencesJigsawListUser"); }
        }
        private System.Boolean __UserPreferencesDisableBookmarkEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableBookmarkEmail
        {
            get { return __UserPreferencesDisableBookmarkEmail; }
            set { SetField(ref __UserPreferencesDisableBookmarkEmail, value, "UserPreferencesDisableBookmarkEmail"); }
        }
        private System.Boolean __UserPreferencesDisableSharePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableSharePostEmail
        {
            get { return __UserPreferencesDisableSharePostEmail; }
            set { SetField(ref __UserPreferencesDisableSharePostEmail, value, "UserPreferencesDisableSharePostEmail"); }
        }
        private System.Boolean __UserPreferencesEnableAutoSubForFeeds;
        [EntityField(false)]
        public System.Boolean UserPreferencesEnableAutoSubForFeeds
        {
            get { return __UserPreferencesEnableAutoSubForFeeds; }
            set { SetField(ref __UserPreferencesEnableAutoSubForFeeds, value, "UserPreferencesEnableAutoSubForFeeds"); }
        }
        private System.Boolean __UserPreferencesDisableFileShareNotificationsForApi;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFileShareNotificationsForApi
        {
            get { return __UserPreferencesDisableFileShareNotificationsForApi; }
            set { SetField(ref __UserPreferencesDisableFileShareNotificationsForApi, value, "UserPreferencesDisableFileShareNotificationsForApi"); }
        }
        private System.Boolean __UserPreferencesShowTitleToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToExternalUsers
        {
            get { return __UserPreferencesShowTitleToExternalUsers; }
            set { SetField(ref __UserPreferencesShowTitleToExternalUsers, value, "UserPreferencesShowTitleToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowManagerToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowManagerToExternalUsers
        {
            get { return __UserPreferencesShowManagerToExternalUsers; }
            set { SetField(ref __UserPreferencesShowManagerToExternalUsers, value, "UserPreferencesShowManagerToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowEmailToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowEmailToExternalUsers
        {
            get { return __UserPreferencesShowEmailToExternalUsers; }
            set { SetField(ref __UserPreferencesShowEmailToExternalUsers, value, "UserPreferencesShowEmailToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowWorkPhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowWorkPhoneToExternalUsers
        {
            get { return __UserPreferencesShowWorkPhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowWorkPhoneToExternalUsers, value, "UserPreferencesShowWorkPhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowMobilePhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowMobilePhoneToExternalUsers
        {
            get { return __UserPreferencesShowMobilePhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowMobilePhoneToExternalUsers, value, "UserPreferencesShowMobilePhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowFaxToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowFaxToExternalUsers
        {
            get { return __UserPreferencesShowFaxToExternalUsers; }
            set { SetField(ref __UserPreferencesShowFaxToExternalUsers, value, "UserPreferencesShowFaxToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStreetAddressToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStreetAddressToExternalUsers
        {
            get { return __UserPreferencesShowStreetAddressToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStreetAddressToExternalUsers, value, "UserPreferencesShowStreetAddressToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToExternalUsers
        {
            get { return __UserPreferencesShowCityToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCityToExternalUsers, value, "UserPreferencesShowCityToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToExternalUsers
        {
            get { return __UserPreferencesShowStateToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStateToExternalUsers, value, "UserPreferencesShowStateToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToExternalUsers
        {
            get { return __UserPreferencesShowPostalCodeToExternalUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToExternalUsers, value, "UserPreferencesShowPostalCodeToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToExternalUsers
        {
            get { return __UserPreferencesShowCountryToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCountryToExternalUsers, value, "UserPreferencesShowCountryToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowProfilePicToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowProfilePicToGuestUsers
        {
            get { return __UserPreferencesShowProfilePicToGuestUsers; }
            set { SetField(ref __UserPreferencesShowProfilePicToGuestUsers, value, "UserPreferencesShowProfilePicToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowTitleToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToGuestUsers
        {
            get { return __UserPreferencesShowTitleToGuestUsers; }
            set { SetField(ref __UserPreferencesShowTitleToGuestUsers, value, "UserPreferencesShowTitleToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToGuestUsers
        {
            get { return __UserPreferencesShowCityToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCityToGuestUsers, value, "UserPreferencesShowCityToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToGuestUsers
        {
            get { return __UserPreferencesShowStateToGuestUsers; }
            set { SetField(ref __UserPreferencesShowStateToGuestUsers, value, "UserPreferencesShowStateToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToGuestUsers
        {
            get { return __UserPreferencesShowPostalCodeToGuestUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToGuestUsers, value, "UserPreferencesShowPostalCodeToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToGuestUsers
        {
            get { return __UserPreferencesShowCountryToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCountryToGuestUsers, value, "UserPreferencesShowCountryToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesHideS1BrowserUI;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideS1BrowserUI
        {
            get { return __UserPreferencesHideS1BrowserUI; }
            set { SetField(ref __UserPreferencesHideS1BrowserUI, value, "UserPreferencesHideS1BrowserUI"); }
        }
        private System.Boolean __UserPreferencesDisableEndorsementEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableEndorsementEmail
        {
            get { return __UserPreferencesDisableEndorsementEmail; }
            set { SetField(ref __UserPreferencesDisableEndorsementEmail, value, "UserPreferencesDisableEndorsementEmail"); }
        }
        private System.Boolean __UserPreferencesLightningExperiencePreferred;
        [EntityField(false)]
        public System.Boolean UserPreferencesLightningExperiencePreferred
        {
            get { return __UserPreferencesLightningExperiencePreferred; }
            set { SetField(ref __UserPreferencesLightningExperiencePreferred, value, "UserPreferencesLightningExperiencePreferred"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __CallCenterId;
        [EntityField(true)]
        public System.String CallCenterId
        {
            get { return __CallCenterId; }
            set { SetField(ref __CallCenterId, value, "CallCenterId"); }
        }
        private System.String __Extension;
        [EntityField(true)]
        public System.String Extension
        {
            get { return __Extension; }
            set { SetField(ref __Extension, value, "Extension"); }
        }
        private PickUserPortalRole __PortalRole;
        [EntityField(true)]
        public PickUserPortalRole PortalRole
        {
            get { return __PortalRole; }
            set { SetField(ref __PortalRole, value, "PortalRole"); }
        }
        private System.Boolean __IsPortalEnabled;
        [EntityField(false)]
        public System.Boolean IsPortalEnabled
        {
            get { return __IsPortalEnabled; }
            set { SetField(ref __IsPortalEnabled, value, "IsPortalEnabled"); }
        }
        private System.String __FederationIdentifier;
        [EntityField(true)]
        public System.String FederationIdentifier
        {
            get { return __FederationIdentifier; }
            set { SetField(ref __FederationIdentifier, value, "FederationIdentifier"); }
        }
        private System.String __AboutMe;
        [EntityField(true)]
        public System.String AboutMe
        {
            get { return __AboutMe; }
            set { SetField(ref __AboutMe, value, "AboutMe"); }
        }
        private System.String __FullPhotoUrl;
        [EntityField(true)]
        public System.String FullPhotoUrl
        {
            get { return __FullPhotoUrl; }
            set { SetField(ref __FullPhotoUrl, value, "FullPhotoUrl"); }
        }
        private System.String __SmallPhotoUrl;
        [EntityField(true)]
        public System.String SmallPhotoUrl
        {
            get { return __SmallPhotoUrl; }
            set { SetField(ref __SmallPhotoUrl, value, "SmallPhotoUrl"); }
        }
        private PickUserDigestFrequency __DigestFrequency;
        [EntityField(false)]
        public PickUserDigestFrequency DigestFrequency
        {
            get { return __DigestFrequency; }
            set { SetField(ref __DigestFrequency, value, "DigestFrequency"); }
        }
        private PickUserDefaultGroupNotificationFrequency __DefaultGroupNotificationFrequency;
        [EntityField(false)]
        public PickUserDefaultGroupNotificationFrequency DefaultGroupNotificationFrequency
        {
            get { return __DefaultGroupNotificationFrequency; }
            set { SetField(ref __DefaultGroupNotificationFrequency, value, "DefaultGroupNotificationFrequency"); }
        }
        private System.Int32? __JigsawImportLimitOverride;
        [EntityField(true)]
        public System.Int32? JigsawImportLimitOverride
        {
            get { return __JigsawImportLimitOverride; }
            set { SetField(ref __JigsawImportLimitOverride, value, "JigsawImportLimitOverride"); }
        }
        private System.Boolean __IsPrmSuperUser;
        [EntityField(false)]
        public System.Boolean IsPrmSuperUser
        {
            get { return __IsPrmSuperUser; }
            set { SetField(ref __IsPrmSuperUser, value, "IsPrmSuperUser"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private PickUserBranchID __BranchIDc;
        [JsonProperty(PropertyName = "Branch_ID__c")]
        [EntityField(true)]
        public PickUserBranchID BranchIDc
        {
            get { return __BranchIDc; }
            set { SetField(ref __BranchIDc, value, "Branch_ID__c"); }
        }
        private PickUserIndependentDistributorID __IndependentDistributorIDc;
        [JsonProperty(PropertyName = "Independent_Distributor_ID__c")]
        [EntityField(true)]
        public PickUserIndependentDistributorID IndependentDistributorIDc
        {
            get { return __IndependentDistributorIDc; }
            set { SetField(ref __IndependentDistributorIDc, value, "Independent_Distributor_ID__c"); }
        }
        private System.Boolean __OwnedAccountc;
        [JsonProperty(PropertyName = "OwnedAccount__c")]
        [EntityField(false)]
        public System.Boolean OwnedAccountc
        {
            get { return __OwnedAccountc; }
            set { SetField(ref __OwnedAccountc, value, "OwnedAccount__c"); }
        }
        private System.Boolean __OwnedOpportunitiesc;
        [JsonProperty(PropertyName = "OwnedOpportunities__c")]
        [EntityField(false)]
        public System.Boolean OwnedOpportunitiesc
        {
            get { return __OwnedOpportunitiesc; }
            set { SetField(ref __OwnedOpportunitiesc, value, "OwnedOpportunities__c"); }
        }
        private System.String __SalesManagerc;
        [JsonProperty(PropertyName = "Sales_Manager__c")]
        [EntityField(true)]
        public System.String SalesManagerc
        {
            get { return __SalesManagerc; }
            set { SetField(ref __SalesManagerc, value, "Sales_Manager__c"); }
        }
        private System.String __USTIDc;
        [JsonProperty(PropertyName = "USTID__c")]
        [EntityField(true)]
        public System.String USTIDc
        {
            get { return __USTIDc; }
            set { SetField(ref __USTIDc, value, "USTID__c"); }
        }
        private PickUserUserTitle __UserTitlec;
        [JsonProperty(PropertyName = "UserTitle__c")]
        [EntityField(true)]
        public PickUserUserTitle UserTitlec
        {
            get { return __UserTitlec; }
            set { SetField(ref __UserTitlec, value, "UserTitle__c"); }
        }
        private System.Boolean __VisibleAccountc;
        [JsonProperty(PropertyName = "VisibleAccount__c")]
        [EntityField(false)]
        public System.Boolean VisibleAccountc
        {
            get { return __VisibleAccountc; }
            set { SetField(ref __VisibleAccountc, value, "VisibleAccount__c"); }
        }
        private System.Boolean __VisibleOpportunitiesc;
        [JsonProperty(PropertyName = "VisibleOpportunities__c")]
        [EntityField(false)]
        public System.Boolean VisibleOpportunitiesc
        {
            get { return __VisibleOpportunitiesc; }
            set { SetField(ref __VisibleOpportunitiesc, value, "VisibleOpportunities__c"); }
        }
        private System.Double? __Dayssincelastloginc;
        [JsonProperty(PropertyName = "Days_since_last_login__c")]
        [EntityField(true)]
        public System.Double? Dayssincelastloginc
        {
            get { return __Dayssincelastloginc; }
        }
        private PickUserDBRegion __DBRegionc;
        [JsonProperty(PropertyName = "DB_Region__c")]
        [EntityField(true)]
        public PickUserDBRegion DBRegionc
        {
            get { return __DBRegionc; }
            set { SetField(ref __DBRegionc, value, "DB_Region__c"); }
        }
        private System.Boolean __piCanViewNotAssignedProspectsc;
        [JsonProperty(PropertyName = "pi__Can_View_Not_Assigned_Prospects__c")]
        [EntityField(false)]
        public System.Boolean piCanViewNotAssignedProspectsc
        {
            get { return __piCanViewNotAssignedProspectsc; }
            set { SetField(ref __piCanViewNotAssignedProspectsc, value, "pi__Can_View_Not_Assigned_Prospects__c"); }
        }
        private System.String __piPardotApiKeyc;
        [JsonProperty(PropertyName = "pi__Pardot_Api_Key__c")]
        [EntityField(true)]
        public System.String piPardotApiKeyc
        {
            get { return __piPardotApiKeyc; }
            set { SetField(ref __piPardotApiKeyc, value, "pi__Pardot_Api_Key__c"); }
        }
        private System.String __piPardotUserIdc;
        [JsonProperty(PropertyName = "pi__Pardot_User_Id__c")]
        [EntityField(true)]
        public System.String piPardotUserIdc
        {
            get { return __piPardotUserIdc; }
            set { SetField(ref __piPardotUserIdc, value, "pi__Pardot_User_Id__c"); }
        }
        private System.String __piPardotUserKeyc;
        [JsonProperty(PropertyName = "pi__Pardot_User_Key__c")]
        [EntityField(true)]
        public System.String piPardotUserKeyc
        {
            get { return __piPardotUserKeyc; }
            set { SetField(ref __piPardotUserKeyc, value, "pi__Pardot_User_Key__c"); }
        }
        private System.String __piPardotUserRolec;
        [JsonProperty(PropertyName = "pi__Pardot_User_Role__c")]
        [EntityField(true)]
        public System.String piPardotUserRolec
        {
            get { return __piPardotUserRolec; }
            set { SetField(ref __piPardotUserRolec, value, "pi__Pardot_User_Role__c"); }
        }
        private System.Boolean __ManageDataLoadsc;
        [JsonProperty(PropertyName = "Manage_Data_Loads__c")]
        [EntityField(false)]
        public System.Boolean ManageDataLoadsc
        {
            get { return __ManageDataLoadsc; }
            set { SetField(ref __ManageDataLoadsc, value, "Manage_Data_Loads__c"); }
        }
        private System.Boolean __HNTemporarilyInactivec;
        [JsonProperty(PropertyName = "HN_Temporarily_Inactive__c")]
        [EntityField(false)]
        public System.Boolean HNTemporarilyInactivec
        {
            get { return __HNTemporarilyInactivec; }
            set { SetField(ref __HNTemporarilyInactivec, value, "HN_Temporarily_Inactive__c"); }
        }
        private System.DateTime? __HNWarnedforInactivityc;
        [JsonProperty(PropertyName = "HN_Warned_for_Inactivity__c")]
        [EntityField(true)]
        public System.DateTime? HNWarnedforInactivityc
        {
            get { return __HNWarnedforInactivityc; }
            set { SetField(ref __HNWarnedforInactivityc, value, "HN_Warned_for_Inactivity__c"); }
        }
        private System.DateTime? __TermsConditionsAcceptedDatec;
        [JsonProperty(PropertyName = "Terms_Conditions_Accepted_Date__c")]
        [EntityField(true)]
        public System.DateTime? TermsConditionsAcceptedDatec
        {
            get { return __TermsConditionsAcceptedDatec; }
            set { SetField(ref __TermsConditionsAcceptedDatec, value, "Terms_Conditions_Accepted_Date__c"); }
        }
        private System.Double? __UserUniquec;
        [JsonProperty(PropertyName = "User_Unique__c")]
        [EntityField(true)]
        public System.Double? UserUniquec
        {
            get { return __UserUniquec; }
        }
        [JsonIgnore]
        [ReferencedByField("Change_Owner__c")]
        public RelationShip<User,Account> Accounts1__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Executive_Sponsor__c")]
        public RelationShip<User,Account> Accounts2__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("NAC_Account_Owner__c")]
        public RelationShip<User,Account> Accounts3__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Previous_Owner__c")]
        public RelationShip<User,Account> Accounts4__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Team_Member__c")]
        public RelationShip<User,AccountTeam> Account_Teams__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand_VP__c")]
        public RelationShip<User,Brand> Brands__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand_VP__c")]
        public RelationShip<User,Case> Cases__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Channel_VP__c")]
        public RelationShip<User,Case> Channel_VP__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Previous_Owner__c")]
        public RelationShip<User,Case> Cases1__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RSM__c")]
        public RelationShip<User,Case> RSM__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Account_Team_Members_to_be_added__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_AccountTeamMembersAdded__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand_Leader__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_Brand_Leader__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Brand_VP__c")]
        public RelationShip<User,ChannelChange> Channel_Changes__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Compliance_Rep__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_Compliance_Rep__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Regional_VP__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_Regional_VP__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SSNA_Regional_Leader__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_SSNA_Regional_Leaders__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SSNA_Rep__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_SSNA_Rep__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Sales_Ops__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_Sales_Ops__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("VPGM__c")]
        public RelationShip<User,ChannelChange> Channel_Changes_Legal_Rep__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Previous_Owner__c")]
        public RelationShip<User,Contact> Contacts1__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Previous_Owner__c")]
        public RelationShip<User,Opportunity> Opportunities3__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("User__c")]
        public RelationShip<User,Opportunity> Opportunities__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("VRF_RSM__c")]
        public RelationShip<User,Opportunity> Opportunities2__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SplitOwnerId")]
        public RelationShip<User,OpportunitySplit> OpportunitySplits
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("DelegatedApproverId")]
        public RelationShip<User,User> DelegatedUsers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ManagerId")]
        public RelationShip<User,User> ManagedUsers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Sales_Manager__c")]
        public RelationShip<User,User> Sales_Manager__r
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("UserId")]
        public RelationShip<User,UserTeamMember> UserTeams
        {
            get;set;
        }
    }
    [EntityName("UserProfile")]
    public class UserProfile : ISalesforceEntity
    {
    [JsonConstructor]
        private UserProfile(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserProfile()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __ManagerId;
        [EntityField(true)]
        public System.String ManagerId
        {
            get { return __ManagerId; }
            set { SetField(ref __ManagerId, value, "ManagerId"); }
        }
        private System.String __CompanyName;
        [EntityField(true)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __AboutMe;
        [EntityField(true)]
        public System.String AboutMe
        {
            get { return __AboutMe; }
            set { SetField(ref __AboutMe, value, "AboutMe"); }
        }
        private System.String __Email;
        [EntityField(false)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private PickUserProfileStateCode __StateCode;
        [EntityField(true)]
        public PickUserProfileStateCode StateCode
        {
            get { return __StateCode; }
            set { SetField(ref __StateCode, value, "StateCode"); }
        }
        private PickUserProfileCountryCode __CountryCode;
        [EntityField(true)]
        public PickUserProfileCountryCode CountryCode
        {
            get { return __CountryCode; }
            set { SetField(ref __CountryCode, value, "CountryCode"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.Boolean __IsBadged;
        [EntityField(false)]
        public System.Boolean IsBadged
        {
            get { return __IsBadged; }
            set { SetField(ref __IsBadged, value, "IsBadged"); }
        }
        private System.String __BadgeText;
        [EntityField(true)]
        public System.String BadgeText
        {
            get { return __BadgeText; }
            set { SetField(ref __BadgeText, value, "BadgeText"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.Boolean __UserPreferencesActivityRemindersPopup;
        [EntityField(false)]
        public System.Boolean UserPreferencesActivityRemindersPopup
        {
            get { return __UserPreferencesActivityRemindersPopup; }
            set { SetField(ref __UserPreferencesActivityRemindersPopup, value, "UserPreferencesActivityRemindersPopup"); }
        }
        private System.Boolean __UserPreferencesEventRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesEventRemindersCheckboxDefault
        {
            get { return __UserPreferencesEventRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesEventRemindersCheckboxDefault, value, "UserPreferencesEventRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesTaskRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesTaskRemindersCheckboxDefault
        {
            get { return __UserPreferencesTaskRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesTaskRemindersCheckboxDefault, value, "UserPreferencesTaskRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesReminderSoundOff;
        [EntityField(false)]
        public System.Boolean UserPreferencesReminderSoundOff
        {
            get { return __UserPreferencesReminderSoundOff; }
            set { SetField(ref __UserPreferencesReminderSoundOff, value, "UserPreferencesReminderSoundOff"); }
        }
        private System.Boolean __UserPreferencesDisableAllFeedsEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableAllFeedsEmail
        {
            get { return __UserPreferencesDisableAllFeedsEmail; }
            set { SetField(ref __UserPreferencesDisableAllFeedsEmail, value, "UserPreferencesDisableAllFeedsEmail"); }
        }
        private System.Boolean __UserPreferencesDisableFollowersEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFollowersEmail
        {
            get { return __UserPreferencesDisableFollowersEmail; }
            set { SetField(ref __UserPreferencesDisableFollowersEmail, value, "UserPreferencesDisableFollowersEmail"); }
        }
        private System.Boolean __UserPreferencesDisableProfilePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableProfilePostEmail
        {
            get { return __UserPreferencesDisableProfilePostEmail; }
            set { SetField(ref __UserPreferencesDisableProfilePostEmail, value, "UserPreferencesDisableProfilePostEmail"); }
        }
        private System.Boolean __UserPreferencesDisableChangeCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableChangeCommentEmail
        {
            get { return __UserPreferencesDisableChangeCommentEmail; }
            set { SetField(ref __UserPreferencesDisableChangeCommentEmail, value, "UserPreferencesDisableChangeCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLaterCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLaterCommentEmail
        {
            get { return __UserPreferencesDisableLaterCommentEmail; }
            set { SetField(ref __UserPreferencesDisableLaterCommentEmail, value, "UserPreferencesDisableLaterCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisProfPostCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisProfPostCommentEmail
        {
            get { return __UserPreferencesDisProfPostCommentEmail; }
            set { SetField(ref __UserPreferencesDisProfPostCommentEmail, value, "UserPreferencesDisProfPostCommentEmail"); }
        }
        private System.Boolean __UserPreferencesContentNoEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentNoEmail
        {
            get { return __UserPreferencesContentNoEmail; }
            set { SetField(ref __UserPreferencesContentNoEmail, value, "UserPreferencesContentNoEmail"); }
        }
        private System.Boolean __UserPreferencesContentEmailAsAndWhen;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentEmailAsAndWhen
        {
            get { return __UserPreferencesContentEmailAsAndWhen; }
            set { SetField(ref __UserPreferencesContentEmailAsAndWhen, value, "UserPreferencesContentEmailAsAndWhen"); }
        }
        private System.Boolean __UserPreferencesApexPagesDeveloperMode;
        [EntityField(false)]
        public System.Boolean UserPreferencesApexPagesDeveloperMode
        {
            get { return __UserPreferencesApexPagesDeveloperMode; }
            set { SetField(ref __UserPreferencesApexPagesDeveloperMode, value, "UserPreferencesApexPagesDeveloperMode"); }
        }
        private System.Boolean __UserPreferencesHideCSNGetChatterMobileTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNGetChatterMobileTask
        {
            get { return __UserPreferencesHideCSNGetChatterMobileTask; }
            set { SetField(ref __UserPreferencesHideCSNGetChatterMobileTask, value, "UserPreferencesHideCSNGetChatterMobileTask"); }
        }
        private System.Boolean __UserPreferencesDisableMentionsPostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMentionsPostEmail
        {
            get { return __UserPreferencesDisableMentionsPostEmail; }
            set { SetField(ref __UserPreferencesDisableMentionsPostEmail, value, "UserPreferencesDisableMentionsPostEmail"); }
        }
        private System.Boolean __UserPreferencesDisMentionsCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisMentionsCommentEmail
        {
            get { return __UserPreferencesDisMentionsCommentEmail; }
            set { SetField(ref __UserPreferencesDisMentionsCommentEmail, value, "UserPreferencesDisMentionsCommentEmail"); }
        }
        private System.Boolean __UserPreferencesHideCSNDesktopTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNDesktopTask
        {
            get { return __UserPreferencesHideCSNDesktopTask; }
            set { SetField(ref __UserPreferencesHideCSNDesktopTask, value, "UserPreferencesHideCSNDesktopTask"); }
        }
        private System.Boolean __UserPreferencesHideChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideChatterOnboardingSplash
        {
            get { return __UserPreferencesHideChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideChatterOnboardingSplash, value, "UserPreferencesHideChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesHideSecondChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideSecondChatterOnboardingSplash
        {
            get { return __UserPreferencesHideSecondChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideSecondChatterOnboardingSplash, value, "UserPreferencesHideSecondChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesDisCommentAfterLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisCommentAfterLikeEmail
        {
            get { return __UserPreferencesDisCommentAfterLikeEmail; }
            set { SetField(ref __UserPreferencesDisCommentAfterLikeEmail, value, "UserPreferencesDisCommentAfterLikeEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLikeEmail
        {
            get { return __UserPreferencesDisableLikeEmail; }
            set { SetField(ref __UserPreferencesDisableLikeEmail, value, "UserPreferencesDisableLikeEmail"); }
        }
        private System.Boolean __UserPreferencesSortFeedByComment;
        [EntityField(false)]
        public System.Boolean UserPreferencesSortFeedByComment
        {
            get { return __UserPreferencesSortFeedByComment; }
            set { SetField(ref __UserPreferencesSortFeedByComment, value, "UserPreferencesSortFeedByComment"); }
        }
        private System.Boolean __UserPreferencesDisableMessageEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMessageEmail
        {
            get { return __UserPreferencesDisableMessageEmail; }
            set { SetField(ref __UserPreferencesDisableMessageEmail, value, "UserPreferencesDisableMessageEmail"); }
        }
        private System.Boolean __UserPreferencesJigsawListUser;
        [EntityField(false)]
        public System.Boolean UserPreferencesJigsawListUser
        {
            get { return __UserPreferencesJigsawListUser; }
            set { SetField(ref __UserPreferencesJigsawListUser, value, "UserPreferencesJigsawListUser"); }
        }
        private System.Boolean __UserPreferencesDisableBookmarkEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableBookmarkEmail
        {
            get { return __UserPreferencesDisableBookmarkEmail; }
            set { SetField(ref __UserPreferencesDisableBookmarkEmail, value, "UserPreferencesDisableBookmarkEmail"); }
        }
        private System.Boolean __UserPreferencesDisableSharePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableSharePostEmail
        {
            get { return __UserPreferencesDisableSharePostEmail; }
            set { SetField(ref __UserPreferencesDisableSharePostEmail, value, "UserPreferencesDisableSharePostEmail"); }
        }
        private System.Boolean __UserPreferencesEnableAutoSubForFeeds;
        [EntityField(false)]
        public System.Boolean UserPreferencesEnableAutoSubForFeeds
        {
            get { return __UserPreferencesEnableAutoSubForFeeds; }
            set { SetField(ref __UserPreferencesEnableAutoSubForFeeds, value, "UserPreferencesEnableAutoSubForFeeds"); }
        }
        private System.Boolean __UserPreferencesDisableFileShareNotificationsForApi;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFileShareNotificationsForApi
        {
            get { return __UserPreferencesDisableFileShareNotificationsForApi; }
            set { SetField(ref __UserPreferencesDisableFileShareNotificationsForApi, value, "UserPreferencesDisableFileShareNotificationsForApi"); }
        }
        private System.Boolean __UserPreferencesShowTitleToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToExternalUsers
        {
            get { return __UserPreferencesShowTitleToExternalUsers; }
            set { SetField(ref __UserPreferencesShowTitleToExternalUsers, value, "UserPreferencesShowTitleToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowManagerToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowManagerToExternalUsers
        {
            get { return __UserPreferencesShowManagerToExternalUsers; }
            set { SetField(ref __UserPreferencesShowManagerToExternalUsers, value, "UserPreferencesShowManagerToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowEmailToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowEmailToExternalUsers
        {
            get { return __UserPreferencesShowEmailToExternalUsers; }
            set { SetField(ref __UserPreferencesShowEmailToExternalUsers, value, "UserPreferencesShowEmailToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowWorkPhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowWorkPhoneToExternalUsers
        {
            get { return __UserPreferencesShowWorkPhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowWorkPhoneToExternalUsers, value, "UserPreferencesShowWorkPhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowMobilePhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowMobilePhoneToExternalUsers
        {
            get { return __UserPreferencesShowMobilePhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowMobilePhoneToExternalUsers, value, "UserPreferencesShowMobilePhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowFaxToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowFaxToExternalUsers
        {
            get { return __UserPreferencesShowFaxToExternalUsers; }
            set { SetField(ref __UserPreferencesShowFaxToExternalUsers, value, "UserPreferencesShowFaxToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStreetAddressToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStreetAddressToExternalUsers
        {
            get { return __UserPreferencesShowStreetAddressToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStreetAddressToExternalUsers, value, "UserPreferencesShowStreetAddressToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToExternalUsers
        {
            get { return __UserPreferencesShowCityToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCityToExternalUsers, value, "UserPreferencesShowCityToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToExternalUsers
        {
            get { return __UserPreferencesShowStateToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStateToExternalUsers, value, "UserPreferencesShowStateToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToExternalUsers
        {
            get { return __UserPreferencesShowPostalCodeToExternalUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToExternalUsers, value, "UserPreferencesShowPostalCodeToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToExternalUsers
        {
            get { return __UserPreferencesShowCountryToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCountryToExternalUsers, value, "UserPreferencesShowCountryToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowProfilePicToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowProfilePicToGuestUsers
        {
            get { return __UserPreferencesShowProfilePicToGuestUsers; }
            set { SetField(ref __UserPreferencesShowProfilePicToGuestUsers, value, "UserPreferencesShowProfilePicToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowTitleToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToGuestUsers
        {
            get { return __UserPreferencesShowTitleToGuestUsers; }
            set { SetField(ref __UserPreferencesShowTitleToGuestUsers, value, "UserPreferencesShowTitleToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToGuestUsers
        {
            get { return __UserPreferencesShowCityToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCityToGuestUsers, value, "UserPreferencesShowCityToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToGuestUsers
        {
            get { return __UserPreferencesShowStateToGuestUsers; }
            set { SetField(ref __UserPreferencesShowStateToGuestUsers, value, "UserPreferencesShowStateToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToGuestUsers
        {
            get { return __UserPreferencesShowPostalCodeToGuestUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToGuestUsers, value, "UserPreferencesShowPostalCodeToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToGuestUsers
        {
            get { return __UserPreferencesShowCountryToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCountryToGuestUsers, value, "UserPreferencesShowCountryToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesHideS1BrowserUI;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideS1BrowserUI
        {
            get { return __UserPreferencesHideS1BrowserUI; }
            set { SetField(ref __UserPreferencesHideS1BrowserUI, value, "UserPreferencesHideS1BrowserUI"); }
        }
        private System.Boolean __UserPreferencesDisableEndorsementEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableEndorsementEmail
        {
            get { return __UserPreferencesDisableEndorsementEmail; }
            set { SetField(ref __UserPreferencesDisableEndorsementEmail, value, "UserPreferencesDisableEndorsementEmail"); }
        }
        private System.Boolean __UserPreferencesLightningExperiencePreferred;
        [EntityField(false)]
        public System.Boolean UserPreferencesLightningExperiencePreferred
        {
            get { return __UserPreferencesLightningExperiencePreferred; }
            set { SetField(ref __UserPreferencesLightningExperiencePreferred, value, "UserPreferencesLightningExperiencePreferred"); }
        }
        private System.String __FullPhotoUrl;
        [EntityField(true)]
        public System.String FullPhotoUrl
        {
            get { return __FullPhotoUrl; }
            set { SetField(ref __FullPhotoUrl, value, "FullPhotoUrl"); }
        }
        private System.String __SmallPhotoUrl;
        [EntityField(true)]
        public System.String SmallPhotoUrl
        {
            get { return __SmallPhotoUrl; }
            set { SetField(ref __SmallPhotoUrl, value, "SmallPhotoUrl"); }
        }
        private PickUserProfileCurrencyIsoCode __CurrencyIsoCode;
        [EntityField(false)]
        public PickUserProfileCurrencyIsoCode CurrencyIsoCode
        {
            get { return __CurrencyIsoCode; }
            set { SetField(ref __CurrencyIsoCode, value, "CurrencyIsoCode"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("ManagerId")]
        public RelationShip<UserProfile,UserProfile> ManagedUsers
        {
            get;set;
        }
    }
    [EntityName("UserRecordAccess")]
    public class UserRecordAccess : ISalesforceEntity
    {
    [JsonConstructor]
        private UserRecordAccess(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserRecordAccess()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private PickUserRecordAccessRecordId __RecordId;
        [EntityField(false)]
        public PickUserRecordAccessRecordId RecordId
        {
            get { return __RecordId; }
            set { SetField(ref __RecordId, value, "RecordId"); }
        }
        private System.Boolean __HasReadAccess;
        [EntityField(false)]
        public System.Boolean HasReadAccess
        {
            get { return __HasReadAccess; }
            set { SetField(ref __HasReadAccess, value, "HasReadAccess"); }
        }
        private System.Boolean __HasEditAccess;
        [EntityField(false)]
        public System.Boolean HasEditAccess
        {
            get { return __HasEditAccess; }
            set { SetField(ref __HasEditAccess, value, "HasEditAccess"); }
        }
        private System.Boolean __HasDeleteAccess;
        [EntityField(false)]
        public System.Boolean HasDeleteAccess
        {
            get { return __HasDeleteAccess; }
            set { SetField(ref __HasDeleteAccess, value, "HasDeleteAccess"); }
        }
        private System.Boolean __HasTransferAccess;
        [EntityField(false)]
        public System.Boolean HasTransferAccess
        {
            get { return __HasTransferAccess; }
            set { SetField(ref __HasTransferAccess, value, "HasTransferAccess"); }
        }
        private System.Boolean __HasAllAccess;
        [EntityField(false)]
        public System.Boolean HasAllAccess
        {
            get { return __HasAllAccess; }
            set { SetField(ref __HasAllAccess, value, "HasAllAccess"); }
        }
        private PickUserRecordAccessMaxAccessLevel __MaxAccessLevel;
        [EntityField(true)]
        public PickUserRecordAccessMaxAccessLevel MaxAccessLevel
        {
            get { return __MaxAccessLevel; }
            set { SetField(ref __MaxAccessLevel, value, "MaxAccessLevel"); }
        }
    }
    [EntityName("UserRole")]
    public class UserRole : ISalesforceEntity
    {
    [JsonConstructor]
        private UserRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __ParentRoleId;
        [EntityField(true)]
        public System.String ParentRoleId
        {
            get { return __ParentRoleId; }
            set { SetField(ref __ParentRoleId, value, "ParentRoleId"); }
        }
        private System.String __RollupDescription;
        [EntityField(true)]
        public System.String RollupDescription
        {
            get { return __RollupDescription; }
            set { SetField(ref __RollupDescription, value, "RollupDescription"); }
        }
        private PickUserRoleOpportunityAccessForAccountOwner __OpportunityAccessForAccountOwner;
        [EntityField(false)]
        public PickUserRoleOpportunityAccessForAccountOwner OpportunityAccessForAccountOwner
        {
            get { return __OpportunityAccessForAccountOwner; }
            set { SetField(ref __OpportunityAccessForAccountOwner, value, "OpportunityAccessForAccountOwner"); }
        }
        private PickUserRoleCaseAccessForAccountOwner __CaseAccessForAccountOwner;
        [EntityField(true)]
        public PickUserRoleCaseAccessForAccountOwner CaseAccessForAccountOwner
        {
            get { return __CaseAccessForAccountOwner; }
            set { SetField(ref __CaseAccessForAccountOwner, value, "CaseAccessForAccountOwner"); }
        }
        private PickUserRoleContactAccessForAccountOwner __ContactAccessForAccountOwner;
        [EntityField(true)]
        public PickUserRoleContactAccessForAccountOwner ContactAccessForAccountOwner
        {
            get { return __ContactAccessForAccountOwner; }
            set { SetField(ref __ContactAccessForAccountOwner, value, "ContactAccessForAccountOwner"); }
        }
        private System.String __ForecastUserId;
        [EntityField(true)]
        public System.String ForecastUserId
        {
            get { return __ForecastUserId; }
            set { SetField(ref __ForecastUserId, value, "ForecastUserId"); }
        }
        private System.Boolean __MayForecastManagerShare;
        [EntityField(false)]
        public System.Boolean MayForecastManagerShare
        {
            get { return __MayForecastManagerShare; }
            set { SetField(ref __MayForecastManagerShare, value, "MayForecastManagerShare"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __DeveloperName;
        [EntityField(true)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __PortalAccountId;
        [EntityField(true)]
        public System.String PortalAccountId
        {
            get { return __PortalAccountId; }
            set { SetField(ref __PortalAccountId, value, "PortalAccountId"); }
        }
        private PickUserRolePortalType __PortalType;
        [EntityField(true)]
        public PickUserRolePortalType PortalType
        {
            get { return __PortalType; }
            set { SetField(ref __PortalType, value, "PortalType"); }
        }
        private PickUserRolePortalRole __PortalRole;
        [EntityField(true)]
        public PickUserRolePortalRole PortalRole
        {
            get { return __PortalRole; }
            set { SetField(ref __PortalRole, value, "PortalRole"); }
        }
        private System.String __PortalAccountOwnerId;
        [EntityField(true)]
        public System.String PortalAccountOwnerId
        {
            get { return __PortalAccountOwnerId; }
            set { SetField(ref __PortalAccountOwnerId, value, "PortalAccountOwnerId"); }
        }
        [JsonIgnore]
        [ReferencedByField("UserRoleId")]
        public RelationShip<UserRole,User> Users
        {
            get;set;
        }
    }
    [EntityName("UserTeamMember")]
    public class UserTeamMember : ISalesforceEntity
    {
    [JsonConstructor]
        private UserTeamMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserTeamMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private PickUserTeamMemberOpportunityAccessLevel __OpportunityAccessLevel;
        [EntityField(false)]
        public PickUserTeamMemberOpportunityAccessLevel OpportunityAccessLevel
        {
            get { return __OpportunityAccessLevel; }
            set { SetField(ref __OpportunityAccessLevel, value, "OpportunityAccessLevel"); }
        }
        private PickUserTeamMemberTeamMemberRole __TeamMemberRole;
        [EntityField(true)]
        public PickUserTeamMemberTeamMemberRole TeamMemberRole
        {
            get { return __TeamMemberRole; }
            set { SetField(ref __TeamMemberRole, value, "TeamMemberRole"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    public class SalesforceDataContext : SoqlContext
    {
        public SalesforceDataContext(string instanceName, Rest.OAuth.ImpersonationParam authparams) : base(instanceName, authparams) { }
        public IQueryable<Account> Accounts => GetTable<Account>();
        public IQueryable<AccountTeamBrandTag> AccountTeamBrandTags => GetTable<AccountTeamBrandTag>();
        public IQueryable<AccountTeam> AccountTeams => GetTable<AccountTeam>();
        public IQueryable<ActionPlan> ActionPlans => GetTable<ActionPlan>();
        public IQueryable<ActivityHistory> ActivityHistories => GetTable<ActivityHistory>();
        public IQueryable<BillTo> BillToes => GetTable<BillTo>();
        public IQueryable<Brand> Brands => GetTable<Brand>();
        public IQueryable<Case> Cases => GetTable<Case>();
        public IQueryable<CaseHistory> CaseHistories => GetTable<CaseHistory>();
        public IQueryable<ChannelChangeBrandLeader> ChannelChangeBrandLeaders => GetTable<ChannelChangeBrandLeader>();
        public IQueryable<ChannelChangeBrandVP> ChannelChangeBrandVPs => GetTable<ChannelChangeBrandVP>();
        public IQueryable<ChannelChangeGeneric> ChannelChangeGenerics => GetTable<ChannelChangeGeneric>();
        public IQueryable<ChannelChangeHistory> ChannelChangeHistories => GetTable<ChannelChangeHistory>();
        public IQueryable<ChannelChange> ChannelChanges => GetTable<ChannelChange>();
        public IQueryable<ChannelLineCardDetails> ChannelLineCardDetails => GetTable<ChannelLineCardDetails>();
        public IQueryable<ChannelLineCard> ChannelLineCards => GetTable<ChannelLineCard>();
        public IQueryable<Channel> Channels => GetTable<Channel>();
        public IQueryable<Contact> Contacts => GetTable<Contact>();
        public IQueryable<ContactHistory> ContactHistories => GetTable<ContactHistory>();
        public IQueryable<CustGoal> CustGoals => GetTable<CustGoal>();
        public IQueryable<Dashboard> Dashboards => GetTable<Dashboard>();
        public IQueryable<Event> Events => GetTable<Event>();
        public IQueryable<Financial> Financials => GetTable<Financial>();
        public IQueryable<Folder> Folders => GetTable<Folder>();
        public IQueryable<Group> Groups => GetTable<Group>();
        public IQueryable<GroupMember> GroupMembers => GetTable<GroupMember>();
        public IQueryable<JCIBrandHistory> JCIBrandHistories => GetTable<JCIBrandHistory>();
        public IQueryable<JCIBrand> JCIBrands => GetTable<JCIBrand>();
        public IQueryable<Lead> Leads => GetTable<Lead>();
        public IQueryable<LeadHistory> LeadHistories => GetTable<LeadHistory>();
        public IQueryable<MarketIntelligence> MarketIntelligences => GetTable<MarketIntelligence>();
        public IQueryable<MarketMappingHistory> MarketMappingHistories => GetTable<MarketMappingHistory>();
        public IQueryable<MarketMapping> MarketMappings => GetTable<MarketMapping>();
        public IQueryable<Market> Markets => GetTable<Market>();
        public IQueryable<Opportunity> Opportunities => GetTable<Opportunity>();
        public IQueryable<OpportunityFieldHistory> OpportunityFieldHistories => GetTable<OpportunityFieldHistory>();
        public IQueryable<OpportunityHistory> OpportunityHistories => GetTable<OpportunityHistory>();
        public IQueryable<OpportunityLineItem> OpportunityLineItems => GetTable<OpportunityLineItem>();
        public IQueryable<OpportunityPhase> OpportunityPhases => GetTable<OpportunityPhase>();
        public IQueryable<OpportunitySplit> OpportunitySplits => GetTable<OpportunitySplit>();
        public IQueryable<OpportunityStatusCodes> OpportunityStatusCodes => GetTable<OpportunityStatusCodes>();
        public IQueryable<OpportunityStages> OpportunityStages => GetTable<OpportunityStages>();
        public IQueryable<Product2> Product2 => GetTable<Product2>();
        public IQueryable<ProductLineHistory> ProductLineHistories => GetTable<ProductLineHistory>();
        public IQueryable<ProductLine> ProductLines => GetTable<ProductLine>();
        public IQueryable<Profile> Profiles => GetTable<Profile>();
        public IQueryable<ProgramHistory> ProgramHistories => GetTable<ProgramHistory>();
        //public IQueryable<Program> Programs => GetTable<Program>();
        public IQueryable<RecordType> RecordTypes => GetTable<RecordType>();
        public IQueryable<Report> Reports => GetTable<Report>();
        public IQueryable<SellingEntityRoleMap> SellingEntityRoleMaps => GetTable<SellingEntityRoleMap>();
        public IQueryable<StrategicGoalHistory> StrategicGoalHistories => GetTable<StrategicGoalHistory>();
        public IQueryable<StrategicGoal> StrategicGoals => GetTable<StrategicGoal>();
        public IQueryable<Task> Tasks => GetTable<Task>();
        public IQueryable<TaskRelation> TaskRelations => GetTable<TaskRelation>();
        public IQueryable<TaskStatus> TaskStatus => GetTable<TaskStatus>();
        public IQueryable<TaskWhoRelation> TaskWhoRelations => GetTable<TaskWhoRelation>();
        public IQueryable<User> Users => GetTable<User>();
        public IQueryable<UserProfile> UserProfiles => GetTable<UserProfile>();
        public IQueryable<UserRecordAccess> UserRecordAccesses => GetTable<UserRecordAccess>();
        public IQueryable<UserRole> UserRoles => GetTable<UserRole>();
        public IQueryable<UserTeamMember> UserTeamMembers => GetTable<UserTeamMember>();
    }
}

